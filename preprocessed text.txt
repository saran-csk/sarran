how to code in python 3lisa tagliaferri digitalocean new york city new york usathis work is licensed under a creative commons attributionnoncommercialsharealike 40international licenseisbn 9780999773017about digitaloceandigitalocean is a cloud services platform delivering the simplicitydevelopers love and businesses trust to run production applications atscale it provides highly available secure and scalable compute storageand networking solutions that help developers build great softwarefaster founded in 2012 with ofﬁces in new york and cambridge madigitalocean offers transparent and affordable pricing an elegant userinterface and one of the largest libraries of open source resourcesavailable for more information please visithttpswwwdigitaloceancom or follow digitalocean on twitterread this book online and receive server credit viahttpsdocopythonbookdigitalocean community teamdirector of community etel sverdlovtechnical writers melissa anderson brian boucheron mark drakejustin ellingwood katy howard lisa tagliaferritechnical editors brian hogan hazel virdóhow to code in python 31 introduction2 python 2 vs python 3 practical considerations3 how to install python 3 and set up a local programmingenvironment on ubuntu 16044 how to install python 3 and set up a local programmingenvironment on macos5 how to install python 3 and set up a local programmingenvironment on windows 106 how to install python 3 and set up a local programmingenvironment on centos 77 how to install python 3 and set up a programming environment onan ubuntu 1604 server8 how to write your first python 3 program9 how to work with the python interactive console10 how to write comments11 understanding data types12 an introduction to working with strings13 how to format text14 an introduction to string functions15 how to index and slice strings16 how to convert data types17 how to use variables18 how to use string formatters19 how to do math with operators20 builtin python 3 functions for working with numbers21 understanding boolean logic22 understanding lists23 how to use list methods24 understanding list comprehensions25 understanding tuples26 understanding dictionaries27 how to import modules28 how to write modules29 how to write conditional statements30 how to construct while loops31 how to construct for loops32 how to use break continue and pass statements when workingwith loops33 how to deﬁne functions34 how to use args and kwargs35 how to construct classes and deﬁne objects36 understanding class and instance variables37 understanding inheritance38 how to apply polymorphism to classes39 how to use the python debugger40 how to debug python with an interactive console41 how to use logging42 how to port python 2 code to python 3introductionwhy learn to codesoftware and technology are becoming increasingly integrated into oureveryday lives allowing us to accomplish tasks navigate to destinationsmake purchases and stay connected with friends because of howpervasive software now is to the human experience it is important for allof us to learn some of the key foundational elements of computerprogramming while some may choose to study computer science as partof their formal education everyone can beneﬁt from an understanding ofalgorithmic thinking and computational processes learning how thesoftware that we use on a daily basis is made can allow us as end users toevaluate how and why these applications are developed enabling us tothink critically about these tools and how to improve themjust like any other product computer programs are designed anddeveloped by people who have unconscious biases make errors andmay not be considering all aspects of a problem they are trying to solvethough development teams may do thorough testing and work to createsophisticated and useful programs they do not always meet the needsand expectations of all users while not everyone needs to learn to codecomplex programs learning how coding works can help shape the futureof technology and increase the number of stakeholders decision makersand knowledge producers who can work to build better software foreveryonesome of us may choose to solve challenging problems within thetechnology sector but for those of us not working in computer science aprogramming background can still be a great asset to our professionalﬁelds computer programming provides many applications acrossdomains and can help us solve problems in specialities such as medicineeconomics sociology history and literature to name a few byintegrating technologys methodologies into our own ﬁelds we canleverage computational logic and software design and developmentpractices in our work when we synthesize knowledge across spheresand collaborate with people from different backgrounds we can innovatein new more inclusive ways that can enact meaningful impact acrossmany communitieswhy learn pythonextremely versatile and popular among developers python is a goodgeneralpurpose language that can be used in a variety of applicationsfor those with an understanding of english python is a very humanreadable programming language allowing for quick comprehensionbecause python supports multiple styles including scripting and objectoriented programming it is considered to be a multiparadigm languagethat enables programmers to use the most suitable style to complete aproject increasingly used in industry python offers a lot of potential forthose who would like to begin coding while also being a good choice forthose looking to pick up an additional programming languagelearning the key concepts of python can help you understand howprograms work while also imparting foundational logic that can serveyou in other domains understanding what python and computerprogramming can offer you both as a user and as a developer isimportant as technology is further integrated into daily lifeas you work through this book you will be able to increase yourawareness of computer programming improve your logical thinkingand eventually become a producer of software being able to createsoftware that runs is a very rewarding endeavor and can help you servethose around you by increasing their access and empowering them tobecome collaborators the more communities involved in the creation ofsoftware development the more communities there will be whose needsare served by softwarehow to use this bookthis book is designed to be used in a way that makes sense for youwhile it is arranged to ramp up an emerging developer do not beconstrained by the order feel free to move throughout the book in a waythat makes sense for you once you are familiar with the concepts youcan continue to use the book as a source of referenceif you use the book in the order it is laid out youll begin yourexploration in python by understanding the key differences betweenpython 3 and the previous versions of the language from there youllset up a programming environment for your relevant local or serverbased system and begin by learning general python code structuresyntax and data types along the way youll gain a solid grounding incomputational logic within python which can help you learn otherprogramming languages while the beginning of the book focuses onscripting in python the end of the book will take you through objectoriented coding in python which can make your code more modularﬂexible and complex without repetition by the end of the book youlllearn how to debug your python code and ﬁnally how to port pythoncode across versionswhen you are done with the book we encourage you to look atprojectbased tutorials to put your knowledge into play while creatingprojects that can help you solve problems while you are working onthese projects you can continue to refer to the chapters in this book asreference materialas part of your learning process and once you feel comfortable werecommend that you contribute to an opensource project to improveprograms and drive greater access via software and technicaldocumentation pull requests or repository maintenance our communityis bigger than just us and building software together can make sure thateveryone has an opportunity to participate in the technology we useevery daypython 2 vs python 3 practicalconsiderationspython is an extremely readable and versatile programming languagewith a name inspired by the british comedy group monty python it wasan important foundational goal of the python development team to makethe language fun to use easy to set up and written in a relativelystraightforward style with immediate feedback on errors python is agreat choice for beginnersas python is a multiparadigm language that is it supports multipleprogramming styles including scripting and objectoriented it is goodfor general purpose use increasingly used in industry by organizationssuch as united space alliance nasas main shuttle support contractorand industrial light magic the vfx and animation studio oflucasﬁlm python offers a lot of potential for those looking to pick up anadditional programming languagedeveloped in the late 1980s and ﬁrst published in 1991 python wasauthored by guido van rossum who is still very active in thecommunity conceived as a successor to the abc programminglanguage pythons ﬁrst iteration already included exception handlingfunctions and classes with inheritance when an important usenetnewsgroup discussion forum called complangpython was formed in1994 pythons user base grew paving the way for python to become oneof the most popular programming languages for open sourcedevelopmentgeneral overviewbefore looking into potential opportunities related to and the keyprogrammatic differences between python 2 and python 3 lets take alook into the background of the more recent major releases of pythonpython 2published in late 2000 python 2 signalled a more transparent andinclusive language development process than earlier versions of pythonwith the implementation of pep python enhancement proposal atechnical speciﬁcation that either provides information to pythoncommunity members or describes a new feature of the languageadditionally python 2 included many more programmatic featuresincluding a cycledetecting garbage collector to automate memorymanagement increased unicode support to standardize characters andlist comprehensions to create a list based on existing lists as python 2continued to develop more features were added including unifyingpythons types and classes into one hierarchy in python version 22python 3python 3 is regarded as the future of python and is the version of thelanguage that is currently in development a major overhaul python 3was released in late 2008 to address and amend intrinsic design ﬂaws ofprevious versions of the language the focus of python 3 developmentwas to clean up the codebase and remove redundancy making it clearthat there was only one way to perform a given taskmajor modiﬁcations to python 30 included changing the printstatement into a builtin function improve the way integers are dividedand providing more unicode supportat ﬁrst python 3 was slowly adopted due to the language not beingbackwards compatible with python 2 requiring people to make adecision as to which version of the language to use additionally manypackage libraries were only available for python 2 but as thedevelopment team behind python 3 has reiterated that there is an end oflife for python 2 support more libraries have been ported to python 3the increased adoption of python 3 can be shown by the number ofpython packages that now provide python 3 support which at the timeof writing includes 339 of the 360 most popular python packagespython 27following the 2008 release of python 30 python 27 was published onjuly 3 2010 and planned as the last of the 2x releases the intentionbehind python 27 was to make it easier for python 2x users to portfeatures over to python 3 by providing some measure of compatibilitybetween the two this compatibility support included enhanced modulesfor version 27 like unittest to support test automation argparse forparsing commandline options and more convenient classes in collectionsbecause of python 27s unique position as a version in between theearlier iterations of python 2 and python 30 it has persisted as a verypopular choice for programmers due to its compatibility with manyrobust libraries when we talk about python 2 today we are typicallyreferring to the python 27 release as that is the most frequently usedversionpython 27 however is considered to be a legacy language and itscontinued development which today mostly consists of bug ﬁxes willcease completely in 2020key differenceswhile python 27 and python 3 share many similar capabilities theyshould not be thought of as entirely interchangeable though you canwrite good code and useful programs in either version it is worthunderstanding that there will be some considerable differences in codesyntax and handlingbelow are a few examples but you should keep in mind that you willlikely encounter more syntactical differences as you continue to learnpythonprintin python 2 print is treated as a statement instead of a function whichwas a typical area of confusion as many other actions in python requirearguments inside of parentheses to execute if you want your console toprint out sammy the shark is my favorite sea creature inpython 2 you can do so with the following print statementprint sammy the shark is my favorite sea creaturewith python 3 print is now explicitly treated as a function so toprint out the same string above you can do so simply and easily usingthe syntax of a functionprintsammy the shark is my favorite sea creaturethis change made pythons syntax more consistent and also made iteasier to change between different print functions conveniently the print syntax is also backwardscompatible with python 27 so yourpython 3 print functions can run in either versiondivision with integersin python 2 any number that you type without decimals is treated as theprogramming type called integer while at ﬁrst glance this seems like aneasy way to handle programming types when you try to divide integerstogether sometimes you expect to get an answer with decimal placescalled a ﬂoat as in5 2 25however in python 2 integers were strongly typed and would notchange to a ﬂoat with decimal places even in cases when that wouldmake intuitive sensewhen the two numbers on either side of the division symbol areintegers python 2 does ﬂoor division so that for the quotient x thenumber returned is the largest integer less than or equal to x this meansthat when you write 5 2 to divide the two numbers python 27returns the largest integer less than or equal to 25 in this case 2a 5 2print aoutput2to override this you could add decimal places as in 50 20 to getthe expected answer 25in python 3 integer division became more intuitive as ina 5 2printaoutput25you can still use 50 20 to return 25 but if you want to do ﬂoordivision you should use the python 3 syntax of like thisb 5 2printboutput2this modiﬁcation in python 3 made dividing by integers much moreintuitive and is a feature that is not backwards compatible with python27unicode supportwhen programming languages handle the string type that is asequence of characters they can do so in a few different ways so thatcomputers can convert numbers to letters and other symbolspython 2 uses the ascii alphabet by default so when you type hello sammy python 2 will handle the string as ascii limited toa couple of hundred characters at best in various extended forms asciiis not a very ﬂexible method for encoding characters especially nonenglish charactersto use the more versatile and robust unicode character encodingwhich supports over 128000 characters across contemporary and historicscripts and symbol sets you would have to type uhello sammywith the u preﬁx standing for unicodepython 3 uses unicode by default which saves programmers extradevelopment time and you can easily type and display many morecharacters directly into your program because unicode supports greaterlinguistic character diversity as well as the display of emojis using it asthe default character encoding ensures that mobile devices around theworld are readily supported in your development projectsif you would like your python 3 code to be backwardscompatible withpython 2 though you can keep the u before your stringcontinued developmentthe biggest difference between python 3 and python 2 is not a syntacticalone but the fact that python 27 will lose continued support in 2020 andpython 3 will continue to be developed with more features and more bugﬁxesrecent developments have included formatted string literals simplercustomization of class creation and a cleaner syntactical way to handlematrix multiplicationcontinued development of python 3 means that developers can rely onhaving issues ﬁxed in a timely manner and programs can be moreeffective with increased functionality being built in over timeadditional points to consideras someone starting python as a new programmer or an experiencedprogrammer new to the python language you will want to considerwhat you are hoping to achieve in learning the languageif you are hoping just to learn without a set project in mind you willlikely most want to take into account that python 3 will continue to besupported and developed while python 27 will notif however you are planning to join an existing project you will likelymost want to see what version of python the team is using how adifferent version may interact with the legacy codebase if the packagesthe project uses are supported in a different version and what theimplementation details of the project areif you are beginning a project that you have in mind it would beworthwhile to investigate what packages are available to use and withwhich version of python they are compatible as noted above thoughearlier versions of python 3 had less compatibility with libraries built forversions of python 2 many have ported over to python 3 or arecommitted to doing so in the next four yearsconclusionpython is a versatile and welldocumented programming language tolearn and whether you choose to work with python 2 or python 3 youwill be able to work on exciting software projectsthough there are several key differences it is not too difﬁcult to movefrom python 3 to python 2 with a few tweaks and you will often ﬁndthat python 27 can easily run python 3 code especially when you arestarting out you can learn more about this process by reading the tutorialhow to port python 2 code to python 3it is important to keep in mind that as more developer and communityattention focuses on python 3 the language will become more reﬁnedand inline with the evolving needs of programmers and less supportwill be given to python 27how to install python 3 and set up a localprogramming environment on ubuntu 1604this tutorial will get you up and running with a local python 3programming environment in ubuntu 1604python is a versatile programming language that can be used for manydifferent programming projects first published in 1991 with a nameinspired by the british comedy group monty python the developmentteam wanted to make python a language that was fun to use easy to setup and written in a relatively straightforward style with immediatefeedback on errors python is a great choice for beginners andexperienced developers alike python 3 is the most current version of thelanguage and is considered to be the future of pythonthis tutorial will guide you through installing python 3 on your locallinux machine and setting up a programming environment via thecommand line this tutorial will explicitly cover the installationprocedures for ubuntu 1604 but the general principles apply to anyother distribution of debian linuxprerequisitesyou will need a computer with ubuntu 1604 installed as well as haveadministrative access to that machine and an internet connectionstep 1 setting up python 3well be completing our installation and setup on the command linewhich is a nongraphical way to interact with your computer that isinstead of clicking on buttons youll be typing in text and receivingfeedback from your computer through text as well the command linealso known as a shell can help you modify and automate many of thetasks you do on a computer every day and is an essential tool forsoftware developers there are many terminal commands to learn thatcan enable you to do more powerful things the article an introductionto the linux terminal can get you better oriented with the terminalon ubuntu 1604 you can ﬁnd the terminal application by clicking onthe ubuntu icon in the upperleft hand corner of your screen and typingterminal into the search bar click on the terminal application icon toopen it alternatively you can hit the ctrl alt and t keys on yourkeyboard at the same time to open the terminal applicationautomatically ubuntu terminalubuntu 1604 ships with both python 3 and python 2 preinstalled tomake sure that our versions are uptodate lets update and upgrade thesystem with aptgetsudo aptget updatesudo aptget y upgradethe y ﬂag will conﬁrm that we are agreeing for all items to beinstalled but depending on your version of linux you may need toconﬁrm additional prompts as your system updates and upgradesonce the process is complete we can check the version of python 3that is installed in the system by typingpython3 vyou will receive output in the terminal window that will let you knowthe version number the version number may vary but it will looksimilar to thisoutputpython 352to manage software packages for python lets install pipsudo aptget install y python3pipa tool for use with python pip installs and manages programmingpackages we may want to use in our development projects you caninstall python packages by typingpip3 install package_namehere package_name can refer to any python package or library suchas django for web development or numpy for scientiﬁc computing so ifyou would like to install numpy you can do so with the command pip3 install numpythere are a few more packages and development tools to install toensure that we have a robust setup for our programming environmentsudo aptget install buildessential libssldev libffidev pythondevonce python is set up and pip and other tools are installed we can setup a virtual environment for our development projectsstep 2 setting up a virtual environmentvirtual environments enable you to have an isolated space on yourcomputer for python projects ensuring that each of your projects canhave its own set of dependencies that wont disrupt any of your otherprojectssetting up a programming environment provides us with greatercontrol over our python projects and over how different versions ofpackages are handled this is especially important when working withthirdparty packagesyou can set up as many python programming environments as youwant each environment is basically a directory or folder in yourcomputer that has a few scripts in it to make it act as an environmentwe need to ﬁrst install the venv module part of the standard python 3library so that we can create virtual environments lets install venv bytypingsudo aptget install y python3venvwith this installed we are ready to create environments lets choosewhich directory we would like to put our python programmingenvironments in or we can create a new directory with mkdir as inmkdir environmentscd environmentsonce you are in the directory where you would like the environmentsto live you can create an environment by running the followingcommandpython3 m venv my_envessentially this sets up a new directory that contains a few itemswhich we can view with the ls commandls my_envoutputbin include lib lib64 pyvenvcfg sharetogether these ﬁles work to make sure that your projects are isolatedfrom the broader context of your local machine so that system ﬁles andproject ﬁles dont mix this is good practice for version control and toensure that each of your projects has access to the particular packagesthat it needs python wheels a builtpackage format for python that canspeed up your software production by reducing the number of times youneed to compile will be in the ubuntu 1604 share directoryto use this environment you need to activate it which you can do bytyping the following command that calls the activate scriptsource my_envbinactivateyour prompt will now be preﬁxed with the name of your environmentin this case it is called my_env your preﬁx may look somewhat differentbut the name of your environment in parentheses should be the ﬁrstthing you see on your linemy_env sammysammyenvironmentsthis preﬁx lets us know that the environment my_env is currentlyactive meaning that when we create programs here they will use onlythis particular environments settings and packagesnote within the virtual environment you can use the command python instead of python3 and pip instead of pip3 if you wouldprefer if you use python 3 on your machine outside of an environmentyou will need to use the python3 and pip3 commands exclusivelyafter following these steps your virtual environment is ready to usestep 3 creating a simple programnow that we have our virtual environment set up lets create a simplehello world program this will make sure that our environment isworking and gives us the opportunity to become more familiar withpython if we arent alreadyto do this well open up a commandline text editor such as nano andcreate a new ﬁlemy_env sammysammyenvironments nano hellopyonce the text ﬁle opens up in the terminal window well type out ourprogramprinthello worldexit nano by typing the control and x keys and when prompted tosave the ﬁle press yonce you exit out of nano and return to your shell lets run theprogrammy_env sammysammyenvironmentspython hellopythe hellopy program that you just created should cause your terminalto produce the following outputoutputhello worldto leave the environment simply type the command deactivate andyou will return to your original directoryconclusioncongratulations at this point you have a python 3 programmingenvironment set up on your local ubuntu machine and can begin acoding projectto set up python 3 on another computer follow the local programmingenvironment guides for debian 8 centos 7 windows 10 or macos youcan also read about installing python and setting up a programmingenvironment on an ubuntu 1604 server which is especially useful whenworking on development teamswith your local machine ready for software development you cancontinue to learn more about coding in python by followingunderstanding data types in python 3 and how to use variables inpython 3how to install python 3 and set up a localprogramming environment on macospython is a versatile programming language that can be used for manydifferent programming projects first published in 1991 with a nameinspired by the british comedy group monty python the developmentteam wanted to make python a language that was fun to use easy to setup and written in a relatively straightforward style with immediatefeedback on errors python is a great choice for beginners andexperienced developers alike python 3 is the most current version of thelanguage and is considered to be the future of pythonthis tutorial will guide you through installing python 3 on your localmacos machine and setting up a programming environment via thecommand lineprerequisitesyou will need a macos computer with administrative access that isconnected to the internetstep 1 opening terminalwell be completing most of our installation and set up on the commandline which is a nongraphical way to interact with your computer thatis instead of clicking on buttons youll be typing in text and receivingfeedback from your computer through text as well the command linealso known as a shell can help you modify and automate many of thetasks you do on a computer every day and is an essential tool forsoftware developersthe macos terminal is an application you can use to access thecommand line interface like any other application you can ﬁnd it bygoing into finder navigating to the applications folder and then into theutilities folder from here doubleclick the terminal like any otherapplication to open it up alternatively you can use spotlight by holdingdown the command and spacebar keys to ﬁnd terminal by typing it outin the box that appears macos terminalthere are many more terminal commands to learn that can enable youto do more powerful things the article an introduction to the linuxterminal can get you better oriented with the linux terminal which issimilar to the macos terminalstep 2 installing xcodexcode is an integrated development environment ide that is comprisedof software development tools for macos you may have xcode installedalready to check in your terminal window typexcodeselect pif you receive the following output then xcode is installedoutputlibrarydevelopercommandlinetoolsif you received an error then in your web browser install xcode fromthe app store and accept the default optionsonce xcode is installed return to your terminal window next youllneed to install xcodes separate command line tools app which youcan do by typingxcodeselect installat this point xcode and its command line tools app are fullyinstalled and we are ready to install the package manager homebrewstep 3 installing and setting up homebrewwhile the os x terminal has a lot of the functionality of linux terminalsand other unix systems it does not ship with a good package manager apackage manager is a collection of software tools that work to automateinstallation processes that include initial software installation upgradingand conﬁguring of software and removing software as needed theykeep installations in a central location and can maintain all softwarepackages on the system in formats that are commonly used homebrewprovides os x with a free and open source software package managingsystem that simpliﬁes the installation of software on os xto install homebrew type this into your terminal windowusrbinruby e curl fssl httpsrawgithubusercontentcomhomebrewinstallmasterinstallhomebrew is made with ruby so it will be modifying yourcomputers ruby path the curl command pulls a script from thespeciﬁed url this script will explain what it will do and then pausesthe process to prompt you to conﬁrm this provides you with a lot offeedback on what the script is going to be doing to your system and givesyou the opportunity to verify the processif you need to enter your password note that your keystrokes will notdisplay in the terminal window but they will be recorded simply pressthe return key once youve entered your password otherwise press theletter y for yes whenever you are prompted to conﬁrm the installationlets walk through the ﬂags that are associated with the curlcommandthe f or fail ﬂag tells the terminal window to give no htmldocument output on server errorsthe s or silent ﬂag mutes curl so that it does not show theprogress meter and combined with the s or showerror ﬂag itwill ensure that curl shows an error message if it failsthe l or location ﬂag will tell curl to redo the request to anew place if the server reports that the requested page has moved toa different locationonce the installation process is complete well put the homebrewdirectory at the top of the path environment variable this will ensurethat homebrew installations will be called over the tools that mac os xmay select automatically that could run counter to the developmentenvironment were creatingyou should create or open the bash_profile ﬁle with thecommandline text editor nano using the nano commandnano bash_profileonce the ﬁle opens up in the terminal window write the followingexport pathusrlocalbinpathto save your changes hold down the control key and the letter oand when prompted press the return key now you can exit nano byholding the control key and the letter xfor these changes to activate in the terminal window typesource bash_profileonce you have done this the changes you have made to the pathenvironment variable will be effectivewe can make sure that homebrew was successfully installed bytypingbrew doctorif no updates are required at this time the terminal output will readoutputyour system is ready to brewotherwise you may get a warning to run another command such as brew update to ensure that your installation of homebrew is up todateonce homebrew is ready you can install python 3step 4 installing python 3you can use homebrew to search for everything you can install with the brew search command but to provide us with a shorter list letsinstead search for just the available pythonrelated packages or modulesbrew search pythonthe terminal will output a list of what you can install like thisoutputappenginepython micropython python3 boostpython python wxpython gstpython pythonmarkdown zpython homebrewapachemod_python homebrewversionsgstpython010 homebrewpythonpythondbus caskroomcaskkk7dspythonruntime homebrewpythonvpython caskroomcaskmysqlconnectorpython python 3 will be among the items on the list lets go ahead and installitbrew install python3the terminal window will give you feedback regarding the installationprocess of python 3 it may take a few minutes before installation iscompletealong with python 3 homebrew will install pip setuptools andwheela tool for use with python we will use pip to install and manageprogramming packages we may want to use in our developmentprojects you can install python packages by typingpip3 install package_namehere package_name can refer to any python package or library suchas django for web development or numpy for scientiﬁc computing so ifyou would like to install numpy you can do so with the command pip3 install numpysetuptools facilitates packaging python projects and wheel is a builtpackage format for python that can speed up your software productionby reducing the number of times you need to compileto check the version of python 3 that you installed you can typepython3 versionthis will output the speciﬁc version of python that is currentlyinstalled which will by default be the most uptodate stable version ofpython 3 that is availableto update your version of python 3 you can ﬁrst update homebrewand then update pythonbrew updatebrew upgrade python3it is good practice to ensure that your version of python is uptodatestep 5 creating a virtual environmentnow that we have xcode homebrew and python installed we can goon to create our programming environmentvirtual environments enable you to have an isolated space on yourcomputer for python projects ensuring that each of your projects canhave its own set of dependencies that wont disrupt any of your otherprojectssetting up a programming environment provides us with greatercontrol over our python projects and over how different versions ofpackages are handled this is especially important when working withthirdparty packagesyou can set up as many python programming environments as youwould like each environment is basically a directory or folder in yourcomputer that has a few scripts in it to make it act as an environmentchoose which directory you would like to put your pythonprogramming environments in or create a new directory with mkdir asinmkdir environmentscd environmentsonce you are in the directory where you would like the environmentsto live you can create an environment by running the followingcommandpython36 m venv my_envessentially this command creates a new directory in this case calledmy_env that contains a few items the pyvenvcfg ﬁle points to thepython installation that you used to run the command the libsubdirectory contains a copy of the python version and has a sitepackages subdirectory inside it that starts out empty but will eventuallyhold the relevant thirdparty modules that you install the includesubdirectory compiles packages the bin subdirectory has a copy of thepython binary along with the activate shell script that is used to set upthe environmenttogether these ﬁles work to make sure that your projects are isolatedfrom the broader context of your local machine so that system ﬁles andproject ﬁles dont mix this is good practice for version control and toensure that each of your projects has access to the particular packagesthat it needsto use this environment you need to activate it which you can do bytyping the following command that calls the activate scriptsource my_envbinactivateyour prompt will now be preﬁxed with the name of your environmentin this case it is called my_envmy_env sammysmbp sammythis preﬁx lets us know that the environment my_env is currentlyactive meaning that when we create programs here they will use onlythis particular environments settings and packagesnote within the virtual environment you can use the command python instead of python3 and pip instead of pip3 if you wouldprefer if you use python 3 on your machine outside of an environmentyoull need to use the python3 and pip3 commands exclusively as python and pip will call an earlier version of pythonafter following these steps your virtual environment is ready to usestep 6 creating a simple programnow that we have our virtual environment set up lets create a simplehello world program this will make sure that our environment isworking and gives us the opportunity to become more familiar withpython if we arent alreadyto do this well open up a commandline text editor such as nano andcreate a new ﬁlemy_env sammysmbp sammy nano hellopyonce the text ﬁle opens up in terminal well type out our programprinthello worldexit nano by typing the control and x keys and when prompted tosave the ﬁle press yonce you exit out of nano and return to your shell lets run theprogrammy_env sammysmbp sammy python hellopythe hellopy program that you just created should cause terminal toproduce the following outputoutputhello worldto leave the environment simply type the command deactivate andyoull return to your original directoryconclusioncongratulations at this point you have a python 3 programmingenvironment set up on your local mac os x machine and can begin acoding projectto set up python 3 on another computer follow the local programmingenvironment guides for ubuntu 1604 debian 8 centos 7 or windows10 you can also read about installing python and setting up aprogramming environment on an ubuntu 1604 server which isespecially useful when working on development teamswith your local machine ready for software development you cancontinue to learn more about coding in python by followingunderstanding data types in python 3 and how to use variables inpython 3how to install python 3 and set up a localprogramming environment on windows 10python is a versatile programming language that can be used for manydifferent programming projects first published in 1991 with a nameinspired by the british comedy group monty python the developmentteam wanted to make python a language that was fun to use easy to setup and written in a relatively straightforward style with immediatefeedback on errors python is a great choice for beginners andexperienced developers alike python 3 is the most current version of thelanguage and is considered to be the future of pythonthis tutorial will guide you through installing python 3 on your localwindows 10 machine and setting up a programming environment via thecommand lineprerequisitesyou will need a windows 10 computer with administrative access that isconnected to the internetstep 1 opening and conﬁguring powershellwell be completing most of our installation and setup on a commandline interface which is a nongraphical way to interact with yourcomputer that is instead of clicking on buttons youll be typing in textand receiving feedback from your computer through text as well thecommand line also known as a shell can help you modify and automatemany of the tasks you do on a computer every day and is an essentialtool for software developerspowershell is a program from microsoft that provides a commandlineshell interface administrative tasks are performed by running cmdletswhich are pronounced commandlets specialized classes of the netsoftware framework that can carry out operations opensourced inaugust 2016 powershell is now available across platforms for bothwindows and unix systems including mac and linuxto ﬁnd windows powershell you can rightclick on the start menuicon on the lower lefthand corner of your screen when the menu popsup you should click on search then type powershell into the searchbar when you are presented with options rightclick on windowspowershell the desktop app for our purposes well select run asadministrator when you are prompted with a dialogue box that asksdo you want to allow this app to make changes to your pc click onyesonce you do this youll see a textbased interface that has a string ofwords that looks like thiswindows 10 powershellwe can switch out of the system folder by typing the followingcommandcd then well be in a directory such as ps cuserssammyto continue with our installation process we are going to set up somepermissions through powershell conﬁgured to run in the most securemode by default there are a few levels of permissions that you can set upas an administratorrestricted is the default execution policy under this mode you willnot be able to run scripts and powershell will work only as aninteractive shellallsigned will enable you to run all scripts and conﬁguration ﬁlesthat are signed by a trusted publisher meaning that you couldpotentially open your machine up to the risk of running maliciousscripts that happen to be signed by a trusted publisherremotesigned will let you run scripts and conﬁguration ﬁlesdownloaded from the internet signed by trusted publishers againopening your machine up to vulnerabilities if these trusted scriptsare actually maliciousunrestricted will run all scripts and conﬁguration ﬁles downloadedfrom the internet as soon as you conﬁrm that you understand thatthe ﬁle was downloaded from the internet in this case no digitalsignature is required so you could be opening your machine up tothe risk of running unsigned and potentially malicious scriptsdownloaded from the internetwe are going to use the remotesigned execution policy to set thepermission for the current user that allows the powershell to acceptdownloaded scripts that we trust without making the permissions asbroad as they would be with an unrestricted permission in thepowershell lets typesetexecutionpolicy scope currentuserpowershell will then prompt us to provide an execution policy andsince we want to use remotesigned well typeremotesignedonce we press enter well be asked if we do want to change theexecution policy type the letter y for yes and allow the changes totake effect we can conﬁrm that this worked by asking for the currentpermissions across the machine by typinggetexecutionpolicy listyou should receive output that looks something like thisoutput scope executionpolicy machinepolicy undefined userpolicy undefined process undefined currentuser remotesigned localmachine undefinedthis conﬁrms that the current user can run trusted scripts downloadedfrom the internet we can now move on to downloading the ﬁles we willneed to set up our python programming environmentstep 2 installing the package manager chocolateya package manager is a collection of software tools that work toautomate installation processes that include the initial installationupgrading and conﬁguring of software and removing software asneeded they keep software installations in a central location and canmaintain all software packages on the system in formats that arecommonly usedchocolatey is a commandline package manager built for windowsthat works like aptget does on linux available in an opensourceversion chocolatey will help you quickly install applications and toolsand we will be using it to download what we need for our developmentenvironmentbefore we install the script lets read it to conﬁrm that we are happywith the changes it will make to our machine to do this we will use thenet scripting framework to download and display the chocolateyscript within the terminal window well create a webclient object called script you can call it whatever you want as long as you use as theﬁrst character that shares internet connection settings with internetexplorerscript newobject netwebclientlets look at the options that we have available to us by piping theobject to the getmember class to return all members properties andmethods of this webclient objectscript getmembersnippet of ouput downloadfileasync method void downloadfileasyncuri address string filename void downloadfileasyncurdownloadfiletaskasync method systemthreadingtaskstask downloadfiletaskasyncstring address string filenadownloadstring method string downloadstringstring address string downloadstringuri address method we will usedownloadstringasync method void downloadstringasyncuri address void downloadstringasyncuri address sydownloadstringtaskasync method systemthreadingtaskstaskstring downloadstringtaskasyncstring address sy looking over the output we can identify the downloadstringmethod that we can use to display the script and signature in thepowershell window lets implement this methodscriptdownloadstringhttpschocolateyorginstallps1after we inspect the script we can install chocolatey by typing thefollowing into powershelliwr httpschocolateyorginstallps1 usebasicparsing iexthe cmdlet iwr or invokewebrequest allows us to extract datafrom the web this will pass the script to the iex or invokeexpression cmdlet which will execute the contents of the scriptrunning the installation script for the chocolatey package managerallow powershell to install chocolatey once it is fully installed wecan begin installing additional tools with the choco commandif we need to upgrade chocolatey at any time in the future we can runthe following commandchoco upgrade chocolateywith our package manager installed we can go on to install the rest ofwhat we need for our python 3 programming environmentstep 3 installing the text editor nano optionalwe are now going to install nano a text editor that uses a command lineinterface which we can use to write programs directly withinpowershell this is not a compulsory step as you can alternatively use atext editor with a graphical user interface such as notepad but nano willget us more accustomed to using powershelllets use chocolatey to install nanochoco install y nanohere we used the y ﬂag so that we conﬁrm automatically that wewant to run the script without being promptedonce nano is installed we will be able to use the nano command tocreate new text ﬁles and will eventually use it to write our ﬁrst pythonprogramstep 4 installing python 3just like we did with nano above we will use chocolatey to installpython 3choco install y python3powershell will now install python 3 generating output withinpowershell during that processonce the process is completed you should see the following outputoutputenvironment vars like path have changed closereopen your shell to see the changes or in powershellcmdexe just type refreshenvthe install of python3 was successful software installed as exe install location is likely defaultchocolatey installed 11 packages 0 packages failed see the log for details cprogramdatachocolateylogschocolateylogwith the installation is ﬁnished youll want to conﬁrm that python isinstalled and ready to go to see the changes use the command refreshenv or close and reopen powershell as an administrator thencheck the version of python available to you on your local machinepython vyou should get output such asoutputpython 351alongside python pip will be installed which will manage softwarepackages for python lets ensure that pip is uptodate by upgrading itpython m pip install upgrade pipwith chocolatey we can call python 3 with the python command wewill use the m ﬂag to run the library module as a script terminating theoption list and from there use pip to install its upgradeonce python is installed and pip updated we can set up a virtualenvironment for our development projectsstep 5 setting up a virtual environmentnow that we have chocolatey nano and python installed we can go onto create our programming environment with the venv modulevirtual environments enable you to have an isolated space on yourcomputer for python projects ensuring that each of your projects canhave its own set of dependencies that wont disrupt any of your otherprojectssetting up a programming environment provides us with greatercontrol over our python projects and over how different versions ofpackages are handled this is especially important when working withthirdparty packagesyou can set up as many python programming environments as youwant each environment is basically a directory or folder in yourcomputer that has a few scripts in it to make it act as an environmentchoose which directory you would like to put your pythonprogramming environments in or create a new directory with mkdir asinmkdir environmentscd environmentsonce you are in the directory where you would like the environmentsto live you can create an environment by running the followingcommandpython m venv my_envusing the python command we will run the venv library module tocreate the virtual environment that in this case we have called my_envessentially venv sets up a new directory that contains a few itemswhich we can view with the ls commandls my_envoutputmode lastwritetime length name d 8222016 220 pm included 8222016 220 pm libd 8222016 220 pm scriptsa 8222016 220 pm 107 pyvenvcfgtogether these ﬁles work to make sure that your projects are isolatedfrom the broader context of your local machine so that system ﬁles andproject ﬁles dont mix this is good practice for version control and toensure that each of your projects has access to the particular packagesthat it needsto use this environment you need to activate it which you can do bytyping the following command that calls the activate script in the scripts directorymy_envscriptsactivateyour prompt will now be preﬁxed with the name of your environmentin this case it is called my_envmy_env ps cuserssammyenvironmentsthis preﬁx lets us know that the environment my_env is currentlyactive meaning that when we create programs here they will use onlythis particular environments settings and packagesstep 6 creating a simple programnow that we have our virtual environment set up lets create a simplehello world program this will make sure that our environment isworking and gives us the opportunity to become more familiar withpython if we arent alreadyto do this well open up nano and create a new ﬁlemy_env ps cuserssammy nano hellopyonce the text ﬁle opens up in terminal well type out our programprinthello worldexit nano by typing the control and x keys and when prompted tosave the ﬁle press y then the enter keyonce you exit out of nano and return to your shell lets run theprogrammy_env ps cuserssammy python hellopythe hellopy program that you just created should cause terminal toproduce the following outputoutputhello worldto leave the environment simply type the command deactivate andyou will return to your original directoryconclusioncongratulations at this point you should have a python 3 programmingenvironment set up on your local windows 10 machine and can begin acoding projectto set up python 3 on another computer follow the local programmingenvironment guides for ubuntu 1604 debian 8 centos 7 or macosyou can also read about installing python and setting up a programmingenvironment on an ubuntu 1604 server which is especially useful whenworking on development teamswith your local machine ready for software development you cancontinue to learn more about coding in python by followingunderstanding data types in python 3 and how to use variables inpython 3how to install python 3 and set up a localprogramming environment on centos 7python is a versatile programming language that can be used for manydifferent programming projects first published in 1991 with a nameinspired by the british comedy group monty python the developmentteam wanted to make python a language that was fun to use easy to setup and written in a relatively straightforward style with immediatefeedback on errors python is a great choice for beginners andexperienced developers alike python 3 is the most current version of thelanguage and is considered to be the future of pythonthis tutorial will guide you through installing python 3 on your localcentos 7 machine and setting up a programming environment via thecommand lineprerequisitesyou will need a centos 7 computer with a nonroot superuser accountthat is connected to the internetstep 1 preparing the systemwe will be completing this installation through the command line ifyour centos 7 computer starts up with a graphical user interface guidesktop you can gain access to the command line interface through themenu by navigating to applications then utilities and then clicking onterminal if you need more guidance on the terminal be sure to readthrough the article an introduction to the linux terminalbefore we begin with the installation lets make sure to update thedefault system applications to have the latest versions availablewe will be using the opensource package manager tool yum whichstands for yellowdog updater modiﬁed this is a commonly used toolfor working with software packages on red hat based linux systemslike centos it will let you easily install and update as well as removesoftware packages on your computerlets ﬁrst make sure that yum is up to date by running this commandsudo yum y updatethe y ﬂag is used to alert the system that we are aware that we aremaking changes preventing the terminal from prompting us to conﬁrmnext we will install yumutils a collection of utilities and plugins thatextend and supplement yumsudo yum y install yumutilsfinally well install the centos development tools which are used toallow you to build and compile software from source codesudo yum y groupinstall developmentonce everything is installed our setup is in place and we can go on toinstall python 3step 2 installing and setting up python 3centos is derived from rhel red hat enterprise linux which hasstability as its primary focus because of this tested and stable versionsof applications are what is most commonly found on the system and indownloadable packages so on centos you will only ﬁnd python 2since instead we would like to install the most current upstream stablerelease of python 3 we will need to install ius which stands for inlinewith upstream stable a community project ius provides red hatpackage manager rpm packages for some newer versions of selectsoftwareto install ius lets install it through yumsudo yum y install httpscentos7iuscommunityorgiusreleaserpmonce ius is ﬁnished installing we can install the most recent versionof pythonsudo yum y install python36uwhen the installation process of python is complete we can check tomake sure that the installation was successful by checking for its versionnumber with the python36 commandpython36 vwith a version of python 36 successfully installed we will receive thefollowing outputoutputpython 361we will next install pip which will manage software packages forpythonsudo yum y install python36upipa tool for use with python we will use pip to install and manageprogramming packages we may want to use in our developmentprojects you can install python packages by typingsudo pip36 install package_namehere package_name can refer to any python package or library suchas django for web development or numpy for scientiﬁc computing so ifyou would like to install numpy you can do so with the command pip36 install numpyfinally we will need to install the ius package python36udevelwhich provides us with libraries and header ﬁles we will need for python3 developmentsudo yum y install python36udevelthe venv module will be used to set up a virtual environment for ourdevelopment projects in the next stepstep 3 setting up a virtual environmentnow that we have python installed and our system set up we can go onto create our programming environment with venvvirtual environments enable you to have an isolated space on yourcomputer for python projects ensuring that each of your projects canhave its own set of dependencies that wont disrupt any of your otherprojectssetting up a programming environment provides us with greatercontrol over our python projects and over how different versions ofpackages are handled this is especially important when working withthirdparty packagesyou can set up as many python programming environments as youwant each environment is basically a directory or folder in yourcomputer that has a few scripts in it to make it act as an environmentchoose which directory you would like to put your pythonprogramming environments in or create a new directory with mkdir asinmkdir environmentscd environmentsonce you are in the directory where you would like the environmentsto live you can create an environment by running the followingcommandpython36 m venv my_envessentially this command creates a new directory in this case calledmy_env that contains a few items that we can see with the ls commandbin include lib lib64 pyvenvcfgtogether these ﬁles work to make sure that your projects are isolatedfrom the broader context of your local machine so that system ﬁles andproject ﬁles dont mix this is good practice for version control and toensure that each of your projects has access to the particular packagesthat it needsto use this environment you need to activate it which you can do bytyping the following command that calls the activate script in the bindirectorysource my_envbinactivateyour prompt will now be preﬁxed with the name of your environmentin this case it is called my_envmy_env sammylocalhost environmentsthis preﬁx lets us know that the environment my_env is currentlyactive meaning that when we create programs here they will use onlythis particular environments settings and packagesnote within the virtual environment you can use the command python instead of python36 and pip instead of pip36 if you wouldprefer if you use python 3 on your machine outside of an environmentyou will need to use the python36 and pip36 commands exclusivelyafter following these steps your virtual environment is ready to usestep 4 creating a simple programnow that we have our virtual environment set up lets create a simplehello world program this will make sure that our environment isworking and gives us the opportunity to become more familiar withpython if we arent alreadyto do this well open up a commandline text editor such as vim andcreate a new ﬁlemy_env sammylocalhost environments vi hellopyonce the text ﬁle opens up in our terminal window we will have totype i to enter insert mode and then we can write our ﬁrst programprinthello worldnow press esc to leave insert mode next type x then enter to saveand exit the ﬁlewe are now ready to run our programmy_env sammylocalhost environments python hellopythe hellopy program that you just created should cause the terminalto produce the following outputoutputhello worldto leave the environment simply type the command deactivate andyoull return to your original directoryconclusioncongratulations at this point you have a python 3 programmingenvironment set up on your local centos 7 machine and can begin acoding projectto set up python 3 on another computer follow the local programmingenvironment guides for ubuntu 1604 debian 8 macos or windows 10you can also read about installing python and setting up a programmingenvironment on an ubuntu 1604 server which is especially useful whenworking on development teamswith your local machine ready for software development you cancontinue to learn more about coding in python by followingunderstanding data types in python 3 and how to use variables inpython 3how to install python 3 and set up aprogramming environment on an ubuntu1604 serverthis tutorial will get your ubuntu 1604 or debian 8 server set up with apython 3 programming environment programming on a server hasmany advantages and makes it easier for teams to collaborate on adevelopment project the general principles of this tutorial will apply toany distribution of debian linuxpython is a versatile programming language that can be used for manydifferent programming projects first published in 1991 with a nameinspired by the british comedy group monty python the developmentteam wanted to make python a language that was fun to use easy to setup and written in a relatively straightforward style with immediatefeedback on errors python is a great choice for beginners andexperienced developers alike python 3 is the most current version of thelanguage and is considered to be the future of pythonthis tutorial will guide you through installing python 3 on a debianlinux server and setting up a programming environmentprerequisitesbefore you begin youll need a server with ubuntu 1604 debian 8 oranother version of debian linux installed youll also need a sudo nonroot user which you can set up by following one of the tutorials belowinitial server setup with ubuntu 1604initial server setup with debian 8if youre not already familiar with a terminal environment you mayﬁnd the article an introduction to the linux terminal useful forbecoming better oriented with the terminalstep 1 setting up python 3ubuntu 1604 debian 8 and other versions of debian linux ship withboth python 3 and python 2 preinstalled to make sure that our versionsare uptodate lets update and upgrade the system with aptgetsudo aptget updatesudo aptget y upgradethe y ﬂag will conﬁrm that we are agreeing for all items to beinstalled but depending on your version of linux you may need toconﬁrm additional prompts as your system updates and upgradesonce the process is complete we can check the version of python 3that is installed in the system by typingpython3 vyoull receive output in the terminal window that will let you knowthe version number the version number may vary depending onwhether you are on ubuntu 1604 debian 8 or another version of linuxbut it will look similar to thisoutputpython 352to manage software packages for python lets install pipsudo aptget install y python3pipa tool for use with python pip installs and manages programmingpackages we may want to use in our development projects you caninstall python packages by typingpip3 install package_namehere package_name can refer to any python package or library suchas django for web development or numpy for scientiﬁc computing so ifyou would like to install numpy you can do so with the command pip3 install numpythere are a few more packages and development tools to install toensure that we have a robust setup for our programming environmentsudo aptget install buildessential libssldev libffidev python3devonce python is set up and pip and other tools are installed we can setup a virtual environment for our development projectsstep 2 setting up a virtual environmentvirtual environments enable you to have an isolated space on your serverfor python projects ensuring that each of your projects can have its ownset of dependencies that wont disrupt any of your other projectssetting up a programming environment provides us with greatercontrol over our python projects and over how different versions ofpackages are handled this is especially important when working withthirdparty packagesyou can set up as many python programming environments as youwant each environment is basically a directory or folder on your serverthat has a few scripts in it to make it act as an environmentwe need to ﬁrst install the venv module part of the standard python 3library so that we can invoke the pyvenv command which will createvirtual environments for us lets install venv by typingsudo aptget install y python3venvwith this installed we are ready to create environments lets choosewhich directory we would like to put our python programmingenvironments in or we can create a new directory with mkdir as inmkdir environmentscd environmentsonce you are in the directory where you would like the environmentsto live you can create an environment by running the followingcommandpyvenv my_envessentially pyvenv sets up a new directory that contains a few itemswhich we can view with the ls commandls my_envoutputbin include lib lib64 pyvenvcfg sharetogether these ﬁles work to make sure that your projects are isolatedfrom the broader context of your local machine so that system ﬁles andproject ﬁles dont mix this is good practice for version control and toensure that each of your projects has access to the particular packagesthat it needs python wheels a builtpackage format for python that canspeed up your software production by reducing the number of times youneed to compile will be in the ubuntu 1604 share directory but indebian 8 it will be in each of the lib directories as there is no sharedirectoryto use this environment you need to activate it which you can do bytyping the following command that calls the activate scriptsource my_envbinactivateyour prompt will now be preﬁxed with the name of your environmentin this case it is called my_env depending on what version of debianlinux you are running your preﬁx may look somewhat different but thename of your environment in parentheses should be the ﬁrst thing yousee on your linemy_env sammyubuntuenvironmentsthis preﬁx lets us know that the environment my_env is currentlyactive meaning that when we create programs here they will use onlythis particular environments settings and packagesnote within the virtual environment you can use the command python instead of python3 and pip instead of pip3 if you wouldprefer if you use python 3 on your machine outside of an environmentyou will need to use the python3 and pip3 commands exclusivelyafter following these steps your virtual environment is ready to usestep 3 creating a simple programnow that we have our virtual environment set up lets create a simplehello world program this will make sure that our environment isworking and gives us the opportunity to become more familiar withpython if we arent alreadyto do this well open up a commandline text editor such as nano andcreate a new ﬁlemy_env sammyubuntuenvironments nano hellopyonce the text ﬁle opens up in the terminal window well type out ourprogramprinthello worldexit nano by typing the control and x keys and when prompted tosave the ﬁle press yonce you exit out of nano and return to your shell lets run theprogrammy_env sammyubuntuenvironments python hellopythe hellopy program that you just created should cause your terminalto produce the following outputoutputhello worldto leave the environment simply type the command deactivate andyou will return to your original directoryconclusioncongratulations at this point you have a python 3 programmingenvironment set up on your debian linux server and you can now begina coding projectto set up python 3 on another computer follow the local programmingenvironment guides for ubuntu 1604 debian 8 windows 10 or macoswith your server set up for software development you can continue tolearn more about coding in python by following understanding datatypes in python 3 and how to use variables in python 3how to write your first python 3 programthe hello world program is a classic and timehonored tradition incomputer programming serving as a simple and complete ﬁrst programfor beginners as well as a good program to test systems andprogramming environments hello world illustrates the basic syntaxof programming languagesthis tutorial will walk you through writing a hello world programin python 3prerequisitesyou should have python 3 installed as well as a local programmingenvironment set up on your computerif you dont have one set up you can use one of the installation andsetup guides below that is appropriate for your operating systemubuntu 1604 or debian 8centos 7mac os xwindows 10writing the hello world programto write the hello world program lets open up a commandline texteditor such as nano and create a new ﬁlenano hellopyonce the text ﬁle opens up in the terminal window well type out ourprogramhellopyprinthello worldlets break down the different components of the codeprint is a function that tells the computer to perform an action weknow it is a function because it uses parentheses print tells pythonto display or output whatever we put in the parentheses by default thiswill output to the current terminal windowsome functions like the print function are builtin functionsincluded in python by default these builtin functions are alwaysavailable for us to use in programs that we create we can also deﬁne ourown functions that we construct ourselves through other elementsinside the parentheses of the print function is a sequence ofcharacters hello world that is enclosed in quotation marksany characters that are inside of quotation marks are called a stringonce we are done writing our program we can exit nano by typing thecontrol and x keys and when prompted to save the ﬁle press yonce you exit out of nano youll return to your shellrunning the hello world programwith our hello world program written we are ready to run theprogram well use the python3 command along with the name of ourprogram ﬁle lets run the programpython3 hellopythe hellopy program that you just created will cause your terminal toproduce the following outputoutputhello worldlets go over what the program did in more detailpython executed the line printhello world by calling the print function the string value of hello world was passed tothe functionin this example the string hello world is also called an argumentsince it is a value that is passed to a functionthe quotes that are on either side of hello world were notprinted to the screen because they are used to tell python that theycontain a string the quotation marks delineate where the string beginsand endssince the program ran you can now conﬁrm that python 3 is properlyinstalled and that the program is syntactically correctconclusioncongratulations you have written the hello world program inpython 3from here you can continue to work with the print function bywriting your own strings to display and can also create new programﬁleskeep learning about programming in python by reading our fulltutorial series how to code in python 3how to work with the python interactiveconsolethe python interactive console also called the python interpreter orpython shell provides programmers with a quick way to executecommands and try out or test code without creating a ﬁleproviding access to all of pythons builtin functions and any installedmodules command history and autocompletion the interactive consoleoffers the opportunity to explore python and the ability to paste codeinto programming ﬁles when you are readythis tutorial will go over how to work with the python interactiveconsole and leverage it as a programming toolentering the interactive consolethe python interactive console can be accessed from any local computeror server with python installedthe command you generally will want to use to enter into the pythoninteractive console for your default version of python ispythonif you have set up a programming environment you can launch theenvironment and access the version of python and modules you haveinstalled in that environment by ﬁrst entering into that environmentcd environments my_envbinactivatethen typing the python commandmy_env sammyubuntuenvironments pythonin this case the default version of python is python 352 which isdisplayed in the output once we enter the command along with therelevant copyright notice and some commands you can type for extrainformationoutputpython 352 default nov 17 2016 170523gcc 540 20160609 on linuxtype help copyright credits or license for more informationthe primary prompt for the next command is three greaterthan signsyou can target speciﬁc versions of python by appending the versionnumber to your command with no spacespython27outputpython 2712 default nov 19 2016 064810gcc 540 20160609 on linux2type help copyright credits or license for more informationhere we received the output that python 2712 will be used if this isour default version of python 2 we could also have entered into thisinteractive console with the command python2alternatively we can call the default python 3 version with thefollowing commandpython3outputpython 352 default nov 17 2016 170523gcc 540 20160609 on linuxtype help copyright credits or license for more informationwe could have also called the above interactive console with thecommand python35with the python interactive console running we can move ontoworking with the shell environment for pythonworking with the python interactive consolethe python interactive interpreter accepts python syntax which youplace following the preﬁxwe can for example assign values to variables birth_year 1868once we have assigned the integer value of 1868 to the variable birth_year we will press return and receive a new line with the threegreaterthan signs as a preﬁx birth_year 1868we can continue to assign variables and then perform math withoperators to get calculations returned birth_year 1868 death_year 1921 age_at_death death_year birth_year printage_at_death53as we would with a script in a ﬁle we assigned variables subtractedone variable from the other and asked the console to print the variablethat represents the differencejust like in any form of python you can also use the interactive consoleas a calculator 203 201015here we divided the integer 203 by 20 and were returned thequotient of 1015multiple lineswhen we are writing python code the will cover multiple lines theinterpreter will use the secondary prompt for continuation lines threedots to break out of these continuation lines you will need to press entertwicewe can see what this looks like in the following code that assigns twovariables and then uses a conditional statement to determine what toprint out to the console sammy sammy shark shark if lensammy lenshark printsammy codes in java else printsammy codes in pythonsammy codes in pythonin this case the lengths of the two strings are equal so the elsestatement prints note that you will need to keep python indentingconvention of four whitespaces otherwise you will receive an error if lensammy lenshark printsammy codes in java file stdin line 2 printsammy codes in java indentationerror expected an indented blockyou can not only experiment with code across multiple lines in thepython console you can also import modulesimporting modulesthe python interpreter provides a quick way for you to check to see ifmodules are available in a speciﬁc programming environment you cando this by using the import statement import matplotlibtraceback most recent call last file stdin line 1 in moduleimporterror no module named matplotlibin the case above the module matplotlib was not available within thecurrent programming environmentin order to install it well need to leave the interactive interpreter andinstall with pip as usualmy_env sammyubuntuenvironments pip install matplotliboutputcollecting matplotlib downloading matplotlib202cp35cp35mmanylinux1_x86_64whl 146mbinstalling collected packages pyparsing cycler pythondateutil numpy pytz matplotlibsuccessfully installed cycler0100 matplotlib202 numpy1130 pyparsing220 pythondateutil260 pytz20172once the matplotlib module along with its dependencies aresuccessfully installed you can go back into the interactive interpretermy_env sammyubuntuenvironments python import matplotlibat this point you will receive no error message and can use theinstalled module either within the shell or within a ﬁleleaving the python interactive consolethere are two main ways to leave the python interactive console eitherwith a keyboard shortcut or a python functionthe keyboard shortcut ctrl d in nixbased systems or ctrl zthen the ctrl key in windows systems will interrupt your console andreturn you to your original terminal environment age_at_death death_year birth_year printage_at_death53sammyubuntuenvironmentsalternatively the python function quit will quit out of theinteractive console and also bring you back to the original terminalenvironment that you were previously in octopus ollie quitsammypythonubuntuenvironmentswhen you use the function quit it will show up in your historyﬁle but the keyboard shortcut ctrl d will not be recordedfile homesammypython_historyage_at_death death_year birth_yearprintage_at_deathoctopus olliequitquitting the python interpreter can be done either way depending onwhat makes sense for your workﬂow and your history needsaccessing historyone of the useful things about the python interactive console is that all ofyour commands are logged to the python_history ﬁle in nixbasedsystems which you can look at in a text editor like nano for instancenano python_historyonce opened with a text editor your python history ﬁle will looksomething like this with your own python command historyfile homesammypython_historyimport pygamequitif 10 5 printhello worldelse printnopesammy sammyshark sharkonce you are done with your ﬁle you can press ctrl x to leavenanoby keeping track of all of your python history you can go back toprevious commands and experiments and copy and paste or modify thatcode for use in python programming ﬁles or in a jupyter notebookconclusionthe python interactive console provides a space to experiment withpython code you can use it as a tool for testing working out logic andmorefor use with debugging python programming ﬁles you can use thepython code module to open up an interactive interpreter within a ﬁlewhich you can read about in our guide how to debug python with aninteractive consolehow to write commentscomments are lines that exist in computer programs that are ignored bycompilers and interpreters including comments in programs makes codemore readable for humans as it provides some information orexplanation about what each part of a program is doingdepending on the purpose of your program comments can serve asnotes to yourself or reminders or they can be written with the intentionof other programmers being able to understand what your code is doingin general it is a good idea to write comments while you are writing orupdating a program as it is easy to forget your thought process later onand comments written later may be less useful in the long termcomment syntaxcomments in python begin with a hash mark and whitespacecharacter and continue to the end of the linegenerally comments will look something like this this is a commentbecause comments do not execute when you run a program you willnot see any indication of the comment there comments are in the sourcecode for humans to read not for computers to executein a hello world program a comment may look like thishellopy print hello world to consoleprinthello worldin a for loop that iterates over a list comments may look like thissharkspy define sharks variable as a list of stringssharks hammerhead great white dogfish frilled bullhead requiem for loop that iterates over sharks list and prints each string itemfor shark in sharks printsharkcomments should be made at the same indent as the code it iscommenting that is a function deﬁnition with no indent would have acomment with no indent and each indent level following would havecomments that are aligned with the code it is commentingfor example here is how the again function from the how tomake a simple calculator program in python 3 tutorial is commentedwith comments following each indent level of the codecalculatorpy define again function to ask user if they want to use the calculator againdef again take input from user calc_again inputdo you want to calculate againplease type y for yes or n for no if user types y run the calculate function if calc_again y calculate if user types n say goodbye to the user and end the program elif calc_again n printsee you later if user types another key run the function again else againcomments are made to help programmers whether it is the originalprogrammer or someone else using or collaborating on the project ifcomments can not be properly maintained and updated along with thecode base it is better to not include a comment rather than write acomment that contradicts or will contradict the codewhen commenting code you should be looking to answer the whybehind the code as opposed to the what or how unless the code isparticularly tricky looking at the code can generally tell what the code isdoing or how it is doing itblock commentsblock comments can be used to explain more complicated code or codethat you dont expect the reader to be familiar with these longerformcomments apply to some or all of the code that follows and are alsoindented at the same level as the codein block comments each line begins with the hash mark and a singlespace if you need to use more than one paragraph they should beseparated by a line that contains a single hash markhere is an example of a block comment that deﬁnes what is happeningin the main function deﬁned below the main function will parse arguments via the parser variable these arguments will be defined by the user on the console this will pass the word argument the user wants to parse along with the filename the user wants to use and also provide help text if the user does not correctly pass the argumentsdef main parser argparseargumentparser parseradd_argument word helpthe word to be searched for in the text file parseradd_argument filename helpthe path to the text file to be searched through block comments are typically used when operations are lessstraightforward and are therefore demanding of a thorough explanationyou should try to avoid overcommenting the code and should tend totrust other programmers to understand python unless you are writingfor a particular audienceinline commentsinline comments occur on the same line of a statement following thecode itself like other comments they begin with a hash mark and asingle whitespace charactergenerally inline comments look like thiscode inline comment about the codeinline comments should be used sparingly but can be effective forexplaining tricky or nonobvious parts of code they can also be useful ifyou think you may not remember a line of the code you are writing in thefuture or if you are collaborating with someone who you know may notbe familiar with all aspects of the codefor example if you dont use a lot of math in your python programsyou or your collaborators may not know that the following creates acomplex number so you may want to include an inline comment aboutthatz 25 3j create a complex numberinline comments can also be used to explain the reason behind doingsomething or some extra information as inx 8 initialize x with an arbitrary numbercomments that are made in line should be used only when necessaryand when they can provide helpful guidance for the person reading theprogramcommenting out code for testingin addition to using comments as a way to document code the hashmark can also be used to comment out code that you dont want toexecute while you are testing or debugging a program you are currentlycreating that is when you experience errors after implementing newlines of code you may want to comment a few of them out to see if youcan troubleshoot the precise issueusing the hash mark can also allow you to try alternatives while youredetermining how to set up your code for example you may be decidingbetween using a while loop or a for loop in a python game and cancomment out one or the other while testing and determining which onemay be bestguesspyimport randomnumber randomrandint1 25 number_of_guesses 0for i in range5 while number_of_guesses 5 printguess a number between 1 and 25 guess input guess intguess number_of_guesses number_of_guesses 1 if guess number printyour guess is too low if guess number printyour guess is too high if guess number breakif guess number printyou guessed the numberelse printyou did not guess the number the number was strnumberfigure classcodecommenting out code with the hash mark can allow you to try outdifferent programming methods as well as help you ﬁnd the source of anerror through systematically commenting out and running parts of aprogramconclusionusing comments within your python programs helps to make yourprograms more readable for humans including your future selfincluding appropriate comments that are relevant and useful can make iteasier for others to collaborate with you on programming projects andmake the value of your code more obviousfrom here you may want to read about pythons docstrings in pep257 to provide you with more resources to properly document yourpython projectsunderstanding data typesin python like in all programming languages data types are used toclassify one particular type of data this is important because the speciﬁcdata type you use will determine what values you can assign to it andwhat you can do to it including what operations you can perform on itin this tutorial we will go over the important data types native topython this is not an exhaustive investigation of data types but willhelp you become familiar with what options you have available to you inpythonbackgroundone way to think about data types is to consider the different types ofdata that we use in the real world an example of data in the real worldare numbers we may use whole numbers 0 1 2 integers 1 01 and irrational numbers for exampleusually in math we can combine numbers from different types andget some kind of an answer we may want to add 5 to for example5 πwe can either keep the equation as the answer to account for theirrational number or round to a number with a brief number ofdecimal places and then add the numbers together5 π 5 314 814but if we start to try to evaluate numbers with another data type suchas words things start to make less sense how would we solve for thefollowing equationsky 8for computers each data type can be thought of as being quitedifferent like words and numbers so we will have to be careful abouthow we use them to assign values and how we manipulate them throughoperationsnumbersany number you enter in python will be interpreted as a number youare not required to declare what kind of data type you are enteringpython will consider any number written without decimals as an integeras in 138 and any number written with decimals as a ﬂoat as in 1380integerslike in math integers in computer programming are whole numbers thatcan be positive negative or 0 1 0 1 an integer can also beknown as an int as with other programming languages you shouldnot use commas in numbers of four digits or more so when you write1000 in your program write it as 1000we can print out an integer in a simple way like thisprint25output25or we can declare a variable which in this case is essentially a symbolof the number we are using or manipulating like somy_int 25printmy_intoutput25we can do math with integers in python tooint_ans 116 68printint_ansoutput48integers can be used in many ways within python programs and asyou continue to learn more about the language you will have a lot ofopportunities to work with integers and understand more about this datatypefloatingpoint numbersa ﬂoatingpoint number or a ﬂoat is a real number meaning that it canbe either a rational or an irrational number because of this ﬂoatingpointnumbers can be numbers that can contain a fractional part such as 90or 11642 simply speaking for the purposes of thinking of a float ina python program it is a number that contains a decimal pointlike we did with the integer we can print out a ﬂoatingpoint numberin a simple way like thisprint173output173we can also declare a variable that stands in for a ﬂoat like somy_flt 173printmy_fltoutput173and just like with integers we can do math with ﬂoats in python tooflt_ans 5640 36524printflt_ansoutput92924with integers and ﬂoatingpoint numbers it is important to keep inmind that 3 30 as 3 refers to an integer while 30 refers to a ﬂoatbooleansthe boolean data type can be one of two values either true or falsebooleans are used to represent the truth values that are associated withthe logic branch of mathematics which informs algorithms in computersciencewhenever you see the data type boolean it will start with a capitalizedb because it is named for the mathematician george boole the values true and false will also always be with a capital t and f respectivelyas they are special values in pythonmany operations in math give us answers that evaluate to either trueor falsegreater than500 100 true1 5 falseless than200 400 true4 2 falseequal5 5 true500 400 falselike with numbers we can store a boolean value in a variablemy_bool 5 8we can then print the boolean value with a call to the printfunctionprintmy_boolsince 5 is not greater than 8 we will receive the following outputouputfalseas you write more programs in python you will become more familiarwith how booleans work and how different functions and operationsevaluating to either true or false can change the course of the programstringsa string is a sequence of one or more characters letters numberssymbols that can be either a constant or a variable strings exist withineither single quotes or double quotes in python so to create a stringenclose a sequence of characters in quotesthis is a string in single quotesthis is a string in double quotesyou can choose to use either single quotes or double quotes butwhichever you decide on you should be consistent within a programthe simple program hello world demonstrates how a string can beused in computer programming as the characters that make up thephrase hello world are a stringprinthello worldas with other data types we can store strings in variableshw hello worldand print out the string by calling the variableprinthwouputhello worldlike numbers there are many operations that we can perform onstrings within our programs in order to manipulate them to achieve theresults we are seeking strings are important for communicatinginformation to the user and for the user to communicate informationback to the programlistsa list is a mutable or changeable ordered sequence of elements eachelement or value that is inside of a list is called an item just as strings aredeﬁned as characters between quotes lists are deﬁned by having valuesbetween square brackets a list of integers looks like this3 2 1 0 1 2 3a list of ﬂoats looks like this314 923 11111 31212 105a list of stringsshark cuttlefish squid mantis shrimpif we deﬁne our string list as sea_creaturessea_creatures shark cuttlefish squid mantis shrimpwe can print them out by calling the variableprintsea_creaturesand we see that the output looks exactly like the list that we createdoutputshark cuttlefish squid mantis shrimplists are a very ﬂexible data type because they are mutable in that theycan have values added removed and changed there is a data type thatis similar to lists but that cant be changed and that is called a tupletuplesa tuple is used for grouping data it is an immutable or unchangeableordered sequence of elementstuples are very similar to lists but they use parentheses instead ofsquare brackets and because they are immutable their values can not bemodiﬁeda tuple looks like thisblue coral staghorn coral pillar coralwe can store a tuple in a variable and print it outcoral blue coral staghorn coral pillar coralprintcoralouputblue coral staghorn coral pillar corallike in the other data types python prints out the tuple just as we hadtyped it with parentheses containing a sequence of valuesdictionariesthe dictionary is pythons builtin mapping type this means thatdictionaries map keys to values and these keyvalue pairs are a usefulway to store data in python a dictionary is constructed with curly braceson either side typically used to hold data that are related such as the informationcontained in an id a dictionary looks like thisname sammy animal shark color blue location oceanyou will notice that in addition to the curly braces there are also colonsthroughout the dictionary the words to the left of the colons are thekeys keys can be made up of any immutable data type the keys in thedictionary above are name animal color locationthe words to the right of the colons are the values values can becomprised of any data type the values in the dictionary above are sammy shark blue oceanlike the other data types lets store the dictionary inside a variableand print it outsammy name sammy animal shark color blue location oceanprintsammyouputcolor blue animal shark name sammy location oceanif we want to isolate sammys color we can do so by calling sammycolor lets print that outprintsammycoloroutputblueas dictionaries offer keyvalue pairs for storing data they can beimportant elements in your python programconclusionat this point you should have a better understanding of some of themajor data types that are available for you to use in python each of thesedata types will become important as you develop programming projectsin the python languageyou can learn about each of the data types above in more detail byreading the following speciﬁc tutorials numbers booleans strings lists tuples dictionariesonce you have a solid grasp of data types available to you in pythonyou can learn how to convert data typesan introduction to working with stringsa string is a sequence of one or more characters letters numberssymbols that can be either a constant or a variable made up of unicodestrings are immutable sequences meaning they are unchangingbecause text is such a common form of data that we use in everydaylife the string data type is a very important building block ofprogrammingthis python tutorial will go over how to create and print strings howto concatenate and replicate strings and how to store strings in variablescreating and printing stringsstrings exist within either single quotes or double quotes in pythonso to create a string enclose a sequence of characters in one or the otherthis is a string in single quotesthis is a string in double quotesyou can choose to use either single quotes or double quotes butwhichever you decide on you should be consistent within a programwe can print out strings by simply calling the print functionprintlets print out this stringoutputlets print out this stringwith an understanding of how strings are formatted in python letstake a look at how we can work with and manipulate strings inprogramsstring concatenationconcatenation means joining strings together endtoend to create a newstring to concatenate strings we use the operator keep in mind thatwhen we work with numbers will be an operator for addition butwhen used with strings it is a joining operatorlets combine the strings sammy and shark together withconcatenation through a print statementprintsammy sharkoutputsammysharkif we would like a whitespace between the two strings we can simplyinclude the whitespace within a string like after the word sammyprintsammy sharkoutputsammy sharkbe sure not to use the operator between two different data types wecant concatenate strings and integers together for instance so if we tryto writeprintsammy 27we will receive the following erroroutputtypeerror cant convert int object to str implicitlyif we wanted to create the string sammy27 we could do so byputting the number 27 in quotes 27 so that it is no longer an integerbut is instead a string converting numbers to strings for concatenationcan be useful when dealing with zip codes or phone numbers forexample as we dont want to perform addition between a country codeand an area code but we do want them to stay togetherwhen we combine two or more strings through concatenation we arecreating a new string that we can use throughout our programstring replicationthere may be times when you need to use python to automate tasks andone way you may do this is through repeating a string several times youcan do so with the operator like the operator the operator has adifferent use when used with numbers where it is the operator formultiplication when used with one string and one integer is the stringreplication operator repeating a single string however many times youwould like through the integer you providelets print out sammy 9 times without typing out sammy 9 timeswith the operatorprintsammy 9outputsammysammysammysammysammysammysammysammysammywith string replication we can repeat the single string value theamount of times equivalent to the integer valuestoring strings in variablesvariables are symbols that you can use to store data in a program youcan think of them as an empty box that you ﬁll with some data or valuestrings are data so we can use them to ﬁll up a variable declaringstrings as variables can make it easier for us to work with stringsthroughout our python programsto store a string inside a variable we simply need to assign a variableto a string in this case lets declare my_str as our variablemy_str sammy likes declaring stringsnow that we have the variable my_str set to that particular string wecan print the variable like soprintmy_strand we will receive the following outputoutputsammy likes declaring stringsby using variables to stand in for strings we do not have to retype astring each time we want to use it making it simpler for us to work withand manipulate strings within our programsconclusionthis tutorial went over the basics of working with the string data type inthe python 3 programming language creating and printing stringsconcatenating and replicating strings and storing strings in variables willprovide you with the fundamentals to use strings in your python 3programscontinue learning more about strings by taking a look at the followingtutorials how to format text in python 3 an introduction to stringfunctions how to index and slice strings how to use stringformattershow to format textas strings are often made up of written text there are many instanceswhen we may want to have greater control over how strings look tomake them more readable for humans through punctuation line breaksand indentationin this tutorial well go over some of the ways we can work withpython strings to make sure that all output text is formatted correctlystring literalslets ﬁrst differentiate between a string literal and a string value a stringliteral is what we see in the source code of a computer programincluding the quotation marks a string value is what we see when wecall the print function and run the programin the hello world program the string literal is hello world while the string value is hello world without thequotation marks the string value is what we see as the output in aterminal window when we run a python programbut some string values may need to include quotation marks likewhen we are quoting a source because string literals and string valuesare not equivalent it is often necessary to add additional formatting tostring literals to ensure that string values are displayed the way in whichwe intendquotes and apostrophesbecause we can use single quotes or double quotes within python it issimple to embed quotes within a string by using double quotes within astring enclosed by single quotessammy says helloor to use a possessive apostrophe in a string enclosed by doublequotessammys balloon is redin the way we combine single and double quotes we can control thedisplay of quotation marks and apostrophes within our stringsmultiple linesprinting strings on multiple lines can make text more readable tohumans with multiple lines strings can be grouped into clean andorderly text formatted as a letter or used to maintain the linebreaks of apoem or song lyricsto create strings that span multiple lines triple single quotes ortriple double quotes are used to enclose the stringthis string is onmultiple lineswithin three singlequotes on either sidethis string is onmultiple lineswithin three doublequotes on either sidewith triple quotes you can print strings on multiple lines to make textespecially lengthy text easier to readescape charactersanother way to format strings is to use an escape character escapecharacters all start with the backslash key combined with anothercharacter within a string to format the given string a certain wayhere is a list of several of the common escape charactersescape characterhow it formatsnew line in a multiline stringbackslashapostrophe or single quotedouble quote line break tab horizontal indentationlets use an escape character to add the quotation marks to theexample on quotation marks above but this time well use doublequotesprintsammy says hellooutputsammy says helloby using the escape character we are able to use double quotes toenclose a string that includes text quoted between double quotessimilarly we can use the escape character to add an apostrophe in astring that is enclosed in single quotesprintsammys balloon is redoutputsammys balloon is redbecause we are now using the escape character we can have anapostrophe within a string that uses single quoteswhen we use triple quotes like we did above we will see that there is aspace at the top and bottom when we print the string we can removethose spaces by using the escape key at the top of our string and againat the end of the string while keeping the text within the program veryreadablethis multiline stringhas no space at thetop or the bottomwhen it printssimilarly we can use the escape character to break lines withouthitting the enter or return keyprintthis stringspans multiplelinesoutputthis stringspans multiplelineswe can combine escape characters too lets print a multiline stringand include tab spacing for an itemized list for exampleprint1 shark2 shrimp10 squidoutput1 shark2 shrimp10 squidthe horizontal indentation provided with the escape characterensures alignment within the second column in the example abovemaking the output extremely readable for humansthough the escape character works well for short string literals it isimportant to ensure that source code is also readable to humans in thecase of lengthy strings the triple quote approach to multiline strings isoften preferableescape characters are used to add additional formatting to strings thatmay be difﬁcult or impossible to achieve without escape characters howwould you construct the string sammy says the balloons color is redraw stringswhat if we dont want special formatting within our strings forexample we may need to compare or evaluate strings of computer codethat use the backslash on purpose so we wont want python to use it asan escape charactera raw string tells python to ignore all formatting within a stringincluding escape characterswe create a raw string by putting an r in front of the string rightbefore the beginning quotation markprintrsammy saysthe balloons color is redoutputsammy saysthe balloons color is redby constructing a raw string by using r in front of a given string wecan retain backslashes and other characters that are used as escapecharactersconclusionthis tutorial went over several ways to format text in python 3 throughworking with strings by using techniques such as escape characters orraw strings we are able to ensure that the strings of our program arerendered correctly onscreen so that the end user is able to easily read allof the output textcontinue learning more about strings by taking a look at the followingtutorials an introduction to string functions how to index and slicestrings how to use string formattersan introduction to string functionspython has several builtin functions associated with the string data typethese functions let us easily modify and manipulate strings we canthink of functions as being actions that we perform on elements of ourcode builtin functions are those that are deﬁned in the pythonprogramming language and are readily available for us to usein this tutorial well go over several different functions that we can useto work with strings in python 3making strings upper and lower casethe functions strupper and strlower will return a stringwith all the letters of an original string converted to upper or lowercaseletters because strings are immutable data types the returned string willbe a new string any characters in the string that are not letters will notbe changedlets convert the string sammy shark to be all upper casess sammy sharkprintssupperouputsammy sharknow lets convert the string to be all lower caseprintsslowerouputsammy sharkthe strupper and strlower functions make it easier toevaluate and compare strings by making case consistent throughoutthat way if a user writes their name all lower case we can still determinewhether their name is in our database by checking it against an all uppercase version for exampleboolean methodspython has some string methods that will evaluate to a boolean valuethese methods are useful when we are creating forms for users to ﬁll infor example if we are asking for a post code we will only want to accepta numeric string but when we are asking for a name we will only wantto accept an alphabetic stringthere are a number of string methods that will return boolean valuesmethodtrue ifstrisalnumstring consists of only alphanumeric charactersno symbolsstrisalphastring consists of only alphabetic characters nosymbolsstrislowerstrings alphabetic characters are all lower casestrisnumericstring consists of only numeric charactersstrisspacestring consists of only whitespace charactersstristitlestring is in title casestrisupperstrings alphabetic characters are all upper caselets look at a couple of these in actionnumber 5letters abcdefprintnumberisnumericprintlettersisnumericoutputtruefalseusing the strisnumeric method on the string 5 returns a valueof true while using the same method on the string abcdef returns avalue of falsesimilarly we can query whether a strings alphabetic characters are intitle case upper case or lower case lets create a few stringsmovie 2001 a sammy odysseybook a thousand splendid sharkspoem sammy lived in a pretty how townnow lets try the boolean methods that check for caseprintmovieislowerprintmovieisupperprintbookistitleprintbookisupperprintpoemistitleprintpoemislowernow we can run these small programs and see the outputoutput of movie stringfalsetrueoutput of book stringtruefalseoutput of poem stringfalsetruechecking whether characters are lower case upper case or title casecan help us to sort our data appropriately as well as provide us with theopportunity to standardize data we collect by checking and thenmodifying strings as neededboolean string methods are useful when we want to check whethersomething a user enters ﬁts within given parametersdetermining string lengththe string method len returns the number of characters in a stringthis method is useful for when you need to enforce minimum ormaximum password lengths for example or to truncate larger strings tobe within certain limits for use as abbreviationsto demonstrate this method well ﬁnd the length of a sentencelongstringopen_source sammy contributes to open sourceprintlenopen_sourceoutput33we set the variable open_source equal to the string sammy contributes to open source and then we passed that variableto the len method with lenopen_source we then passed themethod into the print method so that we could see the output on thescreen from our programkeep in mind that any character bound by single or double quotationmarks including letters numbers whitespace characters and symbols will be counted by the len methodjoin split and replace methodsthe strjoin strsplit and strreplace methods are afew additional ways to manipulate strings in pythonthe strjoin method will concatenate two strings but in a waythat passes one string through anotherlets create a stringballoon sammy has a balloonnow lets use the strjoin method to add whitespace to thatstring which we can do like so joinballoonif we print this outprint joinballoonwe will see that in the new string that is returned there is added spacethroughout the ﬁrst stringouputs a m m y h a s a b a l l o o n we can also use the strjoin method to return a string that is areversal from the original stringprintjoinreversedballoonouputnoollab a sah ymmaswe did not want to add any part of another string to the ﬁrst string sowe kept the quotation marks touching with no space in betweenthe strjoin method is also useful to combine a list of strings intoa new single stringlets create a commaseparated string from a list of stringsprintjoinsharks crustaceans planktonouputsharkscrustaceansplanktonif we want to add a comma and a space between string values in ournew string we can simply rewrite our expression with a whitespace afterthe comma joinsharks crustaceans planktonjust as we can join strings together we can also split strings up to dothis we will use the strsplit methodprintballoonsplitouputsammy has a balloonthe strsplit method returns a list of strings that are separatedby whitespace if no other parameter is givenwe can also use strsplit to remove certain parts of an originalstring for example lets remove the letter a from the stringprintballoonsplitaouputs mmy h s b lloonnow the letter a has been removed and the strings have beenseparated where each instance of the letter a had been with whitespaceretainedthe strreplace method can take an original string and return anupdated string with some replacementlets say that the balloon that sammy had is lost since sammy nolonger has this balloon we will change the substring has from theoriginal string balloon to had in a new stringprintballoonreplacehashadwithin the parentheses the ﬁrst substring is what we want to bereplaced and the second substring is what we are replacing that ﬁrstsubstring with our output will look like thisouputsammy had a balloonusing the string methods strjoin strsplit and strreplace will provide you with greater control to manipulatestrings in pythonconclusionthis tutorial went through some of the common builtin methods for thestring data type that you can use to work with and manipulate strings inyour python programsyou can learn more about other data types in understanding datatypes read more about strings in an introduction to working withstrings and learn about changing the way strings look in how toformat text in python 3how to index and slice stringsthe python string data type is a sequence made up of one or moreindividual characters that could consist of letters numbers whitespacecharacters or symbols because a string is a sequence it can be accessedin the same ways that other sequencebased data types are throughindexing and slicingthis tutorial will guide you through accessing strings throughindexing slicing them through their character sequences and go oversome counting and character location methodshow strings are indexedlike the list data type that has items that correspond to an index numbereach of a strings characters also correspond to an index number startingwith the index number 0for the string sammy shark the index breakdown looks like thissammyshark01234567891011as you can see the ﬁrst s starts at index 0 and the string ends at index11 with the symbolwe also notice that the whitespace character between sammy and shark also corresponds with its own index number in this case theindex number associated with the whitespace is 5the exclamation point also has an index number associated with itany other symbol or punctuation mark such as is also acharacter and would be associated with its own index numberthe fact that each character in a python string has a correspondingindex number allows us to access and manipulate strings in the sameways we can with other sequential data typesaccessing characters by positive index numberby referencing index numbers we can isolate one of the characters in astring we do this by putting the index numbers in square brackets letsdeclare a string print it and call the index number in square bracketsss sammy sharkprintss4outputywhen we refer to a particular index number of a string python returnsthe character that is in that position since the letter y is at index number4 of the string ss sammy shark when we print ss4 wereceive y as the outputindex numbers allow us to access speciﬁc characters within a stringaccessing characters by negative index numberif we have a long string and we want to pinpoint an item towards theend we can also count backwards from the end of the string starting atthe index number 1for the same string sammy shark the negative index breakdownlooks like thissammyshark121110987654321by using negative index numbers we can print out the character r byreferring to its position at the 3 index like soprintss3outputrusing negative index numbers can be advantageous for isolating asingle character towards the end of a long stringslicing stringswe can also call out a range of characters from the string say we wouldlike to just print the word shark we can do so by creating a slice whichis a sequence of characters within an original string with slices we cancall multiple character values by creating a range of index numbersseparated by a colon xyprintss611outputsharkwhen constructing a slice as in 611 the ﬁrst index number iswhere the slice starts inclusive and the second index number is wherethe slice ends exclusive which is why in our example above the rangehas to be the index number that would occur just after the string endswhen slicing strings we are creating a substring which is essentially astring that exists within another string when we call ss611 we arecalling the substring shark that exists within the string sammy sharkif we want to include either end of a string we can omit one of thenumbers in the stringnn syntax for example if we want to printthe ﬁrst word of string ss sammy we can do so by typingprintss5outputsammywe did this by omitting the index number before the colon in the slicesyntax and only including the index number after the colon which refersto the end of the substringto print a substring that starts in the middle of a string and prints tothe end we can do so by including only the index number before thecolon like soprintss7outputharkby including only the index number before the colon and leaving thesecond index number out of the syntax the substring will go from thecharacter of the index number called to the end of the stringyou can also use negative index numbers to slice a string as we wentthrough before negative index numbers of a string start at 1 and countdown from there until we reach the beginning of the string when usingnegative index numbers well start with the lower number ﬁrst as itoccurs earlier in the stringlets use two negative index numbers to slice the string ssprintss41outputarkthe substring ark is printed from the string sammy sharkbecause the character a occurs at the 4 index number position and thecharacter k occurs just before the 1 index number positionspecifying stride while slicing stringsstring slicing can accept a third parameter in addition to two indexnumbers the third parameter speciﬁes the stride which refers to howmany characters to move forward after the ﬁrst character is retrievedfrom the string so far we have omitted the stride parameter and pythondefaults to the stride of 1 so that every character between two indexnumbers is retrievedlets look again at the example above that prints out the substringsharkprintss611outputsharkwe can obtain the same results by including a third parameter with astride of 1printss6111outputsharkso a stride of 1 will take in every character between two indexnumbers of a slice if we omit the stride parameter then python willdefault with 1if instead we increase the stride we will see that characters areskippedprintss0122outputsmysakspecifying the stride of 2 as the last parameter in the python syntax ss0122 skips every other character lets look at the characters thatare printed in redsammy sharknote that the whitespace character at index number 5 is also skippedwith a stride of 2 speciﬁedif we use a larger number for our stride parameter we will have asigniﬁcantly smaller substringprintss0124outputsyaspecifying the stride of 4 as the last parameter in the python syntax ss0124 prints only every fourth character again lets look at thecharacters that are printed in redsammy sharkin this example the whitespace character is skipped as wellsince we are printing the whole string we can omit the two indexnumbers and keep the two colons within the syntax to achieve the sameresultprintss4outputsyaomitting the two index numbers and retaining colons will keep thewhole string within range while adding a ﬁnal parameter for stride willspecify the number of characters to skipadditionally you can indicate a negative numeric value for the stridewhich we can use to print the original string in reverse order if we set thestride to 1printss1outputkrahs ymmasthe two colons without speciﬁed parameter will include all thecharacters from the original string a stride of 1 will include everycharacter without skipping and negating that stride will reverse theorder of the characterslets do this again but with a stride of 2printss2outputrh main this example ss2 we are dealing with the entirety of theoriginal string as no index numbers are included in the parameters andreversing the string through the negative stride additionally by havinga stride of 2 we are skipping every other letter of the reversed stringkrahswhitespaceymmasthe whitespace character is printed in this exampleby specifying the third parameter of the python slice syntax you areindicating the stride of the substring that you are pulling from theoriginal stringcounting methodswhile we are thinking about the relevant index numbers that correspondto characters within strings it is worth going through some of themethods that count strings or return index numbers this can be usefulfor limiting the number of characters we would like to accept within auserinput form or comparing strings like other sequential data typesstrings can be counted through several methodswell ﬁrst look at the len method which can get the length of anydata type that is a sequence whether ordered or unordered includingstrings lists tuples and dictionarieslets print the length of the string ssprintlenssoutput12the length of the string sammy shark is 12 characters longincluding the whitespace character and the exclamation point symbolinstead of using a variable we can also pass a string right into the len methodprintlenlets print the length of this stringoutput38the len method counts the total number of characters within astringif we want to count the number of times either one particular characteror a sequence of characters shows up in a string we can do so with the strcount method lets work with our string ss sammy shark and count the number of times the character a appearsprintsscountaoutput2we can search for another characterprintsscountsoutput0though the letter s is in the string it is important to keep in mindthat each character is casesensitive if we want to search for all the lettersin a string regardless of case we can use the strlower method toconvert the string to all lowercase ﬁrst you can read more about thismethod in an introduction to string methods in python 3lets try strcount with a sequence of characterslikes sammy likes to swim in the ocean likes to spin up servers and likes to smileprintlikescountlikesoutput3in the string likes the character sequence that is equivalent to likesoccurs 3 times in the original stringwe can also ﬁnd at what position a character or character sequenceoccurs in a string we can do this with the strfind method and itwill return the position of the character based on index numberwe can check to see where the ﬁrst m occurs in the string ssprintssfindmouput2the ﬁrst character m occurs at the index position of 2 in the stringsammy shark we can review the index number positions of the string ss abovelets check to see where the ﬁrst likes character sequence occurs inthe string likesprintlikesfindlikesouput6the ﬁrst instance of the character sequence likes begins at indexnumber position 6 which is where the character l of the sequence likesis positionedwhat if we want to see where the second sequence of likes beginswe can do that by passing a second parameter to the strfindmethod that will start at a particular index number so instead of startingat the beginning of the string lets start after the index number 9printlikesfindlikes 9output34in this second example that begins at the index number of 9 the ﬁrstoccurrence of the character sequence likes begins at index number 34additionally we can specify an end to the range as a third parameterlike slicing we can do so by counting backwards using a negative indexnumberprintlikesfindlikes 40 6output64this last example searches for the position of the sequence likesbetween the index numbers of 40 and 6 since the ﬁnal parameterentered is a negative number it will be counting from the end of theoriginal stringthe string methods of len strcount and strfind canbe used to determine length counts of characters or character sequencesand index positions of characters or character sequences within stringsconclusionbeing able to call speciﬁc index numbers of strings or a particular slice ofa string gives us greater ﬂexibility when working with this data typebecause strings like lists and tuples are a sequencebased data type itcan be accessed through indexing and slicingyou can read more about formatting strings and string methods tocontinue learning about stringshow to convert data typesin python data types are used to classify one particular type of datadetermining the values that you can assign to the type and the operationsyou can perform on it when programming there are times we need toconvert values between types in order to manipulate values in a differentway for example we may need to concatenate numeric values withstrings or represent decimal places in numbers that were initialized asinteger valuesthis tutorial will guide you through converting numbers stringstuples and lists as well as provide examples to help familiarize yourselfwith different use casesconverting number typesin python there are two number data types integers and ﬂoatingpointnumbers or ﬂoats sometimes you are working on someone elses codeand will need to convert an integer to a ﬂoat or vice versa or you mayﬁnd that you have been using an integer when what you really need is aﬂoat python has builtin methods to allow you to easily convert integersto ﬂoats and ﬂoats to integersconverting integers to floatspythons method float will convert integers to ﬂoats to use thisfunction add an integer inside of the parenthesesfloat57in this case 57 will be converted to 570you can also use this with a variable lets declare f as equal to 57and then print out the new ﬂoatf 57printfloatfoutput570by using the float function we can convert integers to ﬂoatsconverting floats to integerspython also has a builtin function to convert ﬂoats to integers intthe int function works similarly to the float function you canadd a ﬂoatingpoint number inside of the parentheses to convert it to anintegerint3908in this case 3908 will be converted to 390you can also use this with variables lets declare b as equal to 1250and c as equal to 3908 then print out the new ﬂoatsb 1250c 3908printintbprintintcoutput125390when converting ﬂoats to integers with the int function pythoncuts off the decimal and remaining numbers of a ﬂoat to create an integereven though we may want to round 3908 up to 391 python will not dothis through the int functionnumbers converted through divisionin python 3 relevant quotients are converted from integers to ﬂoatswhen doing division though they are not in python 2 that is when youdivide 5 by 2 in python 3 you will get a ﬂoat for an answer 25a 5 2printaoutput25in python 2 since you were dealing with two integers you wouldreceive an integer back as your answer instead 5 2 2 readpython 2 vs python 3 practical considerations for more informationabout the differences between python 2 and python 3converting with stringsa string is a sequence of one or more characters letters numberssymbols strings are a common form of data in computer programs andwe may need to convert strings to numbers or numbers to strings fairlyoften especially when we are taking in usergenerated dataconverting numbers to stringswe can convert numbers to strings through using the str methodwell pass either a number or a variable into the parentheses of themethod and then that numeric value will be converted into a stringvaluelets ﬁrst look at converting integers to convert the integer 12 to astring value you can pass 12 into the str methodstr12when running str12 in the python interactive shell with the python command in a terminal window youll receive the followingoutputoutput12the quotes around the number 12 signify that the number is no longeran integer but is now a string valuewith variables we can begin to see how practical it can be to convertintegers to strings lets say we want to keep track of a users dailyprogramming progress and are inputting how many lines of code theywrite at a time we would like to show this feedback to the user and willbe printing out string and integer values at the same timeuser sammylines 50printcongratulations user you just wrote lines lines of codewhen we run this code we receive the following erroroutputtypeerror cant convert int object to str implicitlywere not able to concatenate strings and integers in python so wellhave to convert the variable lines to be a string valueuser sammylines 50printcongratulations user you just wrote strlines lines of codenow when we run the code we receive the following output thatcongratulates our user on their progressoutputcongratulations sammy you just wrote 50 lines of codeif we are looking to convert a ﬂoat to a string rather than an integer toa string we follow the same steps and format when we pass a ﬂoat intothe str method a string value of the ﬂoat will be returned we canuse either the ﬂoat value itself or a variableprintstr421034f 552453printstrfoutput421034552453we can test to make sure its right by concatenating with a stringf 552453printsammy has strf pointsoutputsammy has 552453 pointswe can be sure our ﬂoat was properly converted to a string because theconcatenation was performed without errorconverting strings to numbersstrings can be converted to numbers by using the int and floatmethodsif your string does not have decimal places youll most likely want toconvert it to an integer by using the int methodlets use the example of the user sammy keeping track of lines of codewritten each day we may want to manipulate those values with math toprovide more interesting feedback for the user but those values arecurrently stored in stringslines_yesterday 50lines_today 108lines_more lines_today lines_yesterdayprintlines_moreoutputtypeerror unsupported operand types for str and strbecause the two numeric values were stored in strings we received anerror the operand for subtraction is not a valid operand for two stringvalueslets modify the code to include the int method that will convertthe strings to integers and allow us to do math with values these thatwere originally stringslines_yesterday 50lines_today 108lines_more intlines_today intlines_yesterdayprintlines_moreoutput58the variable lines_more is automatically an integer and it is equal tothe numeric value of 58 in this examplewe can also convert the numbers in the example above to ﬂoat valuesby using the float method in place of the int method instead ofreceiving the output of 58 well receive the output of 580 a ﬂoatthe user sammy is earning points in decimal valuestotal_points 552453new_points 4530new_total_points total_points new_pointsprintnew_total_pointsoutput5524534530in this case using the operand with two strings is a valid operationbut it is concatenating two strings rather than adding two numeric valuestogether so our output looks unusual since it just places the two valuesnext to each otherwell want to convert these strings to ﬂoats prior to performing anymath with the float methodtotal_points 552453new_points 4530new_total_points floattotal_points floatnew_pointsprintnew_total_pointsoutput556983now that we have converted the two strings to ﬂoats we receive theanticipated result that adds 4530 to 552453if we try to convert a string value with decimal places to an integerwell receive an errorf 5423printintfoutputvalueerror invalid literal for int with base 10 5423if we pass a decimal value in a string to the int method wellreceive an error because it will not convert to an integerconverting strings to numbers enables us to quickly modify the datatype we are working with so that we can perform operations on numericvalues that were originally cast as stringsconverting to tuples and listsyou can use the methods list and tuple to convert the valuespassed to them into the list and tuple data type respectively in python a list is a mutable ordered sequence of elements that is contained withinsquare brackets a tuple is an immutable ordered sequence ofelements contained within parentheses converting to tupleslets start with converting a list to a tuple converting a list to a tuplebecause its an immutable data type can allow substantial optimizationto the programs that we create when we use the method tuple it willreturn the tuple version of the value passed to itprinttuplepull request open source repository branchoutputpull request open source repository branchwe see that a tuple is printed out in the output as the items are nowcontained within parentheses rather than square bracketslets use tuple with a variable that represents a listsea_creatures shark cuttlefish squid mantis shrimpprinttuplesea_creaturesoutputshark cuttlefish squid mantis shrimpagain we see that the list value is changed to a tuple value indicatedby the parentheses we can convert any iterable type to a tuple includingstringsprinttuplesammyoutputs a m m ybecause we can iterate through strings we can convert them to tupleswith the tuple method with data types that are not iterablehowever like integers and ﬂoats we will receive a type errorprinttuple5000outputtypeerror int object is not iterablewhile it is possible to convert the integer to a string and then convertto a tuple as in tuplestr5000 it is best to opt for readable codeover complicated conversionsconverting to listsconverting values especially tuples to lists can be useful when you needto have a mutable version of that valuewell use the list method to convert the following tuple to a listbecause the syntax for creating a list uses parentheses be sure to includethe parentheses of the list method and in this case the printmethod as wellprintlistblue coral staghorn coral pillar coraloutputblue coral staghorn coral pillar coralthe square brackets signal that a list has been returned from theoriginal tuple value that was passed through the list methodto make the code more readable we can remove one of the pairs ofparentheses by using a variablecoral blue coral staghorn coral pillar corallistcoralif we print listcoral we would receive the same output as abovejust like tuples strings can be converted to listsprintlistsharkoutputs h a r khere the string shark was converted to a list providing a mutableversion of the original valueconclusionthis python tutorial demonstrated how to convert several of theimportant native data types to other data types primarily through builtin methods being able to convert data types in python provides youwith extra ﬂexibility when writing your programshow to use variablesvariables are an important programming concept to master they areessentially symbols that stand in for a value youre using in a programthis tutorial will cover some variable basics and how to best use themwithin the python 3 programs you createunderstanding variablesin technical terms a variable is assigning a storage location to a valuethat is tied to a symbolic name or identiﬁer the variable name is used toreference that stored value within a computer programyou can think of a variable as a label that has a name on it which youtie onto a value variables in pythonlets say we have an integer 103204934813 and we want to store itin a variable rather than continuously retype the long number over andover again instead lets use something thats easy to remember like thevariable my_intmy_int 103204934813if we think of it like a label that is tied to the value it will looksomething like this python variable examplethe label has the variable name my_int written on it and is tied to theinteger value 103204934813the phrase my_int 103204934813 is an assignment statementwhich consists of a few partsthe variable name my_intthe assignment operator also known as the equal sign the value that is being tied to the variable name 103204934813together those three parts make up the statement that sets the variablemy_int equal to the value of the integer 103204934813as soon as we set a variable equal to a value we initialize or createthat variable once we have done that we are set to use the variableinstead of the value in python variables do not need explicit declarationprior to use like some programming languages you can start using thevariable right awayas soon as we set my_int equal to the value of 103204934813 wecan use my_int in the place of the integer so lets print it outprintmy_intoutput103204934813using variables we can quickly and easily do math with my_int 1040 lets subtract the integer value 813printmy_int 813output103204934000in this example python does the math for us subtracting 813 from thevariable my_int to return the sum 103204934000speaking of math variables can be set equal to the result of a mathequation lets add two numbers together and store the value of the suminto the variable xx 76 145the above example may look like something youre already familiarwith algebra in algebra letters and other symbols are used to representnumbers and quantities within formulas and equations just like howvariables are symbolic names that represent the value of a data type forcorrect python syntax youll need to make sure that your variable is onthe left side of any equationslets go ahead and print xprintxoutput221python returned the value 221 because the variable x was set equal tothe sum of 76 and 145variables can represent any data type not just integersmy_string hello worldmy_flt 4506my_bool 5 9 a boolean value will return either true or falsemy_list item_1 item_2 item_3 item_4my_tuple one two threemy_dict letter g number seven symbol if you print any of the above variables python will return what thatvariable is equivalent to for example lets work with the assignmentstatement for the list data type abovemy_list item_1 item_2 item_3 item_4printmy_listoutputitem_1 item_2 item_3 item_4we passed the list value of item_1 item_2 item_3 item_4 to the variable my_list and then used the printfunction to print out that value by calling my_listvariables work by carving out a little area of memory within yourcomputer which accepts speciﬁed values that are then associated withthat spacenaming variables rules and stylethe naming of variables is quite ﬂexible but there are some rules youneed to keep in mindvariable names must only be one word as in no spacesvariable names must be made up of only letters numbers andunderscore _variable names can not begin with a numberfollowing the rules above lets look at both valid and invalid variablenamesvalidinvalidwhy invalidmy_intmyinthyphens are not permittedint44intcannot begin with a numbermy_intmy_intcannot use symbols other than _another_intanother intcannot be more than one wordsomething else to keep in mind when naming variables is that theyare casesensitive meaning that my_int my_int my_int and my_intare all completely different variables you should avoid using similarvariable names within a program to ensure that both you and yourcurrent and future collaborators can keep your variables straightfinally some notes about style conventionally speaking whennaming variables it is customary to begin them with a lowercase letterand to use underscores when separating words beginning with anuppercase letter is not invalid and some people may prefer camelcaseor mixed upper and lowercase letters when writing their variables butthese are less conventional choicesconventionalstyleunconventionalstylewhy unconventionalmy_intmyintcamelcase not conventionalint4int4uppercase ﬁrst letter notconventionalmy_ﬁrst_stringmyfirststringcamelcase not conventionalthe most important style choice you can make is to be consistent ifyou begin working on an existing project that has been using camelcasefor its variable names then it is best to continue using the existing stylepep 8 is the ofﬁcial python code style guide and it addresses many ofthe stylistic questions you may have about python in general readabilityand consistency are favored over other stylistic concernsreassigning variablesas the word variable implies python variables can be readily changedthis means that you can connect a different value with a previouslyassigned variable very easily through simple reassignmentbeing able to reassign is useful because throughout the course of aprogram you may need to accept usergenerated values into alreadyinitialized variables or may have to change the assignment to somethingyou previously deﬁnedknowing that you can readily and easily reassign a variable can also beuseful in situations where you may be working on a large program thatwas begun by someone else and you are not clear yet on what hasalready been deﬁnedlets assign x ﬁrst as an integer and then reassign it as a stringassign x to be an integerx 76printxreassign x to be a stringx sammyprintxoutput76sammythe example above shows that we can ﬁrst assign the variable x andassign it with the value of an integer and then reassign the variable xassigning it this time with the value of a stringif we rewrote the program this wayx 76x sammyprintxwe would only receive the second assigned value as the output sincethat was the most recent assignmentoutputsammyreassigning variables can be useful in some cases but you will want tobe aware of the readability of your code and work to make your programas clear as possiblemultiple assignmentwith python you can assign one single value to several variables at thesame time this lets you initialize several variables at once which youcan reassign later in the program yourself or through user inputthrough multiple assignment you can set the variables x y and z tothe value of the integer 0x y z 0printxprintyprintzoutput000in this example all three of the variables x y and z are assigned tothe same memory location they are each equal to the value of 0python also allows you to assign several values to several variableswithin the same line each of these values can be of a different data typej k l shark 205 15printjprintkprintloutputshark20515in the example above the variable j was assigned to the string shark the variable k was assigned to the ﬂoat 205 and the variable l was assigned to the integer 15this approach to assigning multiple variables to multiple values in oneline can keep your lines of code down but make sure you are notcompromising readability for fewer lines of codeglobal and local variableswhen using variables within a program it is important to keep variablescope in mind a variables scope refers to the particular places it isaccessible within the code of a given program this is to say that not allvariables are accessible from all parts of a given program somevariables will be global and some will be localglobal variables exist outside of functions local variables exist withinfunctionslets take a look at global and local variables in actioncreate a global variable outside of a functionglb_var globaldefine a functiondef var_function lcl_var local create a local variable inside function printlcl_varcall function to print local variablevar_functionprint global variable outside functionprintglb_varoutputlocalglobalthe above program assigns the global variable glb_var outside ofany function then deﬁnes the function var_function inside of thefunction a local variable called lcl_var is assigned and then printedout the program ends by calling the var_function and thenprinting the glb_varbecause glb_var is a global variable we can refer to it in var_function lets modify the small program above to do thatglb_var globaldef var_function lcl_var local printlcl_var printglb_var print glb_var within functionvar_functionprintglb_varoutputlocalglobalglobalwe now have the global variable glb_var printed out twice becauseit is printed both by the function and outside of the functionwhat if we try to call the local variable outside of the functionglb_var globaldef var_function lcl_var local printlcl_varprintlcl_varoutputnameerror name lcl_var is not definedwe can not use a local variable outside of the function it is assigned inif we try to do so well receive a nameerror in returnlets look at another example where we use the same variable namefor a global variable and a local variablenum1 5 global variabledef my_function num1 10 use the same variable name num1 num2 7 assign local variable printnum1 print local variable num1 printnum2 print local variable num2call my_functionmy_functionprint global variable num1printnum1output1075because the local variable of num1 is assigned locally within a functionwhen we call that function we see num1 as equal to the local value of 10when we print out the global value of num1 after calling my_function we see that the global variable num1 is still equal tothe value of 5it is possible to assign global variables within a function by usingpythons global statementdef new_shark assign variable as global global shark shark sammycall new_shark functionnew_sharkprint global variable sharkprintsharkeven though the variable shark was assigned locally within the new_shark function it is accessible outside of the function because ofthe global statement used before the assignment of the variable withinthe function due to that global statement when we call printshark outside of the function we dont receive an errorthough you can assign a global variable within a function you likelywill not need to do this often and should err on the side of readablecodesomething else to keep in mind is that if you reference a variablewithin a function without also assigning it a value that variable isimplicitly global in order to have a local variable you must assign avalue to it within the body of the functionwhen working with variables it is important to decide whether it ismore appropriate to use a global or local variable usually it is best tokeep variables local but when you are using the same variablethroughout several functions you may want to initialize a globalvariable if you are working with the variable only within one function orone class youll probably want to use a local variable insteadconclusionthis tutorial went through some of the common use cases of variableswithin python 3 variables are an important building block ofprogramming serving as symbols that stand in for the value of a datatype you are using in a programhow to use string formatterspythons strformat method of the string class allows you to dovariable substitutions and value formatting this lets you concatenateelements together within a string through positional formattingthis tutorial will guide you through some of the common uses offormatters in python which can help make your code and program morereadable and user friendlyusing formattersformatters work by putting in one or more replacement ﬁelds orplaceholders deﬁned by a pair of curly braces into a string andcalling the strformat method youll pass into the method thevalue you want to concatenate with the string this value will be passedthrough in the same place that your placeholder is positioned when yourun the programlets print out a string that uses a formatterprintsammy has balloonsformat5outputsammy has 5 balloonsin the example above we constructed a string with a pair of curlybraces as a placeholdersammy has balloonswe then added the strformat method and passed the value ofthe integer 5 to that method this places the value of 5 into the stringwhere the curly braces weresammy has 5 balloonswe can also assign a variable to be equal to the value of a string thathas formatter placeholdersopen_string sammy loves printopen_stringformatopen sourceoutputsammy loves open sourcein this second example we concatenated the string open sourcewith the larger string replacing the curly braces in the original stringformatters in python allow you to use curly braces as placeholders forvalues that youll pass through with the strformat methodusing formatters with multiple placeholdersyou can use multiple pairs of curly braces when using formatters if wedlike to add another variable substitution to the sentence above we can doso by adding a second pair of curly braces and passing a second valueinto the methodnew_open_string sammy loves 2 placeholdersprintnew_open_stringformatopensource software pass 2 strings into method separated by a commaoutputsammy loves opensource softwareto add another substitution we added a second pair of curly bracesinto the original string then we passed two strings into the strformat method separating them by a commafollowing the same syntax we can add additional substitutionssammy_string sammy loves and has 4 placeholdersprintsammy_stringformatopensource software 5 balloons pass 4 strings into methodoutputsammy loves opensource software and has 5 balloonsin sammy_string we added 4 pairs of curly braces as placeholders forvariable substitution we then passed 4 values into the strformatmethod mixing string and integer data types each of these values areseparated by a commareordering formatters with positional and keyword argumentswhen we leave curly braces empty without any parameters python willreplace the values passed through the strformat method in orderas we have seen so far a formatter construction with two empty curlybraces with two values passed through will look like thisprintsammy the has a pet formatshark pilot fishoutputsammy the shark has a pet pilot fishthe ﬁrst pair of curly braces is substituted with the string value of shark and the second pair is substituted with the string value of pilot fishthe values that exist within the method look like thisshark pilot fishthey are essentially the tuple data type and each individual valuecontained in the tuple can be called by its index number which startswith the index number 0we can pass these index numbers into the curly braces that serve as theplaceholders in the original stringprintsammy the 0 has a pet 1formatshark pilot fishin the above example the output will be what we get without passingindex numbers into the braces as we are calling the values in the tuple inorderoutputsammy the shark has a pet pilot fishbut if we reverse the index numbers with the parameters of theplaceholders we can reverse the values being passed into the stringprintsammy the 1 has a pet 0formatshark pilot fishoutputsammy the pilot fish has a pet sharkif you call an index number of 2 in a tuple that has values at indexpositions 0 and 1 then you are calling on a value that is out of rangewhen you call an index number that is out of range youll receive anerror messageprintsammy the 2 has a pet 1formatshark pilot fishoutputindexerror tuple index out of rangethe error message we see refers to the tuple only having values atindex numbers 0 and 1 therefore placing index number 2 out of rangelets add a few more placeholders and a few more values to pass tothem so we can understand how we can reorder formatters a little betterfirst here is a new string with four placeholdersprintsammy is a and formathappy smiling blue sharkoutputsammy is a happy smiling and blue sharkwithout parameters the values that are passed into the strformat method are concatenated into the string in orderthe string values contained in the tuple correspond to the followingindex numbershappysmilingblueshark0123lets use the index numbers of the values to change the order that theyappear in the stringprintsammy is a 3 2 and 1 0formathappy smiling blue sharkoutputsammy is a shark blue and smiling happysince we started with index number 3 we called the last value of shark ﬁrst the other index numbers included as parameters changethe order of how the words appear within the original stringin addition to positional arguments we can also introduce keywordarguments that are called by their keyword nameprintsammy the 0 1 a prformatshark made pr pull requestoutputsammy the shark made a pull requestthis example shows the use of a keyword argument being used withpositional arguments we can ﬁll in the keyword argument pr alongsidepositional arguments and can move these arguments around to changethe resulting stringprintsammy the pr 1 a 0formatshark made pr pull requestoutputsammy the pull request made a sharkpositional and keyword arguments used with string formatters give usmore control over manipulating our original strings through reorderingspecifying typewe can include more parameters within the curly braces of our syntaxwell use the format code syntax field_nameconversion where field_name speciﬁes the index number of the argument to the strformat method that we went through in the reordering sectionand conversion refers to the conversion code of the data type thatyoure using with the formatterthe conversion type refers to the the singlecharacter type code thatpython uses the codes that well be using here are s for string d todisplay decimal integers 10base and f which well use to display ﬂoatswith decimal places you can read more about the formatspeciﬁcationminilanguage through python 3s ofﬁcial documentationlets look at an example where we have an integer passed through themethod but want to display it as a ﬂoat by adding the f conversion typeargumentprintsammy ate 0f percent of a 1format75 pizzaoutputsammy ate 75000000 percent of a pizzawe used the syntax of field_nameconversion for the ﬁrst curlybrace replacement ﬁeld to output a ﬂoat the second curly braces onlyuses the ﬁrst parameter field_namein the example above there are a lot of numbers displaying after thedecimal point but you can limit those when you are specifying f forﬂoat values you can additionally specify the precision of that value byincluding a full stop followed by the number of digits after the decimalyou would like to includeif sammy ate 75765367 of the pizza but we dont need to have ahigh level of accuracy we can limit the places after the decimal to 3 byadding 3 before the conversion type fprintsammy ate 03f percent of a pizzaformat75765367outputsammy ate 75765 percent of a pizzaif we just want one decimal place we can rewrite the string andmethod like soprintsammy ate 01f percent of a pizzaformat75765367outputsammy ate 758 percent of a pizzanote that modifying precision will cause the number to be roundedalthough we display a number with no decimal places as a ﬂoat if wetry to change the ﬂoat to an integer by using the d conversion type wewill receive an errorprintsammy ate 0d percent of a pizzaformat75765367outputvalueerror unknown format code d for object of type floatif you would like no decimal places to be shown you can write yourformatter like soprintsammy ate 00f percent of a pizzaformat75765367outputsammy ate 75 percent of a pizzathis will not convert your ﬂoat to an integer but instead limit thenumber of places shown after the decimal pointpadding variable substitutionsbecause the placeholders are replacement ﬁelds you can pad or createspace around an element by increasing ﬁeld size through additionalparameters this can be useful when we need to organize a lot of datavisuallywe can add a number to indicate ﬁeld size in terms of characters afterthe colon in the curly braces of our syntaxprintsammy has 04 red 116format5 balloonsoutputsammy has 5 red balloons in the example above we gave the number 5 a character ﬁeld size of 4and the string balloons a character ﬁeld size of 16 because it is a longstringas we see by default strings are leftjustiﬁed within the ﬁeld andnumbers are rightjustiﬁed you can modify this by placing an alignmentcode just following the colon will leftalign the text in a ﬁeld willcenter the text in the ﬁeld and will rightalign itlets leftalign the number and center the stringprintsammy has 04 red 116format5 balloonsoutputsammy has 5 red balloons now we see that 5 is leftaligned providing space in the ﬁeld before red and balloons is centered in its ﬁeld with space to the left and rightof itby default when we make a ﬁeld larger with formatters python willﬁll the ﬁeld with whitespace characters we can modify that to be adifferent character by specifying the character we want it to be directlyfollowing the colonprint20sformatsammyoutputsammywe are accepting the string being passed to strformat in theindex position of 0 since we did not specify otherwise including thecolon and specifying that we will use instead of space to ﬁll up theﬁeld were centering the string with specifying that the ﬁeld is 20characters in size and also indicating that we are working with a stringconversion type by including swe can combine these parameters with other parameters weve usedbeforeprintsammy ate 050f percent of a pizzaformat75765367outputsammy ate 76 percent of a pizzain the parameters within the curly braces we speciﬁed the index ﬁeldnumber of the ﬂoat and included the colon indicated the size of the ﬁeldnumber and included the full stop wrote in the number of places afterthe decimal place and then speciﬁed the conversion type of fusing variablesso far we have passed integers ﬂoats and strings into the strformat method but we can also pass variables through themethod this works just like any other variablenballoons 8printsammy has balloons todayformatnballoonsoutputsammy has 8 balloons todaywe can use variables for both the original string and what is passedinto the method sammy sammy has balloons todaynballoons 8printsammyformatnballoonsoutputsammy has 8 balloons todayvariables can be easily substituted for each part of our formatter syntaxconstruction this makes it easier to work with when we are taking inusergenerated input and assigning those values to variablesusing formatters to organize dataformatters can be seen in their best light when they are being used toorganize a lot of data in a visual way if we are showing databases tousers using formatters to increase ﬁeld size and modify alignment canmake your output more readablelets look at a typical for loop in python that will print out i ii and iii in the range from 3 to 12for i in range313 printi ii iiioutput3 9 274 16 645 25 1256 36 2167 49 3438 64 5129 81 72910 100 100011 121 133112 144 1728while the output is organized in a way the numbers overﬂow intoeach others columns making the bottom of the output less readable ifyou are working with a bigger data set with many small and bignumbers this can pose a problemlets use formatters to give more space to these numbersfor i in range313 print3d 4d 5dformati ii iiihere in our curly braces we didnt add the ﬁeld name for indexnumber and started with the colon followed by the number for the ﬁeldsize and a d conversion type since were working with integers in thisexample we accommodated for the size of each expected output giving2 extra character spaces for each depending on the maximum possiblenumber size so our output looks like thisoutput 3 9 27 4 16 64 5 25 125 6 36 216 7 49 343 8 64 512 9 81 729 10 100 1000 11 121 1331 12 144 1728we can specify a consistent ﬁeld size number in order to have evencolumns making sure that we accommodate the larger numbersfor i in range313 print6d 6d 6dformati ii iiioutput 3 9 27 4 16 64 5 25 125 6 36 216 7 49 343 8 64 512 9 81 729 10 100 1000 11 121 1331 12 144 1728we can also manipulate the alignment of the columns by adding and for text alignment change d to f to add decimal places changeﬁeld name index numbers and more to ensure that we are displaying thedata as we would likeconclusionusing formatters for variable substitution can be effective way toconcatenate strings and organize values and data formatters represent asimple but nondescriptive way for passing variable substitutions into astring and are useful for making sure output is readable and userfriendlyhow to do math with operatorsnumbers are extremely common in programming they are used torepresent things like screen size dimensions geographic locationsmoney and points the amount of time that passes in a video positions ofgame avatars and colors through assigning numeric codesbeing able to effectively perform mathematical operations inprogramming is an important skill to develop because of how frequentlyyoull be working with numbers though a highlevel understanding ofmathematics can certainly help you become a better programmer it is nota prerequisite if you dont have a background in mathematics try tothink of math as a tool to accomplish what you would like to achieveand as a way to improve your logical thinkingwell be working with two of pythons most used numeric data typesintegers and ﬂoatsintegers are whole numbers that can be positive negative or 0 1 0 1 floats are real numbers they contain a decimal point as in 90 or 225this tutorial will go over operators that can be used with number datatypes in pythonoperatorsan operator is a symbol or function that indicates an operation forexample in math the plus sign or is the operator that indicatesadditionin python we will see some familiar operators that are brought overfrom math but other operators we will use are speciﬁc to computerprogramminghere is a quick reference table of mathrelated operators in pythonwell be covering all of the following operations in this tutorialoperationwhat it returnsx ysum of x and yx ydifference of x and yxchanged sign of xxidentity of xx yproduct of x and yx yquotient of x and yx yquotient from ﬂoor division of x and yx yremainder of x yx yx to the y powerwell also be covering compound assignment operators including and that combine an arithmetic operator with the operatoraddition and subtractionin python addition and subtraction operators perform just as they do inmathematics in fact you can use the python programming language as acalculatorlets look at some examples starting with integersprint1 5output6instead of passing integers directly into the print statement we caninitialize variables to stand for integer valuesa 88b 103printa boutput191because integers can be both positive and negative numbers and 0too we can add a negative number with a positive numberc 36d 25printc doutput11addition will behave similarly with ﬂoatse 55f 25printe foutput80because we added two ﬂoats together python returned a ﬂoat valuewith a decimal placethe syntax for subtraction is the same as for addition except youllchange your operator from the plus sign to the minus sign g 7567h 32printg houtput4367here we subtracted an integer from a ﬂoat python will return a ﬂoat ifat least one of the numbers involved in an equation is a ﬂoatunary arithmetic operationsa unary mathematical expression consists of only one component orelement and in python the plus and minus signs can be used as a singleelement paired with a value to return the values identity or changethe sign of the value though not commonly used the plus sign indicates the identity of thevalue we can use the plus sign with positive valuesi 33printioutput33when we use the plus sign with a negative value it will also return theidentity of that value and in this case it would be a negative valuej 19printjoutput19with a negative value the plus sign returns the same negative valuethe minus sign alternatively changes the sign of a value so when wepass a positive value well ﬁnd that the minus sign before the value willreturn a negative valuei 33printioutput33alternatively when we use the minus sign unary operator with anegative value a positive value will be returnedj 19printjoutput19the unary arithmetic operations indicated by the plus sign and minussign will return either the values identity in the case of i or theopposite sign of the value as in imultiplication and divisionlike addition and subtraction multiplication and division will look verysimilar to how they do in mathematics the sign well use in python formultiplication is and the sign well use for division is heres an example of doing multiplication in python with two ﬂoatvaluesk 1001l 101printk loutput10110099999999999when you divide in python 3 your quotient will always be returned asa ﬂoat even if you use two integersm 80n 5printm noutput160this is one of the major changes between python 2 and python 3python 3s approach provides a fractional answer so that when you use to divide 11 by 2 the quotient of 55 will be returned in python 2 thequotient returned for the expression 11 2 is 5python 2s operator performs ﬂoor division where for the quotient xthe number returned is the largest integer less than or equal to x if yourun the above example of print80 5 with python 2 instead ofpython 3 youll receive 16 as the output without the decimal placein python 3 you can use to perform ﬂoor division the expression 100 40 will return the value of 2 floor division is useful when youneed a quotient to be in whole numbersmodulothe operator is the modulo which returns the remainder rather thanthe quotient after division this is useful for ﬁnding numbers that aremultiples of the same number for examplelets look at the modulo in actiono 85p 15printo poutput10to break this down 85 divided by 15 returns the quotient of 5 with aremainder of 10 the value 10 is what is returned here because themodulo operator returns the remainder of a division expressionif we use two ﬂoats with the modulo a ﬂoat value will be returned forthe remainderq 360r 60printo poutput00in the case of 360 divided by 60 there is no remainder so the value of 00 is returnedpowerthe operator in python is used to raise the number on the left to thepower of the exponent of the right that is in the expression 5 3 5 isbeing raised to the 3rd power in mathematics we often see thisexpression rendered as 5³ and what is really going on is 5 is beingmultiplied by itself 3 times in python we would get the same result of 125 by running either 5 3 or 5 5 5lets look at an example with variabless 5225t 7prints t1063173305051292raising the ﬂoat 5225 to the power of 7 through the operatorresults in a large ﬂoat value returnedoperator precedencein python as in mathematics we need to keep in mind that operatorswill be evaluated in order of precedence not from left to right or right toleftif we look at the following expressionu 10 10 5we may read it left to right but remember that multiplication will bedone ﬁrst so if we call printu we will receive the following valueoutput60this is because 10 5 evaluates to 50 and then we add 10 to return 60 as the ﬁnal resultif instead we would like to add the value 10 to 10 then multiply thatsum by 5 we can use parentheses just like we would in mathu 10 10 5printuoutput100one way to remember the order of operation is through the acronympemdasorderletterstands for1pparentheses2eexponent3mmultiplication4ddivision5aaddition6ssubtractionyou may be familiar with another acronym for the order of operationssuch as bedmas or bodmas whatever acronym works best for youtry to keep it in mind when performing math operations in python sothat the results that you expect are returnedassignment operatorsthe most common assignment operator is one you have already usedthe equals sign the assignment operator assigns the value on theright to a variable on the left for example v 23 assigns the value ofthe integer 23 to the variable vwhen programming it is common to use compound assignmentoperators that perform an operation on a variables value and then assignthe resulting new value to that variable these compound operatorscombine an arithmetic operator with the operator so for addition wellcombine with to get the compound operator lets see what thatlooks likew 5w 1printwoutput6first we set the variable w equal to the value of 5 then we used the compound assignment operator to add the right number to the value ofthe left variable and then assign the result to wcompound assignment operators are used frequently in the case of forloops which youll use when you want to repeat a process several timesfor x in range 0 7 x 2 printxoutput024681012with the for loop we were able to automate the process of the operator that multiplied the variable w by the number 2 and thenassigned the result in the variable w for the next iteration of the for looppython has a compound assignment operator for each of the arithmeticoperators discussed in this tutorialy 1 add then assign valuey 1 subtract then assign valuey 2 multiply then assign valuey 3 divide then assign valuey 5 floor divide then assign valuey 2 increase to the power of then assign valuey 3 return remainder then assign valuecompound assignment operators can be useful when things need to beincrementally increased or decreased or when you need to automatecertain processes in your programconclusionthis tutorial covered many of the operators youll use with the integerand ﬂoat numeric data types if you would like to keep reading aboutnumbers in python you can continue onto builtin python 3 functionsfor working with numbersto learn more about other data types take a look at understandingdata types in python 3 and learn about how to convert data types byreading how to convert data types in python 3builtin python 3 functions for working withnumberspython 3 comes with many builtin functions that you can readily use inany program that youre working on some functions enable you toconvert data types and others are speciﬁc to a certain type like stringsthis tutorial will go through a few of the builtin functions that can beused with numeric data types in python 3 well go over the followingfunctions abs for absolute value divmod to ﬁnd a quotient andremainder simultaneously pow to raise a number to a certain power round to round a number to a certain decimal point sum tocalculate the sum of the items in an iterable data typebecoming familiar with these methods can give you more ﬂexibilitywhen programming so that you can make informed decisions whendeciding what operators and functions to use well go through some ofthese functions with examples throughout this tutorialabsolute valuethe builtin function abs will return the absolute value of a numberthat you pass to it in mathematics absolute value refers to the distancethat a number is on the number line from 0 absolute value does not takeinto consideration which direction from zero the number lies meaningthat negative numbers will be represented with positive numbersto give some examples the absolute value of 15 is 15 the absolutevalue of 74 is 74 and the absolute value of 0 is 0absolute value is an important concept for calculus and real analysisbut it also makes sense when we think about everyday situations likedistance travelled for example if we are trying to get somewhere that is58 miles away but we travel 93 miles instead we overshot our originaldestination if we want to calculate now how many miles left to travel toget to the intended destination well end up with a negative number butwe cant travel negative mileslets use abs to solve this problemdestination_milespymiles_from_origin 58 miles destination is from originmiles_travelled 93 miles travelled from origin to destination too many calculate how many miles destination is from current locationmiles_to_go miles_from_origin miles_travelledprintmiles_to_go print how many miles left a negative numberprintabsmiles_to_go use absolute value to account for negative numberoutput3535in the output we see that if we dont use the abs function in thisinstance we have a negative number 35 though we may be in aposition where miles_travelled is less than miles_from_originincluding the abs function takes the possibility of a negative numberinto accountwith a negative number abs will return a positive number asabsolute values are always positive numbers or zerolets go through using abs with a positive number and zeroprintabs899printabs0output8990were most likely to use abs with a variable that may be positive ornegative in an instance when we are looking only for a positive numberto account for a negative input or result well use abs to modify whatis returned to be a positive numberfinding the quotient and remainder in one functionbecause both ﬂoor division which returns a quotient and modulodivision which returns a remainder are closely related it can be usefulto use a function that combines both operations at oncethe python builtin function divmod combines the two returningﬁrst the quotient that comes from ﬂoor division then the remainderbecause divmod will be working with two numbers we need topass two numbers to itdivmodabwith this function we are basically performing the followinga ba blets say we have written a book that is 80000 words long with ourpublisher we have the option of either 300 or 250 words per page andwed like to get a sense of how many pages we would have in each casewith divmod we can see immediately how many pages we wouldhave and how many words would be spilled over onto an additionalpagewords_per_pagepywords 80000 how many words in our bookper_page_a 300 option a 300 words per pageper_page_b 250 option b 25 words per pageprintdivmodwordsper_page_a calculate option aprintdivmodwordsper_page_b calculate option boutput266 200320 0in option a we will have 266 pages ﬁlled with words and 200 wordsleft over ⅔ of a page for a total of 267 pages and in option b well havean even 320page book if we want to be environmentallyconscious wecan choose option a but if we want to look more impressive with abiggersized book we may choose option bbecause the function divmod can take both integers and ﬂoats letsalso go through an example that uses ﬂoatsa 9855b 11525printdivmodaboutput80 635in this example 80 is the ﬂoor quotient of 9855 divided by 11525and 635 is the remainderkeep in mind that you can use the ﬂoor division operator and themodulo operator to verify what divmod didprintabprintaboutput80635when using the divmod function in python we get both the wholenumber of times the division occurs and the remainder returnedpowerin python you can use the operator to raise a number by an exponentor you can use the builtin function pow which takes in two numbersto see how the pow function works lets say we are doing researchon bacteria and want to see how many bacteria well have at the end ofthe day if we start with 1 the particular bacteria were working withdoubles each hour so well be calculating 2 doubling to the power ofthe total number of hours 24 in our casebacteriapyhours 24total_bacteria pow2hoursprinttotal_bacteriaoutput16777216we passed two integers to the pow function and determined that bythe end of this 24hour period well have over 16 million bacteriain mathematics if we want to calculate 3 to the power of 3 it isgenerally written like this3³the computation that we are completing is 3 x 3 x 3 which is equal to27to calculate 3³ in python we would type out pow33the function pow will take both integers and ﬂoats and provides analternative to using the operator when you intend to raise numbers toa certain powerrounding numbersbeing able to quickly and readily round numbers becomes importantwhen working with ﬂoats that have a lot of decimal places the builtinpython function round takes in two numbers one to be rounded andone that speciﬁes the number of decimal places to includewell use the function to take a ﬂoat with more than 10 decimal placesand use the round function to reduce decimal places to 4i 1734989436516001printroundi4output173499in the example above the ﬂoat 1734989436516001 is rounded to 173499 because we have speciﬁed that the number of decimal placesshould be limited to 4note also that the round function rounds numbers up so instead ofproviding 173498 as the output it has provided 173499 because thenumber following the decimal number 8 is the number 9 any numberthat is followed by the number 5 or greater will be rounded up to thenext whole numberlets break down the syntax for roundroundnumber to roundnumber of decimal placesin everyday life rounding numbers happens often especially whenworking with money we cant split up a penny evenly among severalfriendslets go through an example of a simple program that can calculate atip here well provide ﬁgures but we could rewrite the program tobring in userprovided numbers instead in this example 3 friends wentto a restaurant who want to split a bill of 8793 evenly along withadding a 20 tipbill_splitpybill 8793 total billtip 02 20 tipsplit 3 number of people splitting the billtotal bill bill tip calculate the total billeach_pay total split calculate what each person paysprinteach_pay what each person pays before roundedprintroundeach_pay2 round the number we cant split penniesoutput351720000000000043517in this program we ask ﬁrst for output of the number after wecalculate the total bill plus tip divided by 3 which evaluates to a numberwith a lot of decimal places 35172000000000004 since this numberdoesnt make sense as a monetary ﬁgure we use the round functionand limit the decimal places to 2 so that we can provide an output thatthe 3 friends can actually work with 3517if you would prefer to round to a number with only 0 as a decimalvalue you can do so by using 0 as the second parameter in the roundfunctionround34598745903485453046360this would evaluate to 3460you can also pass integers into round without receiving an error incase you receive user input in the form of an integer rather than a ﬂoatwhen an integer is passed as the ﬁrst parameter an integer will bereturnedcalculating a sumthe sum function is used for calculating sums of numeric compounddata types including lists tuples and dictionarieswe can pass a list to the sum function to add all the items in the listtogether in order from left to rightsome_floats 11 22 33 44 55 66 77 88 99printsumsome_floatsoutput495this will work similarly with tuples and dictionariesprintsum81664512 calculate sum of numbers in tupleprintsum10 x 20 y 30 z calculate sum of numbers in dictionaryoutput600 sum of numbers in tuple60 sum of numbers in dictionarythe sum function can take up to 2 arguments so you can add anadditional number in integer or ﬂoat form to add to the numbers thatmake up the argument in the ﬁrst positionsome_floats 11 22 33 44 55 66 77 88 99printsumsome_floats 05printsum10 x 20 y 30 z60output5000when you dont include a second argument the sum functiondefaults to adding 0 to the iterable compound data typeconclusionthis tutorial covered some builtin methods that you can use withnumeric data types in the python programming languageto learn more about working with numbers you can read how to domath in python 3 with operators and to learn more about lists take alook at understanding lists in python 3understanding boolean logicthe boolean data type can be one of two values either true or false weuse booleans in programming to make comparisons and to control theﬂow of the programbooleans represent the truth values that are associated with the logicbranch of mathematics which informs algorithms in computer sciencenamed for the mathematician george boole the word boolean alwaysbegins with a capitalized b the values true and false will also alwaysbe with a capital t and f respectively as they are special values inpythonin this tutorial well go over the basics youll need to understand howbooleans work including boolean comparison and logical operators andtruth tablescomparison operatorsin programming comparison operators are used to compare values andevaluate down to a single boolean value of either true or falsethe table below shows boolean comparison operatorsoperatorwhat it meansequal tonot equal toless thangreater thanless than or equal togreater than or equal toto understand how these operators work lets assign two integers totwo variables in a python programx 5y 8we know that in this example since x has the value of 5 it is less than y which has the value of 8using those two variables and their associated values lets go throughthe operators from the table above in our program well ask python toprint out whether each comparison operator evaluates to either true orfalse to help us and other humans better understand this output wellhave python also print a string to show us what its evaluatingx 5y 8printx y x yprintx y x yprintx y x yprintx y x yprintx y x yprintx y x youtputx y falsex y truex y truex y falsex y truex y falsefollowing mathematical logic in each of the expressions above pythonhas evaluatedis 5 x equal to 8 y falseis 5 not equal to 8 trueis 5 less than 8 trueis 5 greater than 8 falseis 5 less than or equal to 8 trueis 5 not less than or equal to 8 falsealthough we used integers here we could substitute them with ﬂoatvaluesstrings can also be used with boolean operators they are casesensitive unless you employ an additional string methodwe can look at how strings are compared in practicesammy sammysammy sammyprintsammy sammy sammy sammyoutputsammy sammy falsethe string sammy above is not equal to the string sammy becausethey are not exactly the same one starts with an uppercase s and theother with a lowercase s but if we add another variable that is assignedthe value of sammy then they will evaluate to equalsammy sammysammy sammyalso_sammy sammyprintsammy sammy sammy sammyprintsammy also_sammy sammy also_sammyoutputsammy sammy falsesammy also_sammy trueyou can also use the other comparison operators including and tocompare two strings python will compare these strings lexicographicallyusing the ascii values of the characterswe can also evaluate boolean values with comparison operatorst truef falseprintt f t foutputt f truethe above code block evaluated that true is not equal to falsenote the difference between the two operators and x y sets x equal to yx y evaluates whether x is equal to ythe ﬁrst is the assignment operator which will set one value equalto another the second is a comparison operator which will evaluatewhether two values are equallogical operatorsthere are three logical operators that are used to compare values theyevaluate expressions down to boolean values returning either true or false these operators are and or and not and are deﬁned in the tablebelowoperatorwhat it meanswhat it looks likeandtrue if both are truex and yortrue if at least one is truex or ynottrue only if falsenot xlogical operators are typically used to evaluate whether two or moreexpressions are true or not true for example they can be used todetermine if the grade is passing and that the student is registered in thecourse and if both cases are true then the student will be assigned agrade in the system another example would be to determine whether auser is a valid active customer of an online shop based on whether theyhave store credit or have made a purchase in the past 6 monthsto understand how logical operators work lets evaluate threeexpressionsprint9 7 and 2 4 both original expressions are trueprint8 8 or 6 6 one original expression is trueprintnot3 1 the original expression is falseoutputtruetruetruein the ﬁrst case print9 7 and 2 4 both 9 7 and 2 4 needed to evaluate to true since the and operator was being usedin the second case print8 8 or 6 6 since 8 8evaluated to true it did not make a difference that 6 6 evaluates tofalse because the or operator was used if we had used the and operatorthis would evaluate to falsein the third case printnot3 1 the not operator negatesthe false value that 3 1 returnslets substitute ﬂoats for integers and aim for false evaluationsprint02 14 and 08 31 one original expression is falseprint75 89 or 92 92 both original expressions are false printnot57 03 the original expression is truein the example above and must have at least one false expressionevaluate to false or must have both expressions evaluate to false not must have its inner expression be true for the new expression toevaluate to falseif the results above seem unclear to you well go through some truthtables below to get you up to speedyou can also write compound statements using and or and notnot02 14 and 08 31 or 01 01lets look at the innermost expression ﬁrst 08 31 or 01 01 this expression evaluates to true because both mathematicalstatements are truenow we can take the returned value true and combine it with thenext inner expression 02 14 and true this examplereturns false because the mathematical statement 02 14 isfalse and false and true returns falsefinally we have the outer expression notfalse which evaluatesto true so the ﬁnal returned value if we print this statement out isoutputtruethe logical operators and or and not evaluate expressions andreturn boolean valuestruth tablesthere is a lot to learn about the logic branch of mathematics but we canselectively learn some of it to improve our algorithmic thinking whenprogrammingbelow are truth tables for the comparison operator and each of thelogic operators and or and not while you may be able to reason themout it can also be helpful to work to memorize them as that can makeyour programming decisionmaking process quicker truth tablexyreturnstruetruetruetruefalsefalsefalsetruefalsefalsefalsetrueand truth tablexandyreturnstrueandtruetruetrueandfalsefalsefalseandtruefalsefalseandfalsefalseor truth tablexoryreturnstrueortruetruetrueorfalsetruefalseortruetruefalseorfalsefalsenot truth tablenotxreturnsnottruefalsenotfalsetruetruth tables are common mathematical tables used in logic and areuseful to memorize or keep in mind when constructing algorithmsinstructions in computer programmingusing boolean operators for flow controlto control the stream and outcomes of a program in the form of ﬂowcontrol statements we can use a condition followed by a clausea condition evaluates down to a boolean value of true or falsepresenting a point where a decision is made in the program that is acondition would tell us if something evaluates to true or falsethe clause is the block of code that follows the condition and dictatesthe outcome of the program that is it is the do this part of theconstruction if x is true then do thisthe code block below shows an example of comparison operatorsworking in tandem with conditional statements to control the ﬂow of apython programif grade 65 condition printpassing grade clauseelse printfailing gradethis program will evaluate whether each students grade is passing orfailing in the case of a student with a grade of 83 the ﬁrst statement willevaluate to true and the print statement of passing grade will betriggered in the case of a student with a grade of 59 the ﬁrst statementwill evaluate to false so the program will move on to execute the printstatement tied to the else expression failing gradebecause every single object in python can be evaluated to true or falsethe pep 8 style guide recommends against comparing a value to true orfalse because it is less readable and will frequently return anunexpected boolean that is you should avoid using if sammy true in your programs instead compare sammy to another nonboolean value that will return a booleanboolean operators present conditions that can be used to decide theeventual outcome of a program through ﬂow control statementsconclusionthis tutorial went through comparison and logical operators belongingto the boolean type as well as truth tables and using booleans forprogram ﬂow controlyou can learn more about other data types in our understanding datatypes tutorial and can read about conditional statements in our howto write conditional statements tutorialunderstanding listsa list is a data structure in python that is a mutable or changeableordered sequence of elements each element or value that is inside of alist is called an item just as strings are deﬁned as characters betweenquotes lists are deﬁned by having values between square brackets lists are great to use when you want to work with many relatedvalues they enable you to keep data together that belongs togethercondense your code and perform the same methods and operations onmultiple values at oncewhen thinking about python lists and other data structures that aretypes of collections it is useful to consider all the different collections youhave on your computer your assortment of ﬁles your song playlistsyour browser bookmarks your emails the collection of videos you canaccess on a streaming service and moreto get started lets create a list that contains items of the string datatypesea_creatures shark cuttlefish squid mantis shrimp anemonewhen we print out the list the output looks exactly like the list wecreatedprintsea_creaturesoutputshark cuttlefish squid mantis shrimp anemoneas an ordered sequence of elements each item in a list can be calledindividually through indexing lists are a compound data type made upof smaller parts and are very ﬂexible because they can have valuesadded removed and changed when you need to store a lot of values oriterate over values and you want to be able to readily modify thosevalues youll likely want to work with list data typesin this tutorial well go through some of the ways that we can workwith lists in pythonindexing listseach item in a list corresponds to an index number which is an integervalue starting with the index number 0for the list sea_creatures the index breakdown looks like thissharkcuttlefishsquidmantis shrimpanemone01234the ﬁrst item the string shark starts at index 0 and the list ends atindex 4 with the item anemonebecause each item in a python list has a corresponding index numberwere able to access and manipulate lists in the same ways we can withother sequential data typesnow we can call a discrete item of the list by referring to its indexnumberprintsea_creatures1outputcuttlefishthe index numbers for this list range from 04 as shown in the tableabove so to call any of the items individually we would refer to theindex numbers like thissea_creatures0 sharksea_creatures1 cuttlefishsea_creatures2 squidsea_creatures3 mantis shrimpsea_creatures4 anemoneif we call the list sea_creatures with an index number of any that isgreater than 4 it will be out of range as it will not be validprintsea_creatures18outputindexerror list index out of rangein addition to positive index numbers we can also access items fromthe list with a negative index number by counting backwards from theend of the list starting at 1 this is especially useful if we have a longlist and we want to pinpoint an item towards the end of a listfor the same list sea_creatures the negative index breakdownlooks like thissharkcuttlefishsquidmantis shrimpanemone54321so if we would like to print out the item squid by using itsnegative index number we can do so like thisprintsea_creatures3outputsquidwe can concatenate string items in a list with other strings using the operatorprintsammy is a sea_creatures0outputsammy is a sharkwe were able to concatenate the string item at index number 0 with thestring sammy is a we can also use the operator to concatenate 2or more lists togetherwith index numbers that correspond to items within a list were ableto access each item of a list discretely and work with those itemsmodifying items in listswe can use indexing to change items within the list by setting an indexnumber equal to a different value this gives us greater control over listsas we are able to modify and update the items that they containif we want to change the string value of the item at index 1 from cuttlefish to octopus we can do so like thissea_creatures1 octopusnow when we print sea_creatures the list will be differentprintsea_creaturesoutputshark octopus squid mantis shrimp anemonewe can also change the value of an item by using a negative indexnumber insteadsea_creatures3 blobfishprintsea_creaturesoutputshark octopus blobfish mantis shrimp anemonenow blobfish has replaced squid at the negative indexnumber of 3 which corresponds to the positive index number of 2being able to modify items in lists gives us the ability to change andupdate lists in an efﬁcient wayslicing listswe can also call out a few items from the list lets say we would like tojust print the middle items of sea_creatures we can do so by creatinga slice with slices we can call multiple values by creating a range ofindex numbers separated by a colon xyprintsea_creatures14outputoctopus blobfish mantis shrimpwhen creating a slice as in 14 the ﬁrst index number is where theslice starts inclusive and the second index number is where the sliceends exclusive which is why in our example above the items atposition 1 2 and 3 are the items that print outif we want to include either end of the list we can omit one of thenumbers in the listxy syntax for example if we want to print theﬁrst 3 items of the list sea_creatures which would be shark octopus blobfish we can do so by typingprintsea_creatures3outputshark octopus blobfishthis printed the beginning of the list stopping right before index 3to include all the items at the end of a list we would reverse thesyntaxprintsea_creatures2outputblobfish mantis shrimp anemonewe can also use negative index numbers when slicing lists just likewith positive index numbersprintsea_creatures42printsea_creatures3outputoctopus blobfishblobfish mantis shrimp anemoneone last parameter that we can use with slicing is called stride whichrefers to how many items to move forward after the ﬁrst item is retrievedfrom the list so far we have omitted the stride parameter and pythondefaults to the stride of 1 so that every item between two index numbersis retrievedthe syntax for this construction is listxyz with z referring tostride lets make a larger list then slice it and give the stride a value of2numbers 0 1 2 3 4 5 6 7 8 9 10 11 12printnumbers1112output1 3 5 7 9our construction numbers1112 prints the values between indexnumbers inclusive of 1 and exclusive of 11 then the stride value of 2tells the program to print out only every other itemwe can omit the ﬁrst two parameters and use stride alone as aparameter with the syntax listzprintnumbers3output0 3 6 9 12by printing out the list numbers with the stride set to 3 only everythird item is printed0 1 2 3 4 5 6 7 8 9 10 11 12slicing lists with both positive and negative index numbers andindicating stride provides us with the control to manipulate lists andreceive the output were trying to achievemodifying lists with operatorsoperators can be used to make modiﬁcations to lists well look at usingthe and operators and their compound forms and the operator can be used to concatenate two or more lists togethersea_creatures shark octopus blobfish mantis shrimp anemoneoceans pacific atlantic indian southern arcticprintsea_creatures oceansoutputshark octopus blobfish mantis shrimp anemone pacific atlantic indian southern arcticbecause the operator can concatenate it can be used to add an itemor several in list form to the end of another list remember to place theitem in square bracketssea_creatures sea_creatures yeti crabprint sea_creaturesoutputshark octopus blobfish mantis shrimp anemone yeti crabthe operator can be used to multiply lists perhaps you need to makecopies of all the ﬁles in a directory onto a server or share a playlist withfriends in these cases you would need to multiply collections of datalets multiply the sea_creatures list by 2 and the oceans list by 3printsea_creatures 2printoceans 3outputshark octopus blobfish mantis shrimp anemone yeti crab shark octopus blobfish mantis shrimp anemone yeti crabpacific atlantic indian southern arctic pacific atlantic indian southern arctic pacific atlantic indian southern arcticby using the operator we can replicate our lists by the number oftimes we specifywe can also use compound forms of the and operators with theassignment operator the and compound operators can be usedto populate lists in a quick and automated way you can use theseoperators to ﬁll in lists with placeholders that you can modify at a latertime with userprovided input for examplelets add an item in list form to the list sea_creatures this itemwill act as a placeholder and wed like to add this placeholder itemseveral times to do this well use the operator with a for loopfor x in range14 sea_creatures fish printsea_creaturesoutputshark octopus blobfish mantis shrimp anemone yeti crab fishshark octopus blobfish mantis shrimp anemone yeti crab fish fishshark octopus blobfish mantis shrimp anemone yeti crab fish fish fishfor each iteration of the for loop an extra list item of fish is addedto the original list sea_creaturesthe operator behaves in a similar waysharks sharkfor x in range14 sharks 2 printsharksoutputshark sharkshark shark shark sharkshark shark shark shark shark shark shark sharkthe operators and can be used to concatenate lists and multiplylists the compound operators and can concatenate lists andmultiply lists and pass the new identity to the original listremoving an item from a listitems can be removed from lists by using the del statement this willdelete the value at the index number you specify within a listfrom the sea_creatures list lets remove the item octopus thisitem is located at the index position of 1 to remove the item well usethe del statement then call the list variable and the index number of thatitemsea_creatures shark octopus blobfish mantis shrimp anemone yeti crabdel sea_creatures1printsea_creaturesoutputshark blobfish mantis shrimp anemone yeti crabnow the item at index position 1 the string octopus is no longerin our list sea_creatureswe can also specify a range with the del statement say we wanted toremove not only the item octopus but also blobfish and mantis shrimp as well we can call a range in sea_creatureswith the del statement to accomplish thissea_creatures shark octopus blobfish mantis shrimp anemone yeti crabdel sea_creatures14printsea_creaturesoutputshark anemone yeti crabby using a range with the del statement we were able to remove theitems between the index number of 1 inclusive and the index numberof 4 exclusive leaving us with a list of 3 items following the removal of3 itemsthe del statement allows us to remove speciﬁc items from the list datatypeconstructing a list with list itemslists can be deﬁned with items that are made up of lists with eachbracketed list enclosed inside the larger brackets of the parent listsea_names shark octopus squid mantis shrimpsammy jesse drew jamiethese lists within lists are called nested liststo access an item within this list we will have to use multiple indicesprintsea_names10printsea_names00outputsammysharkthe ﬁrst list since it is equal to an item will have the index number of0 which will be the ﬁrst number in the construction and the second listwill have the index number of 1 within each inner nested list there willbe separate index numbers which we will call in the second indexnumbersea_names00 sharksea_names01 octopussea_names02 squidsea_names03 mantis shrimpsea_names10 sammysea_names11 jessesea_names12 drewsea_names13 jamiewhen working with lists of lists it is important to keep in mind thatyoull need to refer to more than one index number in order to accessspeciﬁc items within the relevant nested listconclusionthe list data type is a ﬂexible data type that can be modiﬁed throughoutthe course of your program this tutorial covered the basic features oflists including indexing slicing modifying and concatenating listsfrom here you can ﬁnd out more about working with lists in pythonby reading how to use list methods and about list comprehensionsto create lists based on existing lists to learn more about data types ingeneral you can read our understanding data types tutorialhow to use list methodspython 3 has a number of builtin data structures including lists datastructures provide us with a way to organize and store data and we canuse builtin methods to retrieve or manipulate that datato get the most out of this tutorial you should have some familiaritywith the list data type its syntax and how it is indexed you can reviewlists by reading the tutorial understanding lists in python 3here well go through the builtin methods that you can use to workwith lists well add items to and remove items from lists extend listsreverse and sort lists and moreit is important to keep in mind that lists are mutable or changeable data types unlike strings which are immutable whenever you use amethod on a list you will be affecting the list itself and not a copy of thelistfor this tutorial well be working primarily with a list comprised of aninventory of various ﬁsh that we need to modify as ﬁsh are added to orremoved from a municipal aquariumlistappendthe method listappendx will add an item x to the end of a listwell start with a list of our ﬁsh that are dispersed throughout theaquariumfish barracudacoddevil rayeelthis list is comprised of 4 string items and their index numbers rangefrom barracuda at 0 to eel at index 3we just got a new ﬁsh into the aquarium today and we would like toadd that ﬁsh to our list well pass the string of our new ﬁsh type flounder into the listappend method and then print out ourmodiﬁed list to conﬁrm that the item was addedfishappendflounderprintfishoutputbarracuda cod devil ray eel floundernow we have a list of 5 string items that ends with the item we passedto the append functionlistinsertthe listinsertix method takes two arguments with i being theindex position you would like to add an item to and x being the itemitselfour aquarium acquired another new ﬁsh an anchovy you may havenoticed that so far the list fish is in alphabetical order because of thiswe dont want to just add the string anchovy to the end of fish withthe listappend function instead well use listinsert toadd anchovy to the beginning of this list at index position 0fishinsert0anchovyprintfishoutputanchovy barracuda cod devil ray eel flounderin this case we added the string item to the front of the list each of thesuccessive items will now be at a new index number as they have allmoved down therefore barracuda will be at index 1 cod will beat index 2 and flounder the last item will be at index 5if at this point we are bringing a damselﬁsh to the aquarium and wewanted to maintain alphabetical order based on the list above we wouldput the item at index 3 fishinsert3damselfishlistextendif we want to combine more than one list we can use the listextendl method which takes in a second list as its argumentour aquarium is welcoming four new ﬁsh from another aquarium thatis closing we have these ﬁsh together in the list more_fishmore_fish gobyherringidekissing gouramiwell now add the items from the list more_fish to the list fish andprint the list to ensure that the second list was incorporatedfishextendmore_fishprintfishoutputanchovy barracuda cod devil ray eel flounder goby herring ide kissing gouramiat this point the list fish is comprised of 10 itemslistremovewhen we need to remove an item from a list well use the listremovex method which removes the ﬁrst item in a list whosevalue is equivalent to xa group of local research scientists have come to visit the aquariumthey are doing research on the kissing gourami species of ﬁsh they haverequested for us to loan our kissing gourami to them so wed like toremove the kissing gourami item from the list to reﬂect thischangefishremovekissing gouramiprintfishoutputanchovy barracuda cod devil ray eel flounder goby herring idefollowing the use of the listremove method our list no longerhas the kissing gourami itemif you pass an item in for x in listremove that does not exist inthe list youll receive the following erroroutputvalueerror listremovex x not in listkeep in mind that listremove will only remove the ﬁrst instanceof the item you pass to it so if we had two kissing gouramis at ouraquarium and we only loaned one to the scientists we could use thesame construction of fishremovekissing gourami and stillhave the second kissing gourami on our listlistpopwe can use the listpopi method to return the item at the givenindex position from the list and then remove that item the squarebrackets around the i for index tell us that this parameter is optional soif we dont specify an index as in fishpop the last item will bereturned and removedour devil ray has gotten too large for our aquarium and thankfully anaquarium a few towns over can accommodate the rays needs well use pop and specify the index number 3 of the string item devil ray to remove the item from our list and through returning it wellconﬁrm that we are removing the correct itemprintfishpop3printfishoutputdevil rayanchovy barracuda cod eel flounder goby herring ideby using the pop method we were able to return and remove devil ray from the list fishif we were to pass no parameters to this method and perform fishpop the last item ide would be returned and then removedfrom the listlistindexwhen lists start to get long it becomes more difﬁcult for us to count outour items to determine at what index position a certain value is locatedwe can use listindexx where x is equivalent to an item value toreturn the index in the list where that item is located if there is more thanone item with value x this method will return the ﬁrst index locationprintfishprintfishindexherringoutputanchovy barracuda cod eel flounder goby herring ide6although the list fish is not very long were still able to determinethe index position of the item herring without counting the indexof each item is very important to know so that we are able to manipulatelists effectivelywell receive an error if we specify a value with index and nosuch value exists in the given list valueerror x is not in listlistcopywhen we are working with a list and may want to manipulate it inmultiple ways while still having the original list available to usunchanged we can use listcopy to make a copy of the listwell pass the value returned from fishcopy to the variable fish_2 and then print out the value of fish_2 to ensure that it is a listwith the same items as fishfish_2 fishcopyprintfish_2outputanchovy barracuda cod eel flounder goby herring ideat this point both fish and fish_2 are equivalent listslistreversewe can reverse the order of items in a list by using the listreversemethod perhaps it is more convenient for us to use reverse alphabeticalorder rather than traditional alphabetical order in that case we need touse the reverse method with the fish list to have the list bereversed in placefishreverseprintfishoutputide herring goby flounder eel cod barracuda anchovyafter using the reverse method our list begins with the item ide which was at the end of our list and ends with anchovywhich was at the beginning of the listlistcountthe listcountx method will return the number of times the value x occurs within a speciﬁed list we may want to use this method whenwe have a long list with a lot of matching values if we had a largeraquarium for example and we had an item for each and every neontetra that we had we could use count to determine the total numberof neon tetras we have at any given timewell use our current list to count the number of times the item goby appearsprintfishcountgobyoutput1because the string goby appears only one time the number 1 isreturned when we use the count methodlets also use this method with an integer list our aquarium iscommitted to providing great care for each and every ﬁsh so we arekeeping track of how old each of our ﬁsh are so we can ensure that theirdiets meet ﬁshs needs based on their ages this second list fish_agescorresponds to the type of ﬁsh from our other list fishbecause 1yearold ﬁsh have special dietary needs were going tocount how many 1yearold ﬁsh we havefish_ages 12432112printfish_agescount1output3the integer 1 occurs in the list fish_ages 3 times so when we usethe count method the number 3 is returnedlistsortwe can use the listsort method to sort the items in a listjust like listcount listsort can make it more apparenthow many of a certain integer value we have and it can also put anunsorted list of numbers into numeric orderlets use the integer list fish_ages to see the sort method inactionfish_agessortprintfish_agesoutput1 1 1 2 2 2 3 4by using sort with fish_ages the integer values are returned inorder in practice since these ages correspond to speciﬁc ﬁsh you wouldlikely want to make a copy of the original list prior to sorting itlistclearwhen were done with a list we can remove all values contained in it byusing the listclear methodthe local government has decided to take over our aquarium makingit a public space for the people in our city to enjoy since were no longerworking on the aquarium ourselves we no longer need to keep aninventory of the ﬁsh so lets clear the fish listfishclearprintfishoutputwe receive square brackets as our output after using the clearfunction on fish letting us know that the list is now clear of all itemsconclusionas a mutable or changeable ordered sequence of elements lists are veryﬂexible data structures in python list methods enable us to work withlists in a sophisticated manner we can combine methods with otherways to modify lists in order to have a full range of tools to use listseffectively in our programs from here you can read about listcomprehensions to create lists based on existing listsunderstanding list comprehensionslist comprehensions offer a succinct way to create lists based on existinglists when using list comprehensions lists can be built by leveraging anyiterable including strings and tuplessyntactically list comprehensions consist of an iterable containing anexpression followed by a for clause this can be followed by additional for or if clauses so familiarity with for loops and conditionalstatements will help you understand list comprehensions betterlist comprehensions provide an alternative syntax to creating lists andother sequential data types while other methods of iteration such as for loops can also be used to create lists list comprehensions may bepreferred because they can limit the number of lines used in yourprogramlist comprehensionsin python list comprehensions are constructed like solist_variable x for x in iterablea list or other iterable is assigned to a variable additional variablesthat stand for items within the iterable are constructed around a forclause the in keyword is used as it is in for loops to iterate over the iterablelets look at an example that creates a list based on a stringshark_letters letter for letter in sharkprintshark_lettershere the new list is assigned to the variable shark_letters and letter is used to stand in for the items contained in the iterable string sharkfor us to conﬁrm what the new list shark_letters looks like wecall for it to print and receive the following outputoutputs h a r kthe list we created with the list comprehension is comprised of theitems in the string shark that is one string for each letterlist comprehensions can be rewritten as for loops though not every for loop is able to be rewritten as a list comprehensionusing our list comprehension that created the shark_letters listabove lets rewrite it as a for loop this may help us better understandhow the list comprehension worksshark_letters for letter in shark shark_lettersappendletterprintshark_letterswhen creating a list with a for loop the variable assigned to the listneeds to be initialized with an empty list as it is in the ﬁrst line of ourcode block the for loop then iterates over the item using the variable letter in the iterable string shark within the for loop each itemwithin the string is added to the list with the listappendx methodrewriting the list comprehension as a for loop provides us with thesame outputoutputs h a r klist comprehensions can be rewritten as for loops and some forloops can be rewritten to be list comprehensions to make code moresuccinctusing conditionals with list comprehensionslist comprehensions can utilize conditional statements to modify existinglists or other sequential data types when creating new listslets look at an example of an if statement used in a listcomprehensionfish_tuple blowfish clownfish catfish octopusfish_list fish for fish in fish_tuple if fish octopusprintfish_listthe list comprehension uses the tuple fish_tuple as the basis for thenew list called fish_list the keywords of for and in are used asthey were in the section above and now an if statement is added the if statement says to only add those items that are not equivalent to thestring octopus so the new list only takes in items from the tuple thatdo not match octopuswhen we run this well see that fish_list contains the same stringitems as fish_tuple except for the fact that the string octopus hasbeen omittedoutputblowfish clownfish catfishour new list therefore has every item of the original tuple except forthe string that is excluded by the conditional statementwell create another example that uses mathematical operatorsintegers and the range sequence typenumber_list x 2 for x in range10 if x 2 0printnumber_listthe list that is being created number_list will be populated withthe squared values of each item in the range from 09 if the items value isdivisible by 2 the output is as followsoutput0 4 16 36 64to break down what the list comprehension is doing a little more letsthink about what would be printed out if we were just calling x for x in range10 our small program and output would then look likethisnumber_list x for x in range10printnumber_listoutput0 1 2 3 4 5 6 7 8 9now lets add the conditional statementnumber_list x for x in range10 if x 2 0printnumber_listoutput0 2 4 6 8the if statement has limited the items in the ﬁnal list to only includethose items that are divisible by 2 omitting all of the odd numbersfinally we can add the operator to have each x squarednumber_list x 2 for x in range10 if x 2 0printnumber_listso each of the numbers in the previous list of 0 2 4 6 8 arenow squaredoutput0 4 16 36 64you can also replicate nested if statements with a list comprehensionnumber_list x for x in range100 if x 3 0 if x 5 0printnumber_listhere the list comprehension will ﬁrst check to see if the number x isdivisible by 3 and then check to see if x is divisible by 5 if x satisﬁesboth requirements it will print and the output isoutput0 15 30 45 60 75 90conditional if statements can be used to control which items from anexisting sequence are included in the creation of a new listnested loops in a list comprehensionnested loops can be used to perform multiple iterations in our programsthis time well look at an existing nested for loop construction andwork our way towards a list comprehensionour code will create a new list that iterates over 2 lists and performsmathematical operations based on them here is our nested for loopcode blockmy_list for x in 20 40 60 for y in 2 4 6 my_listappendx yprintmy_listwhen we run this code we receive the following outputoutput40 80 120 80 160 240 120 240 360this code is multiplying the items in the ﬁrst list by the items in thesecond list over each iterationto transform this into a list comprehension we will condense each ofthe lines of code into one line beginning with the x y operation thiswill be followed by the outer for loop then the inner for loop welladd a print statement below our list comprehension to conﬁrm thatthe new list matches the list we created with our nested for loop blockabovemy_list x y for x in 20 40 60 for y in 2 4 6printmy_listoutput40 80 120 80 160 240 120 240 360our list comprehension takes the nested for loops and ﬂattens theminto one line of code while still creating the exact same list to assign tothe my_list variablelist comprehensions provide us with a succinct way of making listsenabling us to distill several lines of code into a single line however it isworth keeping in mind that the readability of our code should alwaystake precedence so when a list comprehension line becomes too long orunwieldy it may be best to break it out into loopsconclusionlist comprehensions allow us to transform one list or other sequence intoa new list they provide a concise syntax for completing this tasklimiting our lines of codelist comprehensions follow the mathematical form of setbuildernotation or set comprehension so they may be particularly intuitive toprogrammers with a mathematical backgroundthough list comprehensions can make our code more succinct it isimportant to ensure that our ﬁnal code is as readable as possible so verylong single lines of code should be avoided to ensure that our code isuser friendlyunderstanding tuplesa tuple in python looks like thiscoral blue coral staghorn coral pillar coral elkhorn corala tuple is a data structure that is an immutable or unchangeableordered sequence of elements because tuples are immutable their valuescannot be modiﬁedtuples are used for grouping data each element or value that is insideof a tuple is called an itemtuples have values between parentheses separated by commas empty tuples will appear as coral but tuples with even onevalue must use a comma as in coral blue coralif we print the tuple above well receive the following outputwith the tuple still typed by parenthesesprintcoraloutputblue coral staghorn coral pillar coral elkhorn coralwhen thinking about python tuples and other data structures that aretypes of collections it is useful to consider all the different collections youhave on your computer your assortment of ﬁles your song playlistsyour browser bookmarks your emails the collection of videos you canaccess on a streaming service and moretuples are similar to lists but their values cant be modiﬁed because ofthis when you use tuples in your code you are conveying to others thatyou dont intend for there to be changes to that sequence of valuesadditionally because the values do not change your code can beoptimized through the use of tuples in python as the code will beslightly faster for tuples than for listsindexing tuplesas an ordered sequence of elements each item in a tuple can be calledindividually through indexingeach item corresponds to an index number which is an integer valuestarting with the index number 0for the coral tuple the index breakdown looks like thisblue coralstaghorn coralpillar coralelkhorn coral0123the ﬁrst item the string blue coral starts at index 0 and the listends at index 4 with the item elkhorn coralbecause each item in a python tuple has a corresponding indexnumber were able to access itemsnow we can call a discrete item of the tuple by referring to its indexnumberprintcoral2outputpillar coralthe index numbers for this tuple range from 03 as shown in the tableabove so to call any of the items individually we would refer to theindex numbers like thiscoral0 blue coralcoral1 staghorn coralcoral2 pillar coralcoral3 elkhorn coralif we call the tuple coral with an index number of any that is greaterthan 3 it will be out of range as it will not be validprintcoral22outputindexerror tuple index out of rangein addition to positive index numbers we can also access items fromthe tuple with a negative index number by counting backwards from theend of the tuple starting at 1 this is especially useful if we have a longtuple and we want to pinpoint an item towards the end of a tuplefor the same tuple coral the negative index breakdown looks likethisblue coralstaghorn coralpillar coralelkhorn coral4321so if we would like to print out the item blue coral by using itsnegative index number we can do so like thisprintcoral4outputblue coralwe can concatenate string items in a tuple with other strings using the operatorprintthis reef is made up of coral1outputthis reef is made up of staghorn coralwe were able to concatenate the string item at index number 0 with thestring this reef is made up of we can also use the operatorto concatenate 2 or more tuples togetherwith index numbers that correspond to items within a tuple wereable to access each item of a tuple discretelyslicing tupleswe can use indexing to call out a few items from the tuple slices allow usto call multiple values by creating a range of index numbers separated bya colon xylets say we would like to just print the middle items of coral we cando so by creating a sliceprintcoral13outputstaghorn coral pillar coralwhen creating a slice as in 13 the ﬁrst index number is where theslice starts inclusive and the second index number is where the sliceends exclusive which is why in our example above the items atposition 1 and 2 are the items that print outif we want to include either end of the list we can omit one of thenumbers in the tuplexy syntax for example if we want to print theﬁrst 3 items of the tuple coral which would be blue coral staghorn coral pillar coral we can do so by typingprintcoral3outputblue coral staghorn coral pillar coralthis printed the beginning of the tuple stopping right before index 3to include all the items at the end of a tuple we would reverse thesyntaxprintcoral1outputstaghorn coral pillar coral elkhorn coralwe can also use negative index numbers when slicing tuples just likewith positive index numbersprintcoral31printcoral2outputstaghorn coral pillar coralpillar coral elkhorn coralone last parameter that we can use with slicing is called stride whichrefers to how many items to move forward after the ﬁrst item is retrievedfrom the tupleso far we have omitted the stride parameter and python defaults tothe stride of 1 so that every item between two index numbers isretrievedthe syntax for this construction is tuplexyz with z referring tostride lets make a larger list then slice it and give the stride a value of2numbers 0 1 2 3 4 5 6 7 8 9 10 11 12printnumbers1112output1 3 5 7 9our construction numbers1112 prints the values between indexnumbers inclusive of 1 and exclusive of 11 then the stride value of 2tells the program to print out only every other itemwe can omit the ﬁrst two parameters and use stride alone as aparameter with the syntax tuplezprintnumbers3output0 3 6 9 12by printing out the tuple numbers with the stride set to 3 only everythird item is printed0 1 2 3 4 5 6 7 8 9 10 11 12slicing tuples with both positive and negative index numbers andindicating stride provides us with the control to receive the output weretrying to achieveconcatenating and multiplying tuplesoperators can be used to concatenate or multiply tuples concatenationis done with the operator and multiplication is done with the operatorthe operator can be used to concatenate two or more tuples togetherwe can assign the values of two existing tuples to a new tuplecoral blue coral staghorn coral pillar coral elkhorn coralkelp wakame alaria deepsea tangle macrocystiscoral_kelp coral kelpprintcoral_kelpoutputblue coral staghorn coral pillar coral elkhorn coral wakame alaria deepsea tangle macrocystisbecause the operator can concatenate it can be used to combinetuples to form a new tuple though it can not modify an existing tuplethe operator can be used to multiply tuples perhaps you need tomake copies of all the ﬁles in a directory onto a server or share a playlistwith friends in these cases you would need to multiply collections ofdatalets multiply the coral tuple by 2 and the kelp tuple by 3 andassign those to new tuplesmultiplied_coral coral 2multiplied_kelp kelp 3printmultiplied_coralprintmultiplied_kelpoutputblue coral staghorn coral pillar coral elkhorn coral blue coral staghorn coral pillar coral elkhorn coralwakame alaria deepsea tangle macrocystis wakame alaria deepsea tangle macrocystis wakame alaria deepsea tangle macrocystisby using the operator we can replicate our tuples by the number oftimes we specify creating new tuples based on the original datasequenceexisting tuples can be concatenated or multiplied to form new tuplesthrough using the and operatorstuple functionsthere are a few builtin functions that you can use to work with tupleslets look at a few of themlenlike with strings and lists we can calculate the length of a tuple by usinglen where we pass the tuple as a parameter as inlencoralthis function is useful for when you need to enforce minimum ormaximum collection lengths for example or to compare sequenced dataif we print out the length for our tuples kelp and numbers wellreceive the following outputprintlenkelpprintlennumbersoutput413we receive the above output because the tuple kelp has 4 itemskelp wakame alaria deepsea tangle macrocystisand the tuple numbers has 13 itemsnumbers 0 1 2 3 4 5 6 7 8 9 10 11 12although these examples have relatively few items the lenfunction provides us with the opportunity to see how many items are inlarge tuplesmax and minwhen we work with tuples composed of numeric items includingintegers and ﬂoats we can use the max and min functions to ﬁndthe highest and lowest values contained in the respective tuplethese functions allow us to ﬁnd out information about quantitativedata such as test scores temperatures prices etclets look at a tuple comprised of ﬂoatsmore_numbers 1113 3487 9559 8249 4273 1112 9557to get the max we would pass the tuple into the function as in maxmore_numbers well combine this with the print function sothat we can output our resultsprintmaxmore_numbersoutput9559the max function returned the highest value in our tuplesimilarly we can use the min functionprintminmore_numbersoutput1112here the smallest ﬂoat was found in the tuple and printed outjust like with the len function the max and min functions canbe very useful when working with tuples that contain many valueshow tuples differ from liststhe primary way in which tuples are different from lists is that theycannot be modiﬁed this means that items can not be added to orremoved from tuples and items can not be replaced within tuplesyou can however concatenate 2 or more tuples to form a new tuplelets consider our coral tuplecoral blue coral staghorn coral pillar coral elkhorn coralsay we want to replace the item blue coral with a different itemcalled black coral if we try to change that output the same waywe do with a list by typingcoral0 black coralwe will receive an error as our outputoutputtypeerror tuple object does not support item assignmentthis is because tuples can not be modiﬁedif we create a tuple and decide what we really need is a list we canconvert it to a list to convert a tuple to a list we can do so with listlistcoraland now our coral data type will be a listcoral blue coral staghorn coral pillar coralwe can see that the tuple was converted to a list because theparentheses changed to square bracketslikewise we can convert lists to tuples with tupleyou can learn more about data type conversion by reading how toconvert data types in python 3conclusionthe tuple data type is a sequenced data type that can not be modiﬁedoffering optimization to your programs by being a somewhat faster typethan lists for python to process when others collaborate with you onyour code your use of tuples will convey to them that you dont intendfor those sequences of values to be modiﬁedthis tutorial covered the basic features of tuples including indexingslicing and concatenating tuples and showing builtin functions that areavailableunderstanding dictionariesthe dictionary is pythons builtin mapping type dictionaries map keysto values and these keyvalue pairs provide a useful way to store data inpythontypically used to hold data that are related such as the informationcontained in an id or a user proﬁle dictionaries are constructed withcurly braces on either side a dictionary looks like thissammy username sammyshark online true followers 987in addition to the curly braces there are also colons throughout thedictionarythe words to the left of the colons are the keys keys can be made upof any immutable data type the keys in the dictionary above are username online followerseach of the keys in the above example are string valuesthe words to the right of the colons are the values values can becomprised of any data type the values in the dictionary above are sammyshark true 987each of these values is either a string boolean or integerlets print out the dictionary sammyprintsammyoutputusername sammyshark followers 987 online truelooking at the output you may notice that the order of the keyvaluepairs has shifted that is because the dictionary data type is unorderedin this regard dictionaries are unlike lists or tuples that preserve orderand can be indexed whenever you print out a dictionary the order willbe arbitrary but the keyvalue pairs will remain intact enabling us toaccess data based on their relational meaningaccessing dictionary elementsbecause the dictionary data structure is unordered we can not call itsvalues by an index number as we can with lists and tuples we canhowever call its values by referencing the related keysaccessing data items with keysbecause dictionaries offer keyvalue pairs for storing data they can beimportant elements in your python programif we want to isolate sammys username we can do so by calling sammyusername lets print that outprintsammyusernameoutputsammysharkdictionaries behave like a database in that instead of calling an integerto get a particular index value as you would with a list you assign avalue to a key and can call that key to get its related valueby invoking the key username we receive the value of that keywhich is sammysharkthe remaining values in the sammy dictionary can similarly be calledusing the same formatsammyfollowers returns 987sammyonline returns trueby making use of dictionaries keyvalue pairs we can reference keysto retrieve valuesusing functions to access elementsin addition to using keys to access values we can also work with somebuiltin functions dictkeys isolates keys dictvaluesisolates values dictitems returns items in a list format of key value tuple pairsto return the keys we would use the dictkeys function in ourexample that would use the variable name and be sammykeys letspass that to a print function and look at the outputprintsammykeysoutputdict_keysfollowers username onlinewe receive output that places the keys within an iterable view object ofthe dict_keys class the keys are then printed within a list formatthis function can be used to query across dictionaries for example wecan take a look at the common keys shared between two dictionary datastructuressammy username sammyshark online true followers 987jesse username joctopus online false points 723for common_key in sammykeys jessekeys printsammycommon_key jessecommon_keythe dictionary sammy and the dictionary jesse are each a user proﬁledictionarytheir proﬁles have different keys however because sammy has asocial proﬁle with associated followers and jesse has a gaming proﬁlewith associated points the 2 keys they have in common are usernameand online status which we can ﬁnd when we run this small programoutputsammyshark joctopustrue falsewe could certainly improve on the program to make the output moreuserreadable but this illustrates that dictkeys can be used tocheck across various dictionaries to see what they share in common ornot this is especially useful for large dictionariessimilarly we can use the dictvalues function to query thevalues in the sammy dictionary which would be constructed as sammyvalues lets print those outsammy username sammyshark online true followers 987printsammyvaluesoutputdict_valuestrue sammyshark 987both the methods keys and values return unsorted lists of thekeys and values present in the sammy dictionary with the view objects of dict_keys and dict_values respectivelyif we are interested in all of the items in a dictionary we can accessthem with the items functionprintsammyitemsoutputdict_itemsonline true username sammyshark followers 987the returned format of this is a list made up of key value tuplepairs with the dict_items view objectwe can iterate over the returned list format with a for loop forexample we can print out each of the keys and values of a givendictionary and then make it more humanreadable by adding a stringfor key value in sammyitems printkey is the key for the value valueoutputonline is the key for the value truefollowers is the key for the value 987username is the key for the value sammysharkthe for loop above iterated over the items within the sammydictionary and printed out the keys and values line by line withinformation to make it easier to understand by humanswe can use builtin functions to access items values and keys fromdictionary data structuresmodifying dictionariesdictionaries are a mutable data structure so you are able to modify themin this section well go over adding and deleting dictionary elementsadding and changing dictionary elementswithout using a function you can add keyvalue pairs to dictionaries byusing the following syntaxdictkey valuewell look at how this works in practice by adding a keyvalue pair to adictionary called usernamesusernames sammy sammyshark jamie mantisshrimp54usernamesdrew squidlyprintusernamesoutputdrew squidly sammy sammyshark jamie mantisshrimp54we see now that the dictionary has been updated with the drew squidly keyvalue pair because dictionaries are unordered this paircan occur anywhere in the dictionary if we use the usernamesdictionary later in our program ﬁle it will include the additional keyvalue pairadditionally this syntax can be used for modifying the value assignedto a key in this case well reference an existing key and pass a differentvalue to itlets consider a dictionary drew that is one of the users on a givennetwork well say that this user got a bump in followers today so weneed to update the integer value passed to the followers key welluse the print function to check that the dictionary was modiﬁeddrew username squidly online true followers 305drewfollowers 342printdrewoutputusername squidly followers 342 online truein the output we see that the number of followers jumped from theinteger value of 305 to 342we can use this method for adding keyvalue pairs to dictionaries withuserinput lets write a quick program usernamespy that runs on thecommand line and allows input from the user to add more names andassociated usernamesusernamespy define original dictionaryusernames sammy sammyshark jamie mantisshrimp54 set up while loop to iteratewhile true request user to enter a name printenter a name assign to name variable name input check whether name is in the dictionary and print feedback if name in usernames printusernamesname is the username of name if the name is not in the dictionary else provide feedback printi dont have name s username what is it take in a new username for the associated name username input assign username value to name key usernamesname username print feedback that the data was updated printdata updatedlets run the program on the command linepython usernamespywhen we run the program well get something like the followingoutputoutputenter a namesammysammyshark is the username of sammyenter a namejessei dont have jesses username what is itjoctopusdata updatedenter a namewhen we are done testing the program we can press ctrl c toescape the program you can set up a trigger to quit the program such astyping the letter q with a conditional statement to improve the codethis shows how you can modify dictionaries interactively with thisparticular program as soon as you exit the program with ctrl cyoull lose all your data unless you implement a way to handle readingand writing ﬁleswe can also add and modify dictionaries by using the dictupdate function this varies from the append functionavailable in listsin the jesse dictionary below lets add the key followers andgive it an integer value with jesseupdate following that lets print the updated dictionaryjesse username joctopus online false points 723jesseupdatefollowers 481printjesseoutputfollowers 481 username joctopus points 723 online falsefrom the output we can see that we successfully added the followers 481 keyvalue pair to the dictionary jessewe can also use the dictupdate method to modify an existingkeyvalue pair by replacing a given value for a speciﬁc keylets change the online status of sammy from true to false in the sammy dictionarysammy username sammyshark online true followers 987sammyupdateonline falseprintsammyoutputusername sammyshark followers 987 online falsethe line sammyupdateonline false references theexisting key online and modiﬁes its boolean value from true to false when we call to print the dictionary we see the update takeplace in the outputto add items to dictionaries or modify values we can use wither the dictkey value syntax or the function dictupdatedeleting dictionary elementsjust as you can add keyvalue pairs and change values within thedictionary data type you can also delete items within a dictionaryto remove a keyvalue pair from a dictionary well use the followingsyntaxdel dictkeylets take the jesse dictionary that represents one of the users wellsay that jesse is no longer using the online platform for playing games sowell remove the item associated with the points key then wellprint the dictionary out to conﬁrm that the item was deletedjesse username joctopus online false points 723 followers 481del jessepointsprintjesseoutputonline false username joctopus followers 481the line del jessepoints removes the keyvalue pair points 723 from the jesse dictionaryif we would like to clear a dictionary of all of its values we can do sowith the dictclear function this will keep a given dictionary incase we need to use it later in the program but it will no longer containany itemslets remove all the items within the jesse dictionaryjesse username joctopus online false points 723 followers 481jesseclearprintjesseoutputthe output shows that we now have an empty dictionary devoid ofkeyvalue pairsif we no longer need a speciﬁc dictionary we can use del to get rid ofit entirelydel jesseprintjessewhen we run a call to print after deleting the jesse dictionarywell receive the following erroroutputnameerror name jesse is not definedbecause dictionaries are mutable data types they can be added tomodiﬁed and have items removed and clearedconclusionthis tutorial went through the dictionary data structure in pythondictionaries are made up of keyvalue pairs and provide a way to storedata without relying on indexing this allows us to retrieve values basedon their meaning and relation to other data typesfrom here you can learn more about other data types in ourunderstanding data types tutorialyou can see the dictionary data type used in programming projectssuch as web scraping with scrapyhow to import modulesthe python programming language comes with a variety of builtinfunctions among these are several common functions including print which prints expressions out abs which returns theabsolute value of a number int which converts another data type toan integer len which returns the length of a sequence or collectionthese builtin functions however are limited and we can make use ofmodules to make more sophisticated programsmodules are python py ﬁles that consist of python code any pythonﬁle can be referenced as a module a python ﬁle called hellopy has themodule name of hello that can be imported into other python ﬁles orused on the python command line interpreter you can learn aboutcreating your own modules by reading how to write modules in python3modules can deﬁne functions classes and variables that you canreference in other python py ﬁles or via the python command lineinterpreterin python modules are accessed by using the import statementwhen you do this you execute the code of the module keeping thescopes of the deﬁnitions so that your current ﬁles can make use of thesewhen python imports a module called hello for example theinterpreter will ﬁrst search for a builtin module called hello if a builtin module is not found the python interpreter will then search for a ﬁlenamed hellopy in a list of directories that it receives from the syspath variablethis tutorial will walk you through checking for and installingmodules importing modules and aliasing moduleschecking for and installing modulesthere are a number of modules that are built into the python standardlibrary which contains many modules that provide access to systemfunctionality or provide standardized solutions the python standardlibrary is part of every python installationto check that these python modules are ready to go enter into yourlocal python 3 programming environment or serverbased programmingenvironment and start the python interpreter in your command line likesomy_env sammyubuntuenvironments pythonfrom within the interpreter you can run the import statement tomake sure that the given module is ready to be called as in import mathsince math is a builtin module your interpreter should complete thetask with no feedback returning to the prompt this means you dontneed to do anything to start using the math modulelets run the import statement with a module that you may not haveinstalled like the 2d plotting library matplotlib import matplotlibif matplotlib is not installed youll receive an error like thisoutputimporterror no module named matplotlibyou can deactivate the python interpreter with ctrl d and theninstall matplotlib with pipnext we can use pip to install the matplotlib modulemy_env sammyubuntuenvironments pip install matplotlibonce it is installed you can import matplotlib in the pythoninterpreter using import matplotlib and it will complete withouterrorimporting modulesto make use of the functions in a module youll need to import themodule with an import statementan import statement is made up of the import keyword along withthe name of the modulein a python ﬁle this will be declared at the top of the code under anyshebang lines or general commentsso in the python program ﬁle my_rand_intpy we would importthe random module to generate random numbers in this mannermy_rand_intpyimport randomwhen we import a module we are making it available to us in ourcurrent program as a separate namespace this means that we will haveto refer to the function in dot notation as in modulefunctionin practice with the example of the random module this may look likea function such as randomrandint which calls the function toreturn a random integer or randomrandrange which calls thefunction to return a random element from a speciﬁed rangelets create a for loop to show how we will call a function of the random module within our my_rand_intpy programmy_rand_intpyimport randomfor i in range10 printrandomrandint1 25this small program ﬁrst imports the random module on the ﬁrst linethen moves into a for loop which will be working with 10 elementswithin the loop the program will print a random integer within therange of 1 through 25 inclusive the integers 1 and 25 are passed to randomrandint as its parameterswhen we run the program with python my_rand_intpy wellreceive 10 random integers as output because these are random youlllikely get different integers each time you run the program but theylllook something like thisoutput69114322101159the integers should never go below 1 or above 25if you would like to use functions from more than one module youcan do so by adding multiple import statementsmy_rand_intpyimport randomimport mathyou may see programs that import multiple modules with commasseparating them as in import random math but this is notconsistent with the pep 8 style guideto make use of our additional module we can add the constant pifrom math to our program and decrease the number of random integersprinted outmy_rand_intpyimport randomimport mathfor i in range5 printrandomrandint1 25printmathpinow when we run our program well receive output that looks likethis with an approximation of pi as our last line of outputoutput1810713103141592653589793the import statement allows you to import one or more modules intoyour python program letting you make use of the deﬁnitionsconstructed in those modulesusing from importto refer to items from a module within your programs namespace youcan use the from import statement when you import modules thisway you can refer to the functions by name rather than through dotnotationin this construction you can specify which deﬁnitions to referencedirectlyin other programs you may see the import statement take inreferences to everything deﬁned within the module by using an asterisk as a wildcard but this is discouraged by pep 8lets ﬁrst look at importing one speciﬁc function randint from therandom modulemy_rand_intpyfrom random import randinthere we ﬁrst call the from keyword then random for the modulenext we use the import keyword and call the speciﬁc function wewould like to usenow when we implement this function within our program we willno longer write the function in dot notation as randomrandint butinstead will just write randintmy_rand_intpyfrom random import randintfor i in range10 printrandint1 25when you run the program youll receive output similar to what wereceived earlierusing the from import construction allows us to reference thedeﬁned elements of a module within our programs namespace lettingus avoid dot notationaliasing modulesit is possible to modify the names of modules and their functions withinpython by using the as keywordyou may want to change a name because you have already used thesame name for something else in your program another module youhave imported also uses that name or you may want to abbreviate alonger name that you are using a lotthe construction of this statement looks like thisimport module as another_namelets modify the name of the math module in our my_mathpyprogram ﬁle well change the module name of math to m in order toabbreviate it our modiﬁed program will look like thismy_mathpyimport math as mprintmpiprintmewithin the program we now refer to the pi constant as mpi ratherthan mathpifor some modules it is commonplace to use aliases the matplotlibpyplot modules ofﬁcial documentation calls for use of plt as an aliasimport matplotlibpyplot as pltthis allows programmers to append the shorter word plt to any ofthe functions available within the module as in pltshow you cansee this alias import statement in use within our how to plot data inpython 3 using matplotlib tutorialconclusionwhen we import modules were able to call functions that are not builtinto python some modules are installed as part of python and some wewill install through pipmaking use of modules allows us to make our programs more robustand powerful as were leveraging existing code we can also create ourown modules for ourselves and for other programmers to use in futureprogramshow to write modulespython modules are py ﬁles that consist of python code any pythonﬁle can be referenced as a modulesome modules are available through the python standard library andare therefore installed with your python installation others can beinstalled with pythons package manager pip additionally you cancreate your own python modules since modules are comprised of pythonpy ﬁlesthis tutorial will guide you through writing python modules for usewithin other programming ﬁleswriting and importing moduleswriting a module is just like writing any other python ﬁle modules cancontain deﬁnitions of functions classes and variables that can then beutilized in other python programsfrom our python 3 local programming environment or serverbasedprogramming environment lets start by creating a ﬁle hellopy thatwell later import into another ﬁleto begin well create a function that prints hello worldhellopy define a functiondef world printhello worldif we run the program on the command line with python hellopynothing will happen since we have not told the program to do anythinglets create a second ﬁle in the same directory called main_programpy so that we can import the module we just createdand then call the function this ﬁle needs to be in the same directory sothat python knows where to ﬁnd the module since its not a builtinmodulemain_programpy import hello moduleimport hello call functionhelloworldbecause we are importing a module we need to call the function byreferencing the module name in dot notationwe could instead import the module as from hello import worldand call the function directly as world you can learn more about thismethod by reading how to using from import when importingmodulesnow we can run the program on the command linepython main_programpywhen we do well receive the following outputoutputhello worldto see how we can use variables in a module lets add a variabledeﬁnition in our hellopy ﬁlehellopy define a functiondef world printhello world define a variableshark sammynext well call the variable in a print function within our main_programpy ﬁlemain_programpy import hello moduleimport hello call functionhelloworld print variableprinthellosharkonce we run the program again well receive the following outputoutputhello worldsammyfinally lets also deﬁne a class in the hellopy ﬁle well create theclass octopus with name and color attributes and a function that willprint out the attributes when calledhellopy define a functiondef world printhello world define a variableshark sammy define a classclass octopus def __init__self name color selfcolor color selfname name def tell_me_about_the_octopusself printthis octopus is selfcolor printselfname is the octopuss namewell now add the class to the end of our main_programpy ﬁlemain_programpy import hello moduleimport hello call functionhelloworld print variableprinthelloshark call classjesse hellooctopusjesse orangejessetell_me_about_the_octopusonce we have called the octopus class with hellooctopus wecan access the functions and attributes of the class within the main_programpy ﬁles namespace this lets us write jessetell_me_about_the_octopus on the last line withoutinvoking hello we could also for example call one of the classsattributes such as jessecolor without referencing the name of the hello modulewhen we run the program well receive the following outputoutputhello worldsammythis octopus is orangejesse is the octopuss nameit is important to keep in mind that though modules are oftendeﬁnitions they can also implement code to see how this works letsrewrite our hellopy ﬁle so that it implements the world functionhellopy define a functiondef world printhello world call function within moduleworldwe have also deleted the other deﬁnitions in the ﬁlenow in our main_programpy ﬁle well delete every line except forthe import statementmain_programpy import hello moduleimport hellowhen we run main_programpy well receive the following outputoutputhello worldthis is because the hello module implemented the world functionwhich is then passed to main_programpy and executes when main_programpy runsa module is a python program ﬁle composed of deﬁnitions or codethat you can leverage in other python program ﬁlesaccessing modules from another directorymodules may be useful for more than one programming project and inthat case it makes less sense to keep a module in a particular directorythats tied to a speciﬁc projectif you want to use a python module from a location other than thesame directory where your main program is you have a few optionsappending pathsone option is to invoke the path of the module via the programming ﬁlesthat use that module this should be considered more of a temporarysolution that can be done during the development process as it does notmake the module available systemwideto append the path of a module to another programming ﬁle youllstart by importing the sys module alongside any other modules youwish to use in your main program ﬁlethe sys module is part of the python standard library and providessystemspeciﬁc parameters and functions that you can use in yourprogram to set the path of the module you wish to implementfor example lets say we moved the hellopy ﬁle and it is now onthe path usrsammy while the main_programpy ﬁle is in anotherdirectoryin our main_programpy ﬁle we can still import the hello moduleby importing the sys module and then appending usrsammy to thepath that python checks for ﬁlesmain_programpyimport syssyspathappendusrsammyimport helloas long as you correctly set the path for the hellopy ﬁle youll beable to run the main_programpy ﬁle without any errors and receivethe same output as above when hellopy was in the same directoryadding the module to the python patha second option that you have is to add the module to the path wherepython checks for modules and packages this is a more permanentsolution that makes the module available environmentwide or systemwide making this method more portableto ﬁnd out what path python checks run the python interpreter fromyour programming environmentpythonnext import the sys module import systhen have python print out the system path printsyspathhere youll receive some output with at least one system path ifyoure in a programming environment you may receive several youllwant to look for the one that is in the environment youre currentlyusing but you may also want to add the module to your main systempython path what youre looking for will be similar to thisoutputusrsammymy_envlibpython35sitepackagesnow you can move your hellopy ﬁle into that directory once thatis complete you can import the hello module as usualmain_programpyimport hellowhen you run your program it should complete without errormodifying the path of your module can ensure that you can access themodule regardless of what directory you are in this is useful especiallyif you have more than one project referencing a particular moduleconclusionwriting a python module is the same as writing any other python pyﬁle this tutorial covered how to write deﬁnitions within a module makeuse of those deﬁnitions within another python programming ﬁle andwent over options of where to keep the module in order to access ityou can learn more about installing and importing modules by readinghow to import modules in python 3how to write conditional statementsconditional statements are part of every programming language withconditional statements we can have code that sometimes runs and atother times does not run depending on the conditions of the program atthat timewhen we fully execute each statement of a program moving from thetop to the bottom with each line executed in order we are not asking theprogram to evaluate speciﬁc conditions by using conditional statementsprograms can determine whether certain conditions are being met andthen be told what to do nextlets look at some examples where we would use conditionalstatementsif the student receives over 65 on her test report that her gradepasses if not report that her grade failsif he has money in his account calculate interest if he doesntcharge a penalty feeif they buy 10 oranges or more calculate a discount of 5 if theybuy fewer then dontthrough evaluating conditions and assigning code to run based onwhether or not those conditions are met we are writing conditional codethis tutorial will take you through writing conditional statements inthe python programming languageif statementwe will start with the if statement which will evaluate whether astatement is true or false and run code only in the case that the statementis truein a plain text editor open a ﬁle and write the following codegrade 70if grade 65 printpassing gradewith this code we have the variable grade and are giving it theinteger value of 70 we are then using the if statement to evaluatewhether or not the variable grade is greater than or equal to 65 if itdoes meet this condition we are telling the program to print out thestring passing gradesave the program as gradepy and run it in a local programmingenvironment from a terminal window with the command python gradepyin this case the grade of 70 does meet the condition of being greaterthan or equal to 65 so you will receive the following output once you runthe programoutputpassing gradelets now change the result of this program by changing the value ofthe grade variable to 60gradepygrade 60if grade 65 printpassing gradewhen we save and run this code we will receive no output becausethe condition was not met and we did not tell the program to executeanother statementto give one more example let us calculate whether a bank accountbalance is below 0 lets create a ﬁle called accountpy and write thefollowing programaccountpybalance 5if balance 0 printbalance is below 0 add funds now or you will be charged a penaltywhen we run the program with python accountpy well receivethe following outputoutputbalance is below 0 add funds now or you will be charged a penaltyin the program we initialized the variable balance with the value of 5 which is less than 0 since the balance met the condition of the ifstatement balance 0 once we save and run the code we willreceive the string output again if we change the balance to 0 or apositive number we will receive no outputelse statementit is likely that we will want the program to do something even when an if statement evaluates to false in our grade example we will wantoutput whether the grade is passing or failingto do this we will add an else statement to the grade conditionabove that is constructed like thisgradepygrade 60if grade 65 printpassing gradeelse printfailing gradesince the grade variable above has the value of 60 the if statementevaluates as false so the program will not print out passing gradethe else statement that follows tells the program to do somethinganywaywhen we save and run the program well receive the followingoutputoutputfailing gradeif we then rewrite the program to give the grade a value of 65 orhigher we will instead receive the output passing gradeto add an else statement to the bank account example we rewrite thecode like thisaccountpybalance 522if balance 0 printbalance is below 0 add funds now or you will be charged a penaltyelse printyour balance is 0 or aboveoutputyour balance is 0 or abovehere we changed the balance variable value to a positive number sothat the else statement will print to get the ﬁrst if statement to printwe can rewrite the value to a negative numberby combining an if statement with an else statement you areconstructing a twopart conditional statement that will tell the computerto execute certain code whether or not the if condition is metelse if statementso far we have presented a boolean option for conditional statementswith each if statement evaluating to either true or false in many caseswe will want a program that evaluates more than two possible outcomesfor this we will use an else if statement which is written in python as elif the elif or else if statement looks like the if statement and willevaluate another conditionin the bank account program we may want to have three discreteoutputs for three different situationsthe balance is below 0the balance is equal to 0the balance is above 0the elif statement will be placed between the if statement and the else statement as followsaccountpy if balance 0 printbalance is below 0 add funds now or you will be charged a penaltyelif balance 0 printbalance is equal to 0 add funds soonelse printyour balance is 0 or abovenow there are three possible outputs that can occur once we run theprogram if the variable balance is equal to 0 we will receive theoutput from the elif statement balance is equal to 0 add funds soon if the variable balance is set to a positive number wewill receive the output from the else statement your balance is 0 or above if the variable balance is set to a negative number theoutput will be the string from the if statement balance is below 0 add funds now or you will be charged a penaltywhat if we want to have more than three possibilities though we cando this by writing more than one elif statement into our codein the gradepy program lets rewrite the code so that there are a fewletter grades corresponding to ranges of numerical grades90 or above is equivalent to an a grade8089 is equivalent to a b grade7079 is equivalent to a c grade6569 is equivalent to a d grade64 or below is equivalent to an f gradeto run this code we will need one if statement three elifstatements and an else statement that will handle all failing caseslets rewrite the code from the example above to have strings thatprint out each of the letter grades we can keep our else statement thesamegradepy if grade 90 printa gradeelif grade 80 printb gradeelif grade 70 printc gradeelif grade 65 printd gradeelse printfailing gradesince elif statements will evaluate in order we can keep ourstatements pretty basic this program is completing the following steps1 if the grade is greater than 90 the program will print a grade ifthe grade is less than 90 the program will continue to the nextstatement2 if the grade is greater than or equal to 80 the program will print b grade if the grade is 79 or less the program will continue to thenext statement3 if the grade is greater than or equal to 70 the program will print c grade if the grade is 69 or less the program will continue to thenext statement4 if the grade is greater than or equal to 65 the program will print d grade if the grade is 64 or less the program will continue to thenext statement5 the program will print failing grade because all of the aboveconditions were not metnested if statementsonce you are feeling comfortable with the if elif and elsestatements you can move on to nested conditional statements we canuse nested if statements for situations where we want to check for asecondary condition if the ﬁrst condition executes as true for this wecan have an ifelse statement inside of another ifelse statement letslook at the syntax of a nested if statementif statement1 outer if statement printtrue if nested_statement nested if statement printyes else nested else statement printnoelse outer else statement printfalsea few possible outputs can result from this codeif statement1 evaluates to true the program will then evaluatewhether the nested_statement also evaluates to true if bothcases are true the output will beoutputtrueyesif however statement1 evaluates to true but nested_statement evaluates to false then the output will beoutputtruenoand if statement1 evaluates to false the nested ifelse statementwill not run so the else statement will run alone and the outputwill beoutputfalsewe can also have multiple if statements nested throughout our codeif statement1 outer if printhello world if nested_statement1 first nested if printyes elif nested_statement2 first nested elif printmaybe else first nested else printnoelif statement2 outer elif printhello galaxy if nested_statement3 second nested if printyes elif nested_statement4 second nested elif printmaybe else second nested else printnoelse outer else statementhello universein the above code there is a nested if statement inside each ifstatement in addition to the elif statement this will allow for moreoptions within each conditionlets look at an example of nested if statements with our gradepyprogram we can check for whether a grade is passing ﬁrst greater thanor equal to 65 then evaluate which letter grade the numerical gradeshould be equivalent to if the grade is not passing though we do notneed to run through the letter grades and instead can have the programreport that the grade is failing our modiﬁed code with the nested ifstatement will look like thisgradepy if grade 65 printpassing grade of if grade 90 printa elif grade 80 printb elif grade 70 printc elif grade 65 printdelse printfailing gradeif we run the code with the variable grade set to the integer value 92the ﬁrst condition is met and the program will print out passing grade of next it will check to see if the grade is greater than or equalto 90 and since this condition is also met it will print out aif we run the code with the grade variable set to 60 then the ﬁrstcondition is not met so the program will skip the nested if statementsand move down to the else statement with the program printing out failing gradewe can of course add even more options to this and use a second layerof nested if statements perhaps we will want to evaluate for grades ofa a and a separately we can do so by ﬁrst checking if the grade ispassing then checkingto see if the grade is 90 or above then checkingtosee if the grade is over 96 for an a for instancegradepy if grade 65 printpassing grade of if grade 90 if grade 96 printa elif grade 93 and grade 96 printa elif grade 90 printa in the code above for a grade variable set to 96 the program will runthe following1 check if the grade is greater than or equal to 65 true2 print out passing grade of3 check if the grade is greater than or equal to 90 true4 check if the grade is greater than 96 false5 check if the grade is greater than 93 and also less than or equal to 96true6 print a7 leave these nested conditional statements and continue withremaining codethe output of the program for a grade of 96 therefore looks like thisoutputpassing grade ofanested if statements can provide the opportunity to add severalspeciﬁc levels of conditions to your codeconclusionby using conditional statements like the if statement you will havegreater control over what your program executes conditional statementstell the program to evaluate whether a certain condition is being met ifthe condition is met it will execute speciﬁc code but if it is not met theprogram will continue to move down to other codeto continue practicing conditional statements try using differentoperators combining operators with and or or and using conditionalstatements alongside loops you can also go through our tutorial on howto make a simple calculator program to gain more familiarity withconditional statementshow to construct while loopscomputer programs are great to use for automating and repeating tasksso that we dont have to one way to repeat similar tasks is throughusing loops well be covering pythons while loop in this tutoriala while loop implements the repeated execution of code based on agiven boolean condition the code that is in a while block will executeas long as the while statement evaluates to trueyou can think of the while loop as a repeating conditional statementafter an if statement the program continues to execute code but in a while loop the program jumps back to the start of the while statementuntil the condition is falseas opposed to for loops that execute a certain number of times whileloops are conditionally based so you dont need to know how manytimes to repeat the code going inwhile loopin python while loops are constructed like sowhile a condition is true do somethingthe something that is being done will continue to be executed until thecondition that is being assessed is no longer truelets create a small program that executes a while loop in thisprogram well ask for the user to input a password while going throughthis loop there are two possible outcomesif the password is correct the while loop will exitif the password is not correct the while loop will continue toexecutewell create a ﬁle called passwordpy in our text editor of choice andbegin by initializing the variable password as an empty stringpasswordpypassword the empty string will be used to take in input from the user within the while loopnow well construct the while statement along with its conditionpasswordpypassword while password passwordhere the while is followed by the variable password we are lookingto see if the variable password is set to the string password based onthe user input later but you can choose whichever string youd likethis means that if the user inputs the string password then the loopwill stop and the program will continue to execute any code outside ofthe loop however if the string that the user inputs is not equal to thestring password the loop will continuenext well add the block of code that does something within the while looppasswordpypassword while password password printwhat is the password password inputinside of the while loop the program runs a print statement thatprompts for the password then the variable password is set to theusers input with the input functionthe program will check to see if the variable password is assigned tothe string password and if it is the while loop will end lets give theprogram another line of code for when that happenspasswordpypassword while password password printwhat is the password password inputprintyes the password is password you may enterthe last print statement is outside of the while loop so when theuser enters password as the password they will see the ﬁnal printstatement outside of the loophowever if the user never enters the word password they will neverget to the last print statement and will be stuck in an inﬁnite loopan inﬁnite loop occurs when a program keeps executing within oneloop never leaving it to exit out of inﬁnite loops on the command linepress ctrl csave the program and run itpython passwordpyyoull be prompted for a password and then may test it with variouspossible inputs here is sample output from the programoutputwhat is the passwordhellowhat is the passwordsammywhat is the passwordpasswordwhat is the passwordpasswordyes the password is password you may enterkeep in mind that strings are case sensitive unless you also use a stringfunction to convert the string to all lowercase for example beforecheckingexample program with while loopnow that we understand the general premise of a while loop letscreate a commandline guessing game that uses a while loop effectivelyto best understand how this program works you should also read aboutusing conditional statements and converting data typesfirst well create a ﬁle called guesspy in our text editor of choicewe want the computer to come up with random numbers for the user toguess so well import the random module with an import statement ifyoure unfamiliar with this package you can learn more aboutgenerating random numbers from the python docsguesspyimport randomnext well assign a random integer to the variable number and keepit in the range of 1 through 25 inclusive in the hope that it does notmake the game too difﬁcultguesspyimport randomnumber randomrandint1 25at this point we can get into our while loop ﬁrst initializing avariable and then creating the loopguesspyimport randomnumber randomrandint1 25number_of_guesses 0while number_of_guesses 5 printguess a number between 1 and 25 guess input guess intguess number_of_guesses number_of_guesses 1 if guess number breakweve initialized the variable number_of_guesses at 0 so that weincrease it with each iteration of our loop so that we dont have aninﬁnite loop then we added the while statement so that the number_of_guesses is limited to 5 total after the ﬁfth guess the userwill return to the command line and for now if the user enterssomething other than an integer theyll receive an errorwithin the loop we added a print statement to prompt the user toenter a number which we took in with the input function and set tothe guess variable then we converted guess from a string to anintegerbefore the loop is over we also want to increase the number_of_guesses variable by 1 so that we can iterate through theloop 5 timesfinally we write a conditional if statement to see if the guess thatthe user made is equivalent to the number that the computer generatedand if so we use a break statement to come out of the loopthe program is fully functioning and we can run it with the followingcommandpython guesspythough it works right now the user never knows if their guess iscorrect and they can guess the full 5 times without ever knowing if theygot it right sample output of the current program looks like thisoutputguess a number between 1 and 2511guess a number between 1 and 2519guess a number between 1 and 2522guess a number between 1 and 253guess a number between 1 and 258lets add some conditional statements outside of the loop so that theuser is given feedback as to whether they correctly guess the number ornot these will go at the end of our current ﬁleguesspyimport randomnumber randomrandint1 25number_of_guesses 0while number_of_guesses 5 printguess a number between 1 and 25 guess input guess intguess number_of_guesses number_of_guesses 1 if guess number breakif guess number printyou guessed the number in strnumber_of_guesses trieselse printyou did not guess the number the number was strnumberat this point the program will tell the user if they got the number rightor wrong which may not happen until the end of the loop when the useris out of guessesto give the user a little help along the way lets add a few moreconditional statements into the while loop these can tell the userwhether their number was too low or too high so that they can be morelikely to guess the correct number well add these before our if guess number lineguesspyimport randomnumber randomrandint1 25number_of_guesses 0while number_of_guesses 5 printguess a number between 1 and 25 guess input guess intguess number_of_guesses number_of_guesses 1 if guess number printyour guess is too low if guess number printyour guess is too high if guess number breakif guess number printyou guessed the number in strnumber_of_guesses trieselse printyou did not guess the number the number was strnumberwhen we run the program again with python guesspy we see thatthe user gets more guided assistance in their guessing so if therandomlygenerated number is 12 and the user guesses 18 they will betold that their guess is too high and they can adjust their next guessaccordinglythere is more that can be done to improve the code including errorhandling for when the user does not input an integer but in this examplewe see a while loop at work in a short commandline programconclusionthis tutorial went over how while loops work in python and how toconstruct them while loops continue to loop through a block of codeprovided that the condition set in the while statement is truefrom here you can continue to learn about looping by readingtutorials on for loops and break continue and pass statementshow to construct for loopsusing loops in computer programming allows us to automate and repeatsimilar tasks multiple times in this tutorial well be covering pythonsfor loopa for loop implements the repeated execution of code based on a loopcounter or loop variable this means that for loops are used most oftenwhen the number of iterations is known before entering the loop unlikewhile loops which are conditionally basedfor loopsin python for loops are constructed like sofor iterating variable in sequence do somethingthe something that is being done will be executed until the sequence isoverlets look at a for loop that iterates through a range of valuesfor i in range05 printiwhen we run this program the output looks like thisoutput01234this for loop sets up i as its iterating variable and the sequenceexists in the range of 0 to 5then within the loop we print out one integer per loop iteration keepin mind that in programming we tend to begin at index 0 so that is whyalthough 5 numbers are printed out they range from 04youll commonly see and use for loops when a program needs torepeat a block of code a number of timesfor loops using rangeone of pythons builtin immutable sequence types is range in loopsrange is used to control how many times the loop will be repeatedwhen working with range you can pass between 1 and 3 integerarguments to itstart states the integer value at which the sequence begins if this isnot included then start begins at 0stop is always required and is the integer that is counted up to butnot includedstep sets how much to increase or decrease in the case of negativenumbers the next iteration if this is omitted then step defaults to 1well look at some examples of passing different arguments to rangefirst lets only pass the stop argument so that our sequence set up is rangestopfor i in range6 printiin the program above the stop argument is 6 so the code will iteratefrom 06 exclusive of 6output012345next well look at rangestart stop with values passed forwhen the iteration should start and for when it should stopfor i in range2025 printihere the range goes from 20 inclusive to 25 exclusive so the outputlooks like thisoutput2021222324the step argument of range is similar to specifying stride whileslicing strings in that it can be used to skip values within the sequencewith all three arguments step comes in the ﬁnal position rangestart stop step first lets use a step with a positivevaluefor i in range0153 printiin this case the for loop is set up so that the numbers from 0 to 15print out but at a step of 3 so that only every third number is printedlike sooutput036912we can also use a negative value for our step argument to iteratebackwards but well have to adjust our start and stop argumentsaccordinglyfor i in range100010 printihere 100 is the start value 0 is the stop value and 10 is the rangeso the loop begins at 100 and ends at 0 decreasing by 10 with eachiteration we can see this occur in the outputoutput100908070605040302010when programming in python for loops often make use of the range sequence type as its parameters for iterationfor loops using sequential data typeslists and other data sequence types can also be leveraged as iterationparameters in for loops rather than iterating through a range youcan deﬁne a list and iterate through that listwell assign a list to a variable and then iterate through the listsharks hammerhead great white dogfish frilled bullhead requiemfor shark in sharks printsharkin this case we are printing out each item in the list though we usedthe variable shark we could have called the variable any other validvariable name and we would get the same outputoutputhammerheadgreat whitedogfishfrilledbullheadrequiemthe output above shows that the for loop iterated through the listand printed each item from the list per linelists and other sequencebased data types like strings and tuples arecommon to use with loops because they are iterable you can combinethese data types with range to add items to a list for examplesharks hammerhead great white dogfish frilled bullhead requiemfor item in rangelensharks sharksappendsharkprintsharksoutputhammerhead great white dogfish frilled bullhead requiem shark shark shark shark shark sharkhere we have added a placeholder string of shark for each item ofthe length of the sharks listyou can also use a for loop to construct a list from scratchintegers for i in range10 integersappendiprintintegersin this example the list integers is initialized empty but the forloop populates the list like sooutput0 1 2 3 4 5 6 7 8 9similarly we can iterate through stringssammy sammyfor letter in sammy printletteroutputsammyiterating through tuples is done in the same format as iteratingthrough lists or strings abovewhen iterating through a dictionary its important to keep the key value structure in mind to ensure that you are calling the correct elementof the dictionary here is an example that calls both the key and thevaluesammy_shark name sammy animal shark color blue location oceanfor key in sammy_shark printkey sammy_sharkkeyoutputname sammyanimal sharklocation oceancolor bluewhen using dictionaries with for loops the iterating variablecorresponds to the keys of the dictionary and dictionary_variableiterating_variable corresponds to thevalues in the case above the iterating variable key was used to stand forkey and sammy_sharkkey was used to stand for the valuesloops are often used to iterate and manipulate sequential data typesnested for loopsloops can be nested in python as they can with other programminglanguagesa nested loop is a loop that occurs within another loop structurallysimilar to nested if statements these are constructed like sofor first iterating variable in outer loop outer loop do something optional for second iterating variable in nested loop nested loop do something the program ﬁrst encounters the outer loop executing its ﬁrstiteration this ﬁrst iteration triggers the inner nested loop which thenruns to completion then the program returns back to the top of the outerloop completing the second iteration and again triggering the nestedloop again the nested loop runs to completion and the program returnsback to the top of the outer loop until the sequence is complete or a breakor other statement disrupts the processlets implement a nested for loop so we can take a closer look in thisexample the outer loop will iterate through a list of integers called num_list and the inner loop will iterate through a list of strings called alpha_listnum_list 1 2 3alpha_list a b cfor number in num_list printnumber for letter in alpha_list printletterwhen we run this program well receive the following outputoutput1abc2abc3abcthe output illustrates that the program completes the ﬁrst iteration ofthe outer loop by printing 1 which then triggers completion of the innerloop printing a b c consecutively once the inner loop has completedthe program returns to the top of the outer loop prints 2 then againprints the inner loop in its entirety a b c etcnested for loops can be useful for iterating through items within listscomposed of lists in a list composed of lists if we employ just one forloop the program will output each internal list as an itemlist_of_lists hammerhead great white dogfish0 1 299 88 77for list in list_of_lists printlistoutputhammerhead great white dogfish0 1 299 88 77in order to access each individual item of the internal lists wellimplement a nested for looplist_of_lists hammerhead great white dogfish0 1 299 88 77for list in list_of_lists for item in list printitemoutputhammerheadgreat whitedogfish012998877when we utilize a nested for loop we are able to iterate over theindividual items contained in the listswe can see nested for loops working in use in a working program inour tutorial on the natural language processing toolkit nltkconclusionthis tutorial went over how for loops work in python and how toconstruct them for loops continue to loop through a block of codeprovided a certain number of timesfrom here you can continue to learn about looping by readingtutorials on while loops and break continue and pass statementsto work with for loops in projects follow along with the followingtutorials how to create a twitterbot with python 3 and the tweepylibrary how to work with language data in python 3 using thenatural language toolkit nltk how to graph word frequency usingmatplotlib with python 3how to use break continue and passstatements when working with loopsusing for loops and while loops in python allow you to automate andrepeat tasks in an efﬁcient mannerbut sometimes an external factor may inﬂuence the way your programruns when this occurs you may want your program to exit a loopcompletely skip part of a loop before continuing or ignore that externalfactor you can do these actions with break continue and passstatementsbreak statementin python the break statement provides you with the opportunity toexit out of a loop when an external condition is triggered youll put the break statement within the block of code under your loop statementusually after a conditional if statementlets look at an example that uses the break statement in a for loopnumber 0for number in range10 number number 1 if number 5 break break here printnumber is strnumberprintout of loopin this small program the variable number is initialized at 0 then a for statement constructs the loop as long as the variable number is lessthan 10within the for loop the number increases incrementally by 1 witheach pass because of the line number number 1then there is an if statement that presents the condition that if thevariable number is equivalent to the integer 5 then the loop will breakwithin the loop is also a print statement that will execute witheach iteration of the for loop until the loop breaks since it is after the break statementto see when we are out of the loop we have included a ﬁnal printstatement outside of the for loopwhen we run this code our output will be the followingoutputnumber is 1number is 2number is 3number is 4out of loopthis shows that once the integer number is evaluated as equivalent to5 the loop breaks as the program is told to do so with the breakstatementthe break statement causes a program to break out of a loopcontinue statementthe continue statement gives you the option to skip over the part of aloop where an external condition is triggered but to go on to completethe rest of the loop that is the current iteration of the loop will bedisrupted but the program will return to the top of the loopthe continue statement will be within the block of code under theloop statement usually after a conditional if statementusing the same for loop program as in the break statement sectionabove well use a continue statement rather than a break statementnumber 0for number in range10 number number 1 if number 5 continue continue here printnumber is strnumberprintout of loopthe difference in using the continue statement rather than a breakstatement is that our code will continue despite the disruption when thevariable number is evaluated as equivalent to 5 lets look at our outputoutputnumber is 1number is 2number is 3number is 4number is 6number is 7number is 8number is 9number is 10out of loophere we see that the line number is 5 never occurs in the outputbut the loop continues after that point to print lines for the numbers 610before leaving the loopyou can use the continue statement to avoid deeply nestedconditional code or to optimize a loop by eliminating frequentlyoccurring cases that you would like to rejectthe continue statement causes a program to skip certain factors thatcome up within a loop but then continue through the rest of the looppass statementwhen an external condition is triggered the pass statement allows youto handle the condition without the loop being impacted in any way allof the code will continue to be read unless a break or other statementoccursas with the other statements the pass statement will be within theblock of code under the loop statement typically after a conditional ifstatementusing the same code block as above lets replace the break or continue statement with a pass statementnumber 0for number in range10 number number 1 if number 5 pass pass here printnumber is strnumberprintout of loopthe pass statement occurring after the if conditional statement istelling the program to continue to run the loop and ignore the fact thatthe variable number evaluates as equivalent to 5 during one of itsiterationswell run the program and take a look at the outputoutputnumber is 1number is 2number is 3number is 4number is 5number is 6number is 7number is 8number is 9number is 10out of loopby using the pass statement in this program we notice that theprogram runs exactly as it would if there were no conditional statementin the program the pass statement tells the program to disregard thatcondition and continue to run the program as usualthe pass statement can create minimal classes or act as a placeholderwhen working on new code and thinking on an algorithmic level beforehammering out detailsconclusionthe break continue and pass statements in python will allow you touse for loops and while loops more effectively in your codeyou can see break and pass statements in action in our tutorial howto create a twitterbot with python 3 and the tweepy libraryhow to deﬁne functionsa function is a block of instructions that performs an action and oncedeﬁned can be reused functions make code more modular allowingyou to use the same code over and over againpython has a number of builtin functions that you may be familiarwith includingprint which will print an object to the terminalint which will convert a string or number data type to an integerdata typelen which returns the length of an objectfunction names include parentheses and may include parametersin this tutorial well go over how to deﬁne your own functions to usein your coding projectsdeﬁning a functionlets start with turning the classic hello world program into afunctionwell create a new text ﬁle in our text editor of choice and call theprogram hellopy then well deﬁne the functiona function is deﬁned by using the def keyword followed by a nameof your choosing followed by a set of parentheses which hold anyparameters the function will take they can be empty and ending with acolonin this case well deﬁne a function named hellohellopydef hellothis sets up the initial statement for creating a functionfrom here well add a second line with a 4space indent to provide theinstructions for what the function does in this case well be printing hello world to the consolehellopydef hello printhello worldfigure classcodeour function is now fully deﬁned but if we run the program at thispoint nothing will happen since we didnt call the functionso outside of our deﬁned function block lets call the function with hellohellopydef hello printhello worldhellofigure classcodenow lets run the programpython hellopyyou should receive the following outputoutputhello worldfunctions can be more complicated than the hello function wedeﬁned above for example we can use for loops conditionalstatements and more within our function blockfor example the function deﬁned below utilizes a conditionalstatement to check if the input for the name variable contains a vowelthen uses a for loop to iterate over the letters in the name stringnamespy define function namesdef names set up name variable with input name strinputenter your name check whether name has a vowel if setaeiouintersectionnamelower printyour name contains a vowel else printyour name does not contain a vowel iterate over name for letter in name printletter call the functionnamesfigure classcodethe names function we deﬁned above sets up a conditionalstatement and a for loop showing how code can be organized within afunction deﬁnition however depending on what we intend with ourprogram and how we want to set up our code we may want to deﬁne theconditional statement and the for loop as two separate functionsdeﬁning functions within a program makes our code modular andreusable so that we can call the same functions without rewriting themworking with parametersso far we have looked at functions with empty parentheses that do nottake arguments but we can deﬁne parameters in function deﬁnitionswithin their parenthesesa parameter is a named entity in a function deﬁnition specifying anargument that the function can acceptlets create a small program that takes in parameters x y and z wellcreate a function that adds the parameters together in differentconﬁgurations the sums of these will be printed by the function thenwell call the function and pass numbers into the functionadd_numberspydef add_numbersx y z a x y b x z c y z printa b cadd_numbers1 2 3figure classcodewe passed the number 1 in for the x parameter 2 in for the yparameter and 3 in for the z parameter these values correspond witheach parameter in the order they are giventhe program is essentially doing the following math based on thevalues we passed to the parametersa 1 2b 1 3c 2 3the function also prints a b and c and based on the math above wewould expect a to be equal to 3 b to be 4 and c to be 5 lets run theprogrampython add_numberspyoutput3 4 5when we pass 1 2 and 3 as parameters to the add_numbersfunction we receive the expected outputparameters are arguments that are typically deﬁned as variables withinfunction deﬁnitions they can be assigned values when you run themethod passing the arguments into the functionkeyword argumentsin addition to calling parameters in order you can use keywordarguments in a function call in which the caller identiﬁes the argumentsby the parameter namewhen you use keyword arguments you can use parameters out oforder because the python interpreter will use the keywords provided tomatch the values to the parameterslets create a function that will show us proﬁle information for a userwell pass parameters to it in the form of username intended as astring and followers intended as an integerproﬁlepy define function with parametersdef profile_infousername followers printusername username printfollowers strfollowersfigure classcodewithin the function deﬁnition statement username and followersare contained in the parentheses of the profile_info function theblock of the function prints out information about the user as stringsmaking use of the two parametersnow we can call the function and assign parameters to itproﬁlepydef profile_infousername followers printusername username printfollowers strfollowers call function with parameters assigned as aboveprofile_infosammyshark 945 call function with keyword argumentsprofile_infousernamealexanglerfish followers342figure classcodein the ﬁrst function call we have ﬁlled in the information with ausername of sammyshark and followers being 945 in the secondfunction call we used keyword arguments assigning values to theargument variableslets run the programpython profilepyoutputusername sammysharkfollowers 945username alexanglerfishfollowers 342the output shows us the usernames and numbers of followers for bothusersthis also permits us to modify the order of the parameters as in thisexample of the same program with a different callproﬁlepydef profile_infousername followers printusername username printfollowers strfollowers change order of parametersprofile_infofollowers820 usernamecameroncatfishfigure classcodewhen we run the program again with the python profilepycommand well receive the following outputoutputusername cameroncatfishfollowers 820because the function deﬁnition maintains the same order of printstatements if we use keyword arguments it does not matter which orderwe pass them into the function calldefault argument valueswe can also provide default values for one or both of the parameterslets create a default value for the followers parameter with a value of1proﬁlepydef profile_infousername followers1 printusername username printfollowers strfollowersnow we can run the function with only the username functionassigned and the number of followers will automatically default to 1 wecan also still change the number of followers if we would likeproﬁlepydef profile_infousername followers1 printusername username printfollowers strfollowersprofile_infousernamejoctopusprofile_infousernamesammyshark followers945when we run the program with the python profilepy commandwell receive the following outputoutputusername joctopusfollowers 1username sammysharkfollowers 945providing default parameters with values can let us skip deﬁningvalues for each argument that already has a defaultreturning a valueyou can pass a parameter value into a function and a function can alsoproduce a valuea function can produce a value with the return statement which willexit a function and optionally pass an expression back to the caller if youuse a return statement with no arguments the function will return noneso far we have used the print statement instead of the returnstatement in our functions lets create a program that instead of printingwill return a variablein a new text ﬁle called squarepy well create a program thatsquares the parameter x and returns the variable y we issue a call toprint the result variable which is formed by running the squarefunction with 3 passed into itsquarepydef squarex y x 2 return yresult square3printresultfigure classcodewe can run the program and see the outputpython squarepyoutput9the integer 9 is returned as output which is what we would expect byasking python to ﬁnd the square of 3to further understand how the return statement works we cancomment out the return statement in the programsquarepydef squarex y x 2 return yresult square3printresultfigure classcodenow lets run the program againpython squarepyoutputnonewithout using the return statement here the program can not returna value so the value defaults to noneas another example in the add_numberspy program above wecould swap out the print statement for a return statementadd_numberspydef add_numbersx y z a x y b x z c y z return a b csums add_numbers1 2 3printsumsfigure classcodeoutside of the function we set the variable sums equal to the result ofthe function taking in 1 2 and 3 as we did above then we called a printof the sums variablelets run the program again now that it has the return statementpython add_numberspyoutput3 4 5we receive the same numbers 3 4 and 5 as output that we receivedpreviously by using the print statement in the function this time itis delivered as a tuple because the return statements expression list hasat least one commafunctions exit immediately when they hit a return statementwhether or not theyre returning a valuereturn_looppydef loop_five for x in range0 25 printx if x 5 stop function at x 5 return printthis line will not executeloop_fivefigure classcodeusing the return statement within the for loop ends the function sothe line that is outside of the loop will not run if instead we had used a break statement only the loop would have exited at that time and thelast print line would runthe return statement exits a function and may return a value whenissued with a parameterusing main as a functionalthough in python you can call the function at the bottom of yourprogram and it will run as we have done in the examples above manyprogramming languages like c and java require a main function inorder to execute including a main function though not required canstructure our python programs in a logical way that puts the mostimportant components of the program into one function it can also makeour programs easier for nonpython programmers to readwell start with adding a main function to the hellopy programabove well keep our hello function and then deﬁne a mainfunctionhellopydef hello printhello worlddef mainwithin the main function lets include a print statement to letus know that were in the main function additionally lets call the hello function within the main functionhellopydef hello printhello worlddef main printthis is the main function hellofinally at the bottom of the program well call the main functionhellopydef hello printhello worlddef main printthis is the main function hellomainfigure classcodeat this point we can run our programpython hellopywell receive the following outputoutputthis is the main functionhello worldbecause we called the hello function within main and then onlycalled main to run the hello world text printed only once afterthe string that told us we were in the main functionnext were going to be working with multiple functions so it is worthreviewing the variable scope of global and local variables if you deﬁne avariable within a function block youll only be able to use that variablewithin that function if you would like to use variables across functions itmay be better to declare a global variablein python __main__ is the name of the scope where toplevel codewill execute when a program is run from standard input a script orfrom an interactive prompt its __name__ is set equal to __main__because of this there is a convention to use the following constructionif __name__ __main__ code to run when this is the main program herethis lets program ﬁles be used either as the main program and runwhat follows the if statement as a module and not run what followsthe if statementany code that is not contained within this statement will be executedupon running if youre using your program ﬁle as a module the codethat is not in this statement will also execute upon its import whilerunning the secondary ﬁlelets expand on our namespy program above and create a new ﬁlecalled more_namespy in this program well declare a global variableand modify our original names function so that the instructions are intwo discrete functionsthe ﬁrst function has_vowel will check to see if the name stringcontains a vowelthe second function print_letters will print each letter of the name stringmore_namespy declare global variable name for use in all functionsname strinputenter your name define function to check if name contains a voweldef has_vowel if setaeiouintersectionnamelower printyour name contains a vowel else printyour name does not contain a vowel iterate over letters in name stringdef print_letters for letter in name printletterwith this set up lets deﬁne the main function which will contain acall to both the has_vowel and the print_letters functionsmore_namespy declare global variable name for use in all functionsname strinputenter your name define function to check if name contains a voweldef has_vowel if setaeiouintersectionnamelower printyour name contains a vowel else printyour name does not contain a vowel iterate over letters in name stringdef print_letters for letter in name printletter define main method that calls other functionsdef main has_vowel print_lettersfinally well add the if __name__ __main__ constructionat the bottom of the ﬁle for our purposes since we have put all thefunctions we would like to do in the main function well call the main function following this if statementmore_namespy declare global variable name for use in all functionsname strinputenter your name define function to check if name contains a voweldef has_vowel if setaeiouintersectionnamelower printyour name contains a vowel else printyour name does not contain a vowel iterate over letters in name stringdef print_letters for letter in name printletter define main method that calls other functionsdef main has_vowel print_letters execute main functionif __name__ __main__ mainfigure classcodewe can now run the programpython more_namespythe program will show the same output as the namespy programbut here the code is more organized and can be used in a modular waywithout modiﬁcationif you did not want to declare a main function you alternativelycould have ended the program like thismore_namespyif __name__ __main__ has_vowel print_lettersusing main as a function and the if __name__ __main__ statement can organize your code in a logical waymaking it more readable and modularconclusionfunctions are code blocks of instructions that perform actions within aprogram helping to make our code reusable and modularto learn more about how to make your code more modular you canread our guide on how to write modules in python 3how to use args and kwargsin function deﬁnitions parameters are named entities that specify anargument that a given function can acceptwhen programming you may not be aware of all the possible usecases of your code and may want to offer more options for futureprogrammers working with the module or for users interacting with thecode we can pass a variable number of arguments to a function by using args and kwargs in our codeunderstanding argsin python the singleasterisk form of args can be used as a parameterto send a nonkeyworded variablelength argument list to functions it isworth noting that the asterisk is the important element here as theword args is the established conventional idiom though it is notenforced by the languagelets look at a typical function that uses two argumentslets_multiplypydef multiplyx y print x yin the code above we built the function with x and y as argumentsand then when we call the function we need to use numbers tocorrespond with x and y in this case we will pass the integer 5 in for xand the integer 4 in for ylets_multiplypydef multiplyx y print x ymultiply5 4now we can run the above codepython lets_multiplypywell receive the following output showing that the integers 5 and 4were multiplied as per the multiplyxy functionoutput20what if later on we decide that we would like to multiply threenumbers rather than just two if we try to add an additional number tothe function as shown below well receive an errorlets_multiplypydef multiplyx y print x ymultiply5 4 3outputtypeerror multiply takes 2 positional arguments but 3 were givenso if you suspect that you may need to use more arguments later onyou can make use of args as your parameter insteadwe can essentially create the same function and code that we showedin the ﬁrst example by removing x and y as function parameters andinstead replacing them with argslets_multiplypydef multiplyargs z 1 for num in args z num printzmultiply4 5multiply10 9multiply2 3 4multiply3 5 10 6when we run this code well receive the product for each of thesefunction callsoutput209024900because we used args to send a variablelength argument list to ourfunction we were able to pass in as many arguments as we wished intothe function callswith args you can create more ﬂexible code that accepts a variedamount of nonkeyworded arguments within your functionunderstanding kwargsthe double asterisk form of kwargs is used to pass a keywordedvariablelength argument dictionary to a function again the twoasterisks are the important element here as the word kwargs isconventionally used though not enforced by the languagelike args kwargs can take however many arguments you wouldlike to supply to it however kwargs differs from args in that youwill need to assign keywordsfirst lets simply print out the kwargs arguments that we pass to afunction well create a short function to do thisprint_kwargspydef print_kwargskwargs printkwargsnext well call the function with some keyworded arguments passedinto the functionprint_kwargspydef print_kwargskwargs printkwargsprint_kwargskwargs_1shark kwargs_245 kwargs_3truelets run the program above and look at the outputpython print_kwargspyoutputkwargs_3 true kwargs_2 45 kwargs_1 sharkbecause the dictionary data type is unordered we received the keyvalue pairs in a random order but it is important to note that a dictionarycalled kwargs is created and we can work with it just like we canwork with other dictionarieslets create another short program to show how we can make use of kwargs here well create a function to greet a dictionary of namesfirst well start with a dictionary of two namesprint_valuespydef print_valueskwargs for key value in kwargsitems printthe value of is formatkey valueprint_valuesmy_namesammy your_namecaseywe can now run the program and look at the outputpython print_valuespyoutputthe value of your_name is caseythe value of my_name is sammyagain because dictionaries are unordered your output may be withthe name casey ﬁrst or with the name sammy ﬁrstlets now pass additional arguments to the function to show that kwargs will accept however many arguments you would like toincludeprint_valuespydef print_valueskwargs for key value in kwargsitems printthe value of is formatkey valueprint_values name_1alex name_2gray name_3harper name_4phoenix name_5remy name_6val when we run the program at this point well receive the followingoutput which is again unorderedoutputthe value of name_2 is graythe value of name_6 is valthe value of name_4 is phoenixthe value of name_5 is remythe value of name_3 is harperthe value of name_1 is alexusing kwargs provides us with ﬂexibility to use keywordarguments in our program when we use kwargs as a parameter wedont need to know how many arguments we would eventually like topass to a functionordering argumentswhen ordering arguments within a function or function call argumentsneed to occur in a particular order1 formal positional arguments2 args3 keyword arguments4 kwargsin practice when working with explicit positional parameters alongwith args and kwargs your function would look like thisdef examplearg_1 arg_2 args kwargsand when working with positional parameters along with namedkeyword parameters in addition to args and kwargs your functionwould look like thisdef example2arg_1 arg_2 args kw_1shark kw_2blobfish kwargsit is important to keep the order of arguments in mind when creatingfunctions so that you do not receive a syntax error in your python codeusing args and kwargs in function callswe can also use args and kwargs to pass arguments into functionsfirst lets look at an example with argssome_argspydef some_argsarg_1 arg_2 arg_3 printarg_1 arg_1 printarg_2 arg_2 printarg_3 arg_3args sammy casey alexsome_argsargsin the function above there are three parameters deﬁned as arg_1 arg_ and arg_3 the function will print out each of these argumentswe then create a variable that is set to an iterable in this case a tupleand can pass that variable into the function with the asterisk syntaxwhen we run the program with the python some_argspycommand well receive the following outputoutputarg_1 sammyarg_2 caseyarg_3 alexwe can also modify the program above to an iterable list data typewith a different variable name lets also combine the args syntax witha named parametersome_argspydef some_argsarg_1 arg_2 arg_3 printarg_1 arg_1 printarg_2 arg_2 printarg_3 arg_3my_list 2 3some_args1 my_listif we run the program above it will produce the following outputoutputarg_1 1arg_2 2arg_3 3similarly the keyworded kwargs arguments can be used to call afunction we will set up a variable equal to a dictionary with 3 keyvaluepairs well use kwargs here but it can be called whatever you wantand pass it to a function with 3 argumentssome_kwargspydef some_kwargskwarg_1 kwarg_2 kwarg_3 printkwarg_1 kwarg_1 printkwarg_2 kwarg_2 printkwarg_3 kwarg_3kwargs kwarg_1 val kwarg_2 harper kwarg_3 remysome_kwargskwargslets run the program above with the python some_kwargspycommandoutputkwarg_1 valkwarg_2 harperkwarg_3 remywhen calling a function you can use args and kwargs to passargumentsconclusionwe can use the special syntax of args and kwargs within a functiondeﬁnition in order to pass a variable number of arguments to thefunctioncreating functions that accept args and kwargs are best used insituations where you expect that the number of inputs within theargument list will remain relatively small the use of args and kwargs is primarily to provide readability and convenience butshould be done with carehow to construct classes and deﬁneobjectspython is an objectoriented programming language objectorientedprogramming oop focuses on creating reusable patterns of code incontrast to procedural programming which focuses on explicitsequenced instructions when working on complex programs inparticular objectoriented programming lets you reuse code and writecode that is more readable which in turn makes it more maintainableone of the most important concepts in objectoriented programming isthe distinction between classes and objects which are deﬁned as followsclass a blueprint created by a programmer for an object thisdeﬁnes a set of attributes that will characterize any object that isinstantiated from this classobject an instance of a class this is the realized version of theclass where the class is manifested in the programthese are used to create patterns in the case of classes and then makeuse of the patterns in the case of objectsin this tutorial well go through creating classes instantiating objectsinitializing attributes with the constructor method and working withmore than one object of the same classclassesclasses are like a blueprint or a prototype that you can deﬁne to use tocreate objectswe deﬁne classes by using the class keyword similar to how wedeﬁne functions by using the def keywordlets deﬁne a class called shark that has two functions associated withit one for swimming and one for being awesomesharkpyclass shark def swimself printthe shark is swimming def be_awesomeself printthe shark is being awesomebecause these functions are indented under the class shark they arecalled methods methods are a special kind of function that are deﬁnedwithin a classthe argument to these functions is the word self which is a referenceto objects that are made based on this class to reference instances orobjects of the class self will always be the ﬁrst parameter but it neednot be the only onedeﬁning this class did not create any shark objects only the patternfor a shark object that we can deﬁne later that is if you run theprogram above at this stage nothing will be returnedcreating the shark class above provided us with a blueprint for anobjectobjectsan object is an instance of a class we can take the shark class deﬁnedabove and use it to create an object or instance of itwell make a shark object called sammysammy sharkhere we initialized the object sammy as an instance of the class bysetting it equal to sharknow lets use the two methods with the shark object sammysammy sharksammyswimsammybe_awesomethe shark object sammy is using the two methods swim and be_awesome we called these using the dot operator which isused to reference an attribute of the object in this case the attribute is amethod and its called with parentheses like how you would also callwith a functionbecause the keyword self was a parameter of the methods as deﬁnedin the shark class the sammy object gets passed to the methods the self parameter ensures that the methods have a way of referring toobject attributeswhen we call the methods however nothing is passed inside theparentheses the object sammy is being automatically passed with the dotoperatorlets add the object within the context of a programsharkpyclass shark def swimself printthe shark is swimming def be_awesomeself printthe shark is being awesomedef main sammy shark sammyswim sammybe_awesomeif __name__ __main__ mainfigure classcodelets run the program to see what it doespython sharkpyoutputthe shark is swimmingthe shark is being awesomethe object sammy calls the two methods in the main function of theprogram causing those methods to runthe constructor methodthe constructor method is used to initialize data it is run as soon as anobject of a class is instantiated also known as the __init__ method itwill be the ﬁrst deﬁnition of a class and looks like thisclass shark def __init__self printthis is the constructor methodif you added the above __init__ method to the shark class in theprogram above the program would output the following without yourmodifying anything within the sammy instantiationoutputthis is the constructor methodthe shark is swimmingthe shark is being awesomethis is because the constructor method is automatically initialized youshould use this method to carry out any initializing you would like to dowith your class objectsinstead of using the constructor method above lets create one thatuses a name variable that we can use to assign names to objects wellpass name as a parameter and set selfname equal to namesharkpyclass shark def __init__self name selfname namenext we can modify the strings in our functions to reference thenames as belowsharkpyclass shark def __init__self name selfname name def swimself reference the name printselfname is swimming def be_awesomeself reference the name printselfname is being awesomefinally we can set the name of the shark object sammy as equal to sammy by passing it as a parameter of the shark classsharkpyclass shark def __init__self name selfname name def swimself printselfname is swimming def be_awesomeself printselfname is being awesomedef main set name of shark object sammy sharksammy sammyswim sammybe_awesomeif __name__ __main__ mainfigure classcodewe can run the program nowpython sharkpyoutputsammy is swimmingsammy is being awesomewe see that the name we passed to the object is being printed out wedeﬁned the __init__ method with the parameter name along with the self keyword and deﬁned a variable within the methodbecause the constructor method is automatically initialized we do notneed to explicitly call it only pass the arguments in the parenthesesfollowing the class name when we create a new instance of the classif we wanted to add another parameter such as age we could do soby also passing it to the __init__ methodclass shark def __init__self name age selfname name selfage agethen when we create our object sammy we can pass sammys age inour statementsammy sharksammy 5to make use of age we would need to also create a method in theclass that calls for itconstructor methods allow us to initialize certain attributes of anobjectworking with more than one objectclasses are useful because they allow us to create many similar objectsbased on the same blueprintto get a sense for how this works lets add another shark object toour programsharkpyclass shark def __init__self name selfname name def swimself printselfname is swimming def be_awesomeself printselfname is being awesomedef main sammy sharksammy sammybe_awesome stevie sharkstevie stevieswimif __name__ __main__ mainfigure classcodewe have created a second shark object called stevie and passed thename stevie to it in this example we used the be_awesomemethod with sammy and the swim method with stevielets run the programpython sharkpyoutputsammy is being awesomestevie is swimmingthe output shows that we are using two different objects the sammyobject and the stevie object both of the shark classclasses make it possible to create more than one object following thesame pattern without creating each one from scratchconclusionthis tutorial went through creating classes instantiating objectsinitializing attributes with the constructor method and working withmore than one object of the same classobjectoriented programming is an important concept to understandbecause it makes code recycling more straightforward as objects createdfor one program can be used in another objectoriented programs alsomake for better program design since complex programs are difﬁcult towrite and require careful planning and this in turn makes it less work tomaintain the program over timeunderstanding class and instance variablesobjectoriented programming allows for variables to be used at the classlevel or the instance level variables are essentially symbols that stand infor a value youre using in a programat the class level variables are referred to as class variables whereasvariables at the instance level are called instance variableswhen we expect variables are going to be consistent across instancesor when we would like to initialize a variable we can deﬁne that variableat the class level when we anticipate the variables will changesigniﬁcantly across instances we can deﬁne them at the instance levelone of the principles of software development is the dry principlewhich stands for dont repeat yourself this principle is geared towardslimiting repetition within code and objectoriented programmingadheres to the dry principle as it reduces redundancythis tutorial will demonstrate the use of both class and instancevariables in objectoriented programming within pythonclass variablesclass variables are deﬁned within the class construction because theyare owned by the class itself class variables are shared by all instances ofthe class they therefore will generally have the same value for everyinstance unless you are using the class variable to initialize a variabledeﬁned outside of all the methods class variables are by conventiontypically placed right below the class header and before the constructormethod and other methodsa class variable alone looks like thisclass shark animal_type fishhere the variable animal_type is assigned the value fishwe can create an instance of the shark class well call it new_sharkand print the variable by using dot notationsharkpyclass shark animal_type fishnew_shark sharkprintnew_sharkanimal_typelets run the programpython sharkpyoutputfishour program returns the value of the variablelets add a few more class variables and print them outsharkpyclass shark animal_type fish location ocean followers 5new_shark sharkprintnew_sharkanimal_typeprintnew_sharklocationprintnew_sharkfollowersjust like with any other variable class variables can consist of any datatype available to us in python in this program we have strings and aninteger lets run the program again with the python sharkpycommand and see the outputoutputfishocean5the instance of new_shark is able to access all the class variables andprint them out when we run the programclass variables allow us to deﬁne variables upon constructing theclass these variables and their associated values are then accessible toeach instance of the classinstance variablesinstance variables are owned by instances of the class this means thatfor each object or instance of a class the instance variables are differentunlike class variables instance variables are deﬁned within methodsin the shark class example below name and age are instancevariablesclass shark def __init__self name age selfname name selfage agewhen we create a shark object we will have to deﬁne these variableswhich are passed as parameters within the constructor method oranother methodclass shark def __init__self name age selfname name selfage agenew_shark sharksammy 5as with class variables we can similarly call to print instancevariablessharkpyclass shark def __init__self name age selfname name selfage agenew_shark sharksammy 5printnew_sharknameprintnew_sharkagewhen we run the program above with python sharkpy wellreceive the following outputoutputsammy5the output we receive is made up of the values of the variables that weinitialized for the object instance of new_sharklets create another object of the shark class called steviesharkpyclass shark def __init__self name age selfname name selfage agenew_shark sharksammy 5printnew_sharknameprintnew_sharkagestevie sharkstevie 8printstevienameprintstevieagethe stevie object like the new_shark object passes the parametersspeciﬁc for that instance of the shark class to assign values to theinstance variablesinstance variables owned by objects of the class allow for each objector instance to have different values assigned to those variablesworking with class and instance variables togetherclass variables and instance variables will often be utilized at the sametime so lets look at an example of this using the shark class we createdthe comments in the program outline each step of the processsharkpyclass shark class variables animal_type fish location ocean constructor method with instance variables name and age def __init__self name age selfname name selfage age method with instance variable followers def set_followersself followers printthis user has strfollowers followersdef main first object set up instance variables of constructor method sammy sharksammy 5 print out instance variable name printsammyname print out class variable location printsammylocation second object stevie sharkstevie 8 print out instance variable name printsteviename use set_followers method and pass followers instance variable stevieset_followers77 print out class variable animal_type printstevieanimal_typeif __name__ __main__ mainfigure classcodewhen we run the program with python sharkpy well receive thefollowing outputoutputsammyoceansteviethis user has 77 followersfishhere we have made use of both class and instance variables in twoobjects of the shark class sammy and stevieconclusionin objectoriented programming variables at the class level are referredto as class variables whereas variables at the object level are calledinstance variablesthis differentiation allows us to use class variables to initialize objectswith a speciﬁc value assigned to variables and use different variables foreach object with instance variablesmaking use of class and instancespeciﬁc variables can ensure that ourcode adheres to the dry principle to reduce repetition within codeunderstanding inheritanceobjectoriented programming creates reusable patterns of code to curtailredundancy in development projects one way that objectorientedprogramming achieves recyclable code is through inheritance when onesubclass can leverage code from another base classthis tutorial will go through some of the major aspects of inheritancein python including how parent classes and child classes work how tooverride methods and attributes how to use the super function andhow to make use of multiple inheritancewhat is inheritanceinheritance is when a class uses code constructed within another class ifwe think of inheritance in terms of biology we can think of a childinheriting certain traits from their parent that is a child can inherit aparents height or eye color children also may share the same last namewith their parentsclasses called child classes or subclasses inherit methods and variablesfrom parent classes or base classeswe can think of a parent class called parent that has class variablesfor last_name height and eye_color that the child class child willinherit from the parentbecause the child subclass is inheriting from the parent base classthe child class can reuse the code of parent allowing the programmerto use fewer lines of code and decrease redundancyparent classesparent or base classes create a pattern out of which child or subclassescan be based on parent classes allow us to create child classes throughinheritance without having to write the same code over again each timeany class can be made into a parent class so they are each fullyfunctional classes in their own right rather than just templateslets say we have a general bank_account parent class that has personal_account and business_account child classes many ofthe methods between personal and business accounts will be similarsuch as methods to withdraw and deposit money so those can belong tothe parent class of bank_account the business_account subclasswould have methods speciﬁc to it including perhaps a way to collectbusiness records and forms as well as an employee_identification_number variablesimilarly an animal class may have eating and sleepingmethods and a snake subclass may include its own speciﬁc hissingand slithering methodslets create a fish parent class that we will later use to construct typesof ﬁsh as its subclasses each of these ﬁsh will have ﬁrst names and lastnames in addition to characteristicswell create a new ﬁle called fishpy and start with the __init__constructor method which well populate with first_name and last_name class variables for each fish object or subclassﬁshpyclass fish def __init__self first_name last_namefish selffirst_name first_name selflast_name last_namewe have initialized our last_name variable with the string fishbecause we know that most ﬁsh will have this as their last namelets also add some other methodsﬁshpyclass fish def __init__self first_name last_namefish selffirst_name first_name selflast_name last_name def swimself printthe fish is swimming def swim_backwardsself printthe fish can swim backwardswe have added the methods swim and swim_backwards to the fish class so that every subclass will also be able to make use of thesemethodssince most of the ﬁsh well be creating are considered to be bony ﬁshas in they have a skeleton made out of bone rather than cartilaginousﬁsh as in they have a skeleton made out of cartilage we can add a fewmore attributes to the __init__ methodﬁshpyclass fish def __init__self first_name last_namefish skeletonbone eyelidsfalse selffirst_name first_name selflast_name last_name selfskeleton skeleton selfeyelids eyelids def swimself printthe fish is swimming def swim_backwardsself printthe fish can swim backwardsbuilding a parent class follows the same methodology as building anyother class except we are thinking about what methods the child classeswill be able to make use of once we create thosechild classeschild or subclasses are classes that will inherit from the parent class thatmeans that each child class will be able to make use of the methods andvariables of the parent classfor example a goldfish child class that subclasses the fish classwill be able to make use of the swim method declared in fish withoutneeding to declare itwe can think of each child class as being a class of the parent classthat is if we have a child class called rhombus and a parent class called parallelogram we can say that a rhombus is a parallelogram justas a goldfish is a fishthe ﬁrst line of a child class looks a little different than nonchildclasses as you must pass the parent class into the child class as aparameterclass troutfishthe trout class is a child of the fish class we know this because ofthe inclusion of the word fish in parentheseswith child classes we can choose to add more methods overrideexisting parent methods or simply accept the default parent methodswith the pass keyword which well do in this caseﬁshpyclass troutfish passwe can now create a trout object without having to deﬁne anyadditional methodsﬁshpyclass troutfish passterry troutterryprintterryfirst_name terrylast_nameprintterryskeletonprintterryeyelidsterryswimterryswim_backwardswe have created a trout object terry that makes use of each of themethods of the fish class even though we did not deﬁne those methodsin the trout child class we only needed to pass the value of terry tothe first_name variable because all of the other variables wereinitializedwhen we run the program well receive the following outputoutputterry fishbonefalsethe fish is swimmingthe fish can swim backwardsnext lets create another child class that includes its own methodwell call this class clownfish and its special method will permit it tolive with sea anemoneﬁshpyclass clownfishfish def live_with_anemoneself printthe clownfish is coexisting with sea anemonenext lets create a clownfish object to see how this worksﬁshpycasey clownfishcaseyprintcaseyfirst_name caseylast_namecaseyswimcaseylive_with_anemonewhen we run the program well receive the following outputoutputcasey fishthe fish is swimmingthe clownfish is coexisting with sea anemonethe output shows that the clownfish object casey is able to use the fish methods __init__ and swim as well as its child classmethod of live_with_anemoneif we try to use the live_with_anemone method in a troutobject well receive an erroroutputterrylive_with_anemoneattributeerror trout object has no attribute live_with_anemonethis is because the method live_with_anemone belongs only tothe clownfish child class and not the fish parent classchild classes inherit the methods of the parent class it belongs to soeach child class can make use of those methods within programsoverriding parent methodsso far we have looked at the child class trout that made use of the pass keyword to inherit all of the parent class fish behaviors andanother child class clownfish that inherited all of the parent classbehaviors and also created its own unique method that is speciﬁc to thechild class sometimes however we will want to make use of some of theparent class behaviors but not all of them when we change parent classmethods we override themwhen constructing parent and child classes it is important to keepprogram design in mind so that overriding does not produceunnecessary or redundant codewell create a shark child class of the fish parent class because wecreated the fish class with the idea that we would be creating primarilybony ﬁsh well have to make adjustments for the shark class that isinstead a cartilaginous ﬁsh in terms of program design if we had morethan one nonbony ﬁsh we would most likely want to make separateclasses for each of these two types of ﬁshsharks unlike bony ﬁsh have skeletons made of cartilage instead ofbone they also have eyelids and are unable to swim backwards sharkscan however maneuver themselves backwards by sinkingin light of this well be overriding the __init__ constructormethod and the swim_backwards method we dont need to modifythe swim method since sharks are ﬁsh that can swim lets take a lookat this child classﬁshpyclass sharkfish def __init__self first_name last_nameshark skeletoncartilage eyelidstrue selffirst_name first_name selflast_name last_name selfskeleton skeleton selfeyelids eyelids def swim_backwardsself printthe shark can not swim backwards but can sink backwardswe have overridden the initialized parameters in the __init__method so that the last_name variable is now set equal to the string shark the skeleton variable is now set equal to the string cartilage and the eyelids variable is now set to the booleanvalue true each instance of the class can also override theseparametersthe method swim_backwards now prints a different string thanthe one in the fish parent class because sharks are not able to swimbackwards in the way that bony ﬁsh canwe can now create an instance of the shark child class which will stillmake use of the swim method of the fish parent classﬁshpysammy sharksammyprintsammyfirst_name sammylast_namesammyswimsammyswim_backwardsprintsammyeyelidsprintsammyskeletonwhen we run this code well receive the following outputoutputsammy sharkthe fish is swimmingthe shark can not swim backwards but can sink backwardstruecartilagethe shark child class successfully overrode the __init__ and swim_backwards methods of the fish parent class while alsoinheriting the swim method of the parent classwhen there will be a limited number of child classes that are moreunique than others overriding parent class methods can prove to beusefulthe super functionwith the super function you can gain access to inherited methodsthat have been overwritten in a class objectwhen we use the super function we are calling a parent methodinto a child method to make use of it for example we may want tooverride one aspect of the parent method with certain functionality butthen call the rest of the original parent method to ﬁnish the methodin a program that grades students we may want to have a child classfor weighted_grade that inherits from the grade parent class in thechild class weighted_grade we may want to override a calculate_grade method of the parent class in order to includefunctionality to calculate a weighted grade but still keep the rest of thefunctionality of the original class by invoking the super function wewould be able to achieve thisthe super function is most commonly used within the __init__ method because that is where you will most likely need toadd some uniqueness to the child class and then complete initializationfrom the parentto see how this works lets modify our trout child class since troutare typically freshwater ﬁsh lets add a water variable to the __init__ method and set it equal to the string freshwater butthen maintain the rest of the parent classs variables and parametersﬁshpyclass troutfish def __init__self water freshwater selfwater water super__init__selfwe have overridden the __init__ method in the trout childclass providing a different implementation of the __init__ that isalready deﬁned by its parent class fish within the __init__method of our trout class we have explicitly invoked the __init__method of the fish classbecause we have overridden the method we no longer need to pass first_name in as a parameter to trout and if we did pass in aparameter we would reset freshwater instead we will thereforeinitialize the first_name by calling the variable in our object instancenow we can invoke the initialized variables of the parent class andalso make use of the unique child variable lets use this in an instance oftroutﬁshpyterry trout initialize first nameterryfirst_name terry use parent __init__ through superprintterryfirst_name terrylast_nameprintterryeyelids use child __init__ overrideprintterrywater use parent swim methodterryswimoutputterry fishfalsefreshwaterthe fish is swimmingthe output shows that the object terry of the trout child class isable to make use of both the childspeciﬁc __init__ variable waterwhile also being able to call the fish parent __init__ variables of first_name last_name and eyelidsthe builtin python function super allows us to utilize parent classmethods even when overriding certain aspects of those methods in ourchild classesmultiple inheritancemultiple inheritance is when a class can inherit attributes and methodsfrom more than one parent class this can allow programs to reduceredundancy but it can also introduce a certain amount of complexity aswell as ambiguity so it should be done with thought to overall programdesignto show how multiple inheritance works lets create a coral_reefchild class than inherits from a coral class and a sea_anemone classwe can create a method in each and then use the pass keyword in the coral_reef child classcoral_reefpyclass coral def communityself printcoral lives in a communityclass anemone def protect_clownfishself printthe anemone is protecting the clownfishclass coralreefcoral anemone passthe coral class has a method called community that prints oneline and the anemone class has a method called protect_clownfish that prints another line then we call bothclasses into the inheritance tuple this means that coral is inheritingfrom two parent classeslets now instantiate a coral objectcoral_reefpygreat_barrier coralreefgreat_barriercommunitygreat_barrierprotect_clownfishthe object great_barrier is set as a coralreef object and can usethe methods in both parent classes when we run the program well seethe following outputoutputcoral lives in a communitythe anemone is protecting the clownfishthe output shows that methods from both parent classes wereeffectively used in the child classmultiple inheritance allows us to use the code from more than oneparent class in a child class if the same method is deﬁned in multipleparent methods the child class will use the method of the ﬁrst parentdeclared in its tuple listthough it can be used effectively multiple inheritance should be donewith care so that our programs do not become ambiguous and difﬁcultfor other programmers to understandconclusionthis tutorial went through constructing parent classes and child classesoverriding parent methods and attributes within child classes using the super function and allowing for child classes to inherit from multipleparent classesinheritance in objectoriented coding can allow for adherence to thedry dont repeat yourself principle of software development allowingfor more to be done with less code and repetition inheritance alsocompels programmers to think about how they are designing theprograms they are creating to ensure that code is effective and clearhow to apply polymorphism to classespolymorphism is the ability to leverage the same interface for differentunderlying forms such as data types or classes this permits functions touse entities of different types at different timesfor objectoriented programming in python this means that aparticular object belonging to a particular class can be used in the sameway as if it were a different object belonging to a different classpolymorphism allows for ﬂexibility and loose coupling so that codecan be extended and easily maintained over timethis tutorial will go through applying polymorphism to classes inpythonwhat is polymorphismpolymorphism is an important feature of class deﬁnition in python that isutilized when you have commonly named methods across classes orsubclasses this allows functions to use objects of any of thesepolymorphic classes without needing to be aware of distinctions acrossthe classespolymorphism can be carried out through inheritance with subclassesmaking use of base class methods or overriding thempythons duck typing a special case of dynamic typing usestechniques characteristic of polymorphism including late binding anddynamic dispatch the term duck typing is derived from a quote ofwriter james whitcomb riley when i see a bird that walks like a duckand swims like a duck and quacks like a duck i call that bird a duckappropriated by italian computer engineer alex martelli in a message tothe complangpython newsgroup the use of duck typing is concernedwith establishing the suitability of an object for a speciﬁc purpose whenusing normal typing this suitability is determined by the type of an objectalone but with duck typing the presence of methods and properties areused to determine suitability rather than the actual type of the object inquestion that is to say you check whether the object quacks like a duckand walks like a duck rather than asking whether the object is a duckwhen several classes or subclasses have the same method names butdifferent implementations for these same methods the classes arepolymorphic because they are using a single interface to use with entitiesof different types a function will be able to evaluate these polymorphicmethods without knowing which classes are invokedcreating polymorphic classesto make use of polymorphism were going to create two distinct classesto use with two distinct objects each of these distinct classes need tohave an interface that is in common so that they can be usedpolymorphically so we will give them methods that are distinct but thathave the same namewell create a shark class and a clownfish class each of which willdeﬁne methods for swim swim_backwards and skeletonpolymorphic_ﬁshpyclass shark def swimself printthe shark is swimming def swim_backwardsself printthe shark can not swim backwards but can sink backwards def skeletonself printthe sharks skeleton is made of cartilageclass clownfish def swimself printthe clownfish is swimming def swim_backwardsself printthe clownfish can swim backwards def skeletonself printthe clownfishs skeleton is made of bonein the code above both the shark and clownfish class have threemethods with the same name in common however each of thefunctionalities of these methods differ for each classlets instantiate these classes into two objectspolymorphic_ﬁshpysammy sharksammyskeletoncasey clownfishcaseyskeletonwhen we run the program with the python polymorphic_fishpy command we can see that each object behavesas expectedoutputthe sharks skeleton is made of cartilagethe clownfishs skeleton is made of bonenow that we have two objects that make use of a common interfacewe can use the two objects in the same way regardless of their individualtypespolymorphism with class methodsto show how python can use each of these different class types in thesame way we can ﬁrst create a for loop that iterates through a tuple ofobjects then we can call the methods without being concerned aboutwhich class type each object is we will only assume that these methodsactually exist in each classpolymorphic_ﬁshpysammy sharkcasey clownfishfor fish in sammy casey fishswim fishswim_backwards fishskeletonwe have two objects sammy of the shark class and casey of the clownfish class our for loop iterates through these objects calling theswim swim_backwards and skeleton methods on eachwhen we run the program the output will be as followsoutputthe shark is swimmingthe shark can not swim backwards but can sink backwardsthe sharks skeleton is made of cartilagethe clownfish is swimmingthe clownfish can swim backwardsthe clownfishs skeleton is made of bonethe for loop iterated ﬁrst through the sammy instantiation of the shark class then the casey object of the clownfish class so we seethe methods related to the shark class ﬁrst then the clownfish classthis shows that python is using these methods in a way withoutknowing or caring exactly what class type each of these objects is that isusing these methods in a polymorphic waypolymorphism with a functionwe can also create a function that can take any object allowing forpolymorphismlets create a function called in_the_pacific which takes in anobject we can call fish though we are using the name fish anyinstantiated object will be able to be called into this functionpolymorphic_ﬁshpydef in_the_pacificfishnext well give the function something to do that uses the fish objectwe passed to it in this case well call the swim methods each of whichis deﬁned in the two classes shark and clownfishpolymorphic_ﬁshpydef in_the_pacificfish fishswimnext well create instantiations of both the shark and clownfishclasses if we dont have them already with those we can call their actionusing the same in_the_pacific functionpolymorphic_ﬁshpydef in_the_pacificfish fishswimsammy sharkcasey clownfishin_the_pacificsammyin_the_pacificcaseywhen we run the program the output will be as followsoutputthe shark is swimmingthe clownfish is swimmingeven though we passed a random object fish into the in_the_pacific function when deﬁning it we were still able to useit effectively for instantiations of the shark and clownfish classes the casey object called the swim method deﬁned in the clownfish classand the sammy object called the swim method deﬁned in the sharkclassconclusionby allowing different objects to leverage functions and methods insimilar ways through polymorphism making use of this python featureprovides greater ﬂexibility and extendability of your objectorientedcodehow to use the python debuggerin software development debugging is the process of looking for andthen resolving issues that prevent the software from running correctlythe python debugger provides a debugging environment for pythonprograms it supports setting conditional breakpoints stepping throughthe source code one line at a time stack inspection and moreworking interactively with the python debuggerthe python debugger comes as part of the standard python distributionas a module called pdb the debugger is also extensible and is deﬁned asthe class pdb you can read the ofﬁcial documentation of pdb to learnmorewell begin by working with a short program that has two globalvariables a function that creates a nested loop and the if __name__ __main__ construction that will call the nested_loopfunctionloopingpynum_list 500 600 700alpha_list x y zdef nested_loop for number in num_list printnumber for letter in alpha_list printletterif __name__ __main__ nested_loopwe can now run this program through the python debugger by usingthe following commandpython m pdb loopingpythe m commandline ﬂag will import any python module for you andrun it as a script in this case we are importing and running the pdbmodule which we pass into the command as shown aboveupon running this command youll receive the following outputoutput userssammyloopingpy1module num_list 500 600 700pdbin the output the ﬁrst line contains the current module name asindicated with module with a directory path and the printed linenumber that follows in this case its 1 but if there is a comment or othernonexecutable line it could be a higher number the second line showsthe current line of source code that is executed here as pdb provides aninteractive console for debugging you can use the command help tolearn its commands and help command to learn more about a speciﬁccommand note that the pdb console is different than the pythoninteractive shellthe python debugger will automatically start over when it reaches theend of your program whenever you want to leave the pdb console typethe command quit or exit if you would like to explicitly restart aprogram at any place within the program you can do so with thecommand runusing the debugger to move through a programwhen working with programs in the python debugger youre likely touse the list step and next commands to move through your codewell go over these commands in this sectionwithin the shell we can type the command list in order to getcontext around the current line from the ﬁrst line of the program loopingpy that we displayed above num_list 500 600 700 that will look like thispdb list 1 num_list 500 600 700 2 alpha_list x y z 3 4 5 def nested_loop 6 for number in num_list 7 printnumber 8 for letter in alpha_list 9 printletter 10 11 if __name__ __main__pdbthe current line is indicated with the characters which in our caseis the ﬁrst line of the program ﬁlesince this is a relatively short program we receive nearly all of theprogram back with the list command without providing argumentsthe list command provides 11 lines around the current line but youcan also specify which lines to include like sopdb list 3 7 3 4 5 def nested_loop 6 for number in num_list 7 printnumberpdbhere we requested that the lines 37 be displayed by using thecommand list 3 7to move through the program line by line we can use step or nextpdb step userssammyloopingpy2module alpha_list x y zpdbpdb next userssammyloopingpy2module alpha_list x y zpdbthe difference between step and next is that step will stop within acalled function while next executes called functions to only stop at thenext line of the current function we can see this difference when wework with the functionthe step command will iterate through the loops once it gets to therunning of the function showing exactly what the loop is doing as it willﬁrst print a number with printnumber then go through to print theletters with printletter return to the number etcpdb step userssammyloopingpy5module def nested_looppdb step userssammyloopingpy11module if __name__ __main__pdb step userssammyloopingpy12module nested_looppdb stepcall userssammyloopingpy5nested_loop def nested_looppdb step userssammyloopingpy6nested_loop for number in num_listpdb step userssammyloopingpy7nested_loop printnumberpdb step500 userssammyloopingpy8nested_loop for letter in alpha_listpdb step userssammyloopingpy9nested_loop printletterpdb stepx userssammyloopingpy8nested_loop for letter in alpha_listpdb step userssammyloopingpy9nested_loop printletterpdb stepy userssammyloopingpy8nested_loop for letter in alpha_listpdbthe next command instead will execute the entire function withoutshowing the stepbystep process lets quit the current session with the exit command and then begin the debugger againpython m pdb loopingpynow we can work with the next commandpdb next userssammyloopingpy5module def nested_looppdb next userssammyloopingpy11module if __name__ __main__pdb next userssammyloopingpy12module nested_looppdb next500xyz600xyz700xyzreturn userssammyloopingpy12modulenone nested_looppdb while going through your code you may want to examine the valuepassed to a variable which you can do with the pp command which willprettyprint the value of the expression using the pprint modulepdb pp num_list500 600 700pdbmost commands in pdbhave shorter aliases for step that short formis s and for next it is n the help command will list available aliasesyou can also call the last command you called by pressing the enter keyat the promptbreakpointsyou typically will be working with larger programs than the exampleabove so youll likely be wanting to look at particular functions or linesrather than going through an entire program by using the breakcommand to set breakpoints youll run the program up until thespeciﬁed breakpointwhen you insert a breakpoint the debugger assigns a number to itthe numbers assigned to breakpoints are successive integers that beginwith the number 1 which you can refer to when working withbreakpointsbreakpoints can be placed at certain line numbers by following thesyntax of program_fileline_number as shown belowpdb break loopingpy5breakpoint 1 at userssammyloopingpy5pdbtype clear and then y to remove all current breakpoints you canthen place a breakpoint where a function is deﬁnedpdb break loopingnested_loopbreakpoint 1 at userssammyloopingpy5pdbto remove current breakpoints type clear and then y you can alsoset up a conditionpdb break loopingpy7 number 500breakpoint 1 at userssammyloopingpy7pdb now if we issue the continue command the program will breakwhen the number x is evaluated to being greater than 500 that is whenit is set equal to 600 in the second iteration of the outer looppdb continue500xyz userssammyloopingpy7nested_loop printnumberpdbto see a list of breakpoints that are currently set to run use thecommand break without any arguments youll receive informationabout the particularities of the breakpoints youve setpdb breaknum type disp enb where1 breakpoint keep yes at userssammyloopingpy7 stop only if number 500 breakpoint already hit 2 timespdbwe can also disable a breakpoint with the command disable and thenumber of the breakpoint in this session we add another breakpoint andthen disable the ﬁrst onepdb break loopingpy11breakpoint 2 at userssammyloopingpy11pdb disable 1disabled breakpoint 1 at userssammyloopingpy7pdb breaknum type disp enb where1 breakpoint keep no at userssammyloopingpy7 stop only if number 500 breakpoint already hit 2 times2 breakpoint keep yes at userssammyloopingpy11pdbto enable a breakpoint use the enable command and to remove abreakpoint entirely use the clear commandpdb enable 1enabled breakpoint 1 at userssammyloopingpy7pdb clear 2deleted breakpoint 2 at userssammyloopingpy11pdbbreakpoints in pdb provide you with a lot of control some additionalfunctionalities include ignoring breakpoints during the current iterationof the program with the ignore command as in ignore 1 triggeringactions to occur at a breakpoint with the commands command as in command 1 and creating temporary breakpoints that are automaticallycleared the ﬁrst time program execution hits the point with the commandtbreak for a temporary break at line 3 for example you could type tbreak 3integrating pdb into programsyou can trigger a debugging session by importing the pdb module andadding the pdb function pdbset_trace above the line where youwould like the session to beginin our sample program above well add the import statement and thefunction where we would like to enter into the debugger for ourexample lets add it before the nested loop import pdb moduleimport pdbnum_list 500 600 700alpha_list x y zdef nested_loop for number in num_list printnumber trigger debugger at this line pdbset_trace for letter in alpha_list printletterif __name__ __main__ nested_loopby adding the debugger into your code you do not need to launchyour program in a special way or remember to set breakpointsimporting the pdb module and running the pdbset_tracefunction lets you begin your program as usual and run the debuggerthrough its executionmodifying program execution flowthe python debugger lets you change the ﬂow of your program atruntime with the jump command this lets you skip forward to preventsome code from running or can let you go backwards to run the codeagainwell be working with a small program that creates a list of the letterscontained in the string sammy sammyletter_listpydef print_sammy sammy_list sammy sammy for letter in sammy sammy_listappendletter printsammy_listif __name__ __main__ print_sammyif we run the program as usual with the python letter_listpycommand well receive the following outputoutputss as a ms a m ms a m m ywith the python debugger lets show how we can change theexecution by ﬁrst jumping ahead after the ﬁrst cycle when we do thiswell notice that there is a disruption of the for looppython m pdb letter_listpy userssammyletter_listpy1module def print_sammypdb list 1 def print_sammy 2 sammy_list 3 sammy sammy 4 for letter in sammy 5 sammy_listappendletter 6 printsammy_list 7 8 if __name__ __main__ 9 print_sammy 10 11 pdb break 5breakpoint 1 at userssammyletter_listpy5pdb continue userssammyletter_listpy5print_sammy sammy_listappendletterpdb pp letterspdb continues userssammyletter_listpy5print_sammy sammy_listappendletterpdb jump 6 userssammyletter_listpy6print_sammy printsammy_listpdb pp letterapdb disable 1disabled breakpoint 1 at userssammyletter_listpy5pdb continuess ms m ms m m ythe above debugging session puts a break at line 5 to prevent codefrom continuing then continues through code along with prettyprinting some values of letter to show what is happening next weuse the jump command to skip to line 6 at this point the variable letter is set equal to the string a but we jump the code that addsthat to the list sammy_list we then disable the breakpoint to proceedwith the execution as usual with the continue command so a isnever appended to sammy_listnext we can quit this ﬁrst session and restart the debugger to jumpback within the program to rerun a statement that has already beenexecuted this time well run the ﬁrst iteration of the for loop again inthe debugger userssammyletter_listpy1module def print_sammypdb list 1 def print_sammy 2 sammy_list 3 sammy sammy 4 for letter in sammy 5 sammy_listappendletter 6 printsammy_list 7 8 if __name__ __main__ 9 print_sammy 10 11 pdb break 6breakpoint 1 at userssammyletter_listpy6pdb continue userssammyletter_listpy6print_sammy printsammy_listpdb pp letterspdb jump 5 userssammyletter_listpy5print_sammy sammy_listappendletterpdb continue userssammyletter_listpy6print_sammy printsammy_listpdb pp letterspdb disable 1disabled breakpoint 1 at userssammyletter_listpy6pdb continues ss s as s a ms s a m ms s a m m yin the debugging session above we added a break at line 6 and thenjumped back to line 5 after continuing we prettyprinted along the wayto show that the string s was being appended to the list sammy_listtwice we then disabled the break at line 6 and continued running theprogram the output shows two values of s appended to sammy_listsome jumps are prevented by the debugger especially when jumpingin and out of certain ﬂow control statements that are undeﬁned forexample you can not jump into functions before arguments are deﬁnedand you can not jump into the middle of a tryexcept statement youalso can not jump out of a finally blockthe jump statement with the python debugger allows you to changethe execution ﬂow while debugging a program to see whether ﬂowcontrol can be modiﬁed to different purposes or to better understandwhat issues are arising in your codetable of common pdb commandshere is a table of useful pdb commands along with their short forms tokeep in mind while working with the python debuggercommandshort formwhat it doesargsaprint the argument list of thecurrent functionbreakbcreates a breakpoint requiresparameters in the programexecutioncontinuec or contcontinues program executionhelphprovides list of commands orhelp for a speciﬁed commandjumpjset the next line to be executedlistlprint the source code aroundthe current linenextncontinue execution until thenext line in the currentfunction is reached or returnsstepsexecute the current linestopping at ﬁrst possibleoccasionppppprettyprints the value of theexpressionquit or exitqaborts the programreturnrcontinue execution until thecurrent function returnsyou can read more about the commands and working with thedebugger from the python debugger documentationconclusiondebugging is an important step of any software development projectthe python debugger pdb implements an interactive debuggingenvironment that you can use with any of your programs written inpythonwith features that let you pause your program look at what valuesyour variables are set to and go through program execution in a discretestepbystep manner you can more fully understand what your programis doing and ﬁnd bugs that exist in the logic or troubleshoot knownissueshow to debug python with an interactiveconsoledebugging is a part of the software development process whereprogrammers look for and then resolve issues that prevent the softwarefrom running correctlya useful and quick tool for debugging is the python code modulebecause it can be used to emulate the interactive interpreter the modulealso provides the opportunity for you to experiment with code that youwrite in pythonunderstanding the code modulerather than step through code with a debugger you can add the codemodule to your python program to instruct the program to stopexecution and enter into the interactive mode in order to examine howyour code is working the code module is part of the python standardlibrarythis is useful because you are able to leverage an interpreter withoutsacriﬁcing the complexity and permanence that programming ﬁles canprovide through using the code module you can avoid using printstatements throughout your code as a form of debugging which canbecome unwieldy over timeto make use of the module as a method for debugging you can use theinteract function of the module which stops execution of theprogram at the point at which it is called and provides you with aninteractive console so that you can examine the current state of yourprogramthe function with its possible parameters are as followscodeinteractbannernone readfuncnone localnone exitmsgnonethis function runs a readevalprint loop and creates an objectinstance of the interactiveconsole class which emulates thebehavior of the interactive python interpreterthe optional parameters are as follows banner can be set to a stringso that you can ﬂag where the interpreter launches readfunc can beused as the interactiveconsoleraw_input method localwill set the default namespace for the interpreter loop exitmsg can beset to a string to note where the interpreter endswith the local parameter you can use for example locallocals for a local namespace localglobals for aglobal namespace localdictglobals locals to useboth the global namespace and the present local namespacenote that the exitmsg parameter is new for python 36 so if you areusing an older version of python update it or leave off the exitmsgparameteryou can place the interact function wherever you would like inyour program to launch the interactive interpreter in the codeworking with the code modulelets look at this in the context of a bank account balances program calledbalancespy well set the local parameter to locals to set thenamespace to localbalancespy import code moduleimport codebal_a 2324bal_b 0bal_c 409bal_d 2account_balances bal_a bal_b bal_c bal_ddef display_bal for balance in account_balances if balance 0 printaccount balance of is below 0 add funds now formatbalance elif balance 0 printaccount balance of is equal to 0 add funds soon formatbalance else printaccount balance of is above 0formatbalance use interact function to start the interpreter with local namespacecodeinteractlocallocalsdisplay_balwe used the function codeinteract with the locallocalsparameter to use the local namespace as the default within the interpreterlooplets run the program above using the python3 command if werenot in a virtual environment or the python command if we arepython balancespyonce we run the program well receive the following output initiallypython 352 default nov 17 2016 170523gcc 540 20160609 on linuxtype help copyright credits or license for more informationinteractiveconsoleyour cursor will be placed at the end of the line just like it wouldbe in the python interactive shellfrom here you can issue calls to print variables functions etc printbal_c409 printaccount_balances2324 0 409 2 printdisplay_balaccount balance of 2324 is 0 or aboveaccount balance of 0 is equal to 0 add funds soonaccount balance of 409 is 0 or aboveaccount balance of 2 is below 0 add funds nownone printdisplay_balfunction display_bal at 0x104b80f28we see that by using the local namespace we are able to print thevariables and invoke the function the ﬁnal print call shows thelocation of the function display_bal within computer memoryonce you are satisﬁed with what you have been able to examine fromworking with the interpreter you can press ctrl d for nixbasedsystems or ctrl z for windowsbased systems to leave the consoleand continue with the execution of the programif you would like to leave the console without running the remainderof the program you can do so by typing quit and the program willbe abortedto leverage the banner and exitmsg parameters we can do so asfollowsbalancespy use interact function to start the interpretercodeinteractbannerstart locallocals exitmsgenddisplay_balwhen we run the program well receive the following output when werun the programstartusing the banner parameter can allow you to set multiple pointswithin your code and give you the ability to identify them for exampleyou can have a banner that prints in forloop with an exitmsgthat prints out of forloop so you can tell exactly where you arein the codefrom here we can use the interpreter as usual once we type ctrl d to exit the interpreter well receive the exit message and the functionwill runendaccount balance of 2324 is 0 or aboveaccount balance of 0 is equal to 0 add funds soonaccount balance of 409 is 0 or aboveaccount balance of 2 is below 0 add funds nowthe program has now fully run following the interactive sessiononce you are done using the code module to debug your code youshould remove the code functions and import statement so that yourprogram will run as usual the code module provides a utility so onceyou are done it is important to clean up after yourselfconclusionusing the code module to launch an interactive console can allow you tolook at what the code is doing on a granular level to understand itsbehavior and make changes as needed to read more about it you canread the ofﬁcial documentation of the code moduleto learn more about other methods you can use to debug your pythoncode read our tutorial on how to use the python debugger pdb and ourtutorial on how to use logginghow to use loggingthe logging module is part of the standard python library andprovides tracking for events that occur while software runs you can addlogging calls to your code to indicate what events have happenedthe logging module allows for both diagnostic logging that recordsevents related to an applications operation as well as audit loggingwhich records the events of a users transactions for analysis it isespecially used to record events to a ﬁlewhy use the logging modulethe logging module keeps a record of the events that occur within aprogram making it possible to see output related to any of the eventsthat occur throughout the runtime of a piece of softwareyou may be more familiar with checking that events are occurring byusing the print statement throughout your code the printstatement does provide a basic way to go about debugging your code toresolve issues while embedding print statements throughout yourcode can track the execution ﬂow and the current state of your programthis solution proves to be less maintainable than using the loggingmodule for a few reasonsit becomes difﬁcult to distinguish between debugging output andnormal program output because the two are mixedwhen using print statements dispersed throughout code thereis no easy way to disable the ones that provide debugging outputit becomes difﬁcult to remove all the print statements when youare done with debuggingthere is no log record that contains readily available diagnosticinformationit is a good idea to get in the habit of using the logging module inyour code as this is more suitable for applications that grow beyondsimple python scripts and provides a sustainable approach to debuggingbecause logs can show you behavior and errors over time they alsocan give you a better overall picture of what is going on in yourapplication development processprinting debug messages to consoleif you are used to using the print statement to see what is occurringin a program you may be used to seeing a program that deﬁnes a classand instantiates objects that looks something like thispizzapyclass pizza def __init__self name price selfname name selfprice price printpizza created formatselfname selfprice def makeself quantity1 printmade pizzasformatquantity selfname def eatself quantity1 printate pizzasformatquantity selfnamepizza_01 pizzaartichoke 15pizza_01makepizza_01eatpizza_02 pizzamargherita 12pizza_02make2pizza_02eatthe code above has an __init__ method to deﬁne the name and price of an object of the pizza class it then has two methods onecalled make for making pizzas and one called eat for eatingpizzas these two methods take in the parameter of quantity which isinitialized at 1now lets run the programpython pizzapywell receive the following outputoutputpizza created artichoke 15made 1 artichoke pizzasate 1 pizzaspizza created margherita 12made 2 margherita pizzasate 1 pizzaswhile the print statement allows us to see that the code isworking we can use the logging module to do this insteadlets remove or comment out the print statements throughout thecode and add import logging to the top of the ﬁlepizzapyimport loggingclass pizza def __init__self name value selfname name selfvalue valuethe logging module has a default level of warning which is a levelabove debug since were going to use the logging module fordebugging in this example we need to modify the conﬁguration so thatthe level of loggingdebug will return information to the console forus we can do that by adding the following line below the importstatementpizzapyimport loggingloggingbasicconfiglevelloggingdebugclass pizzathis level of loggingdebug refers to a constant integer value thatwe reference in the code above to set a threshold the level of debug is10now we will replace all of the print statements with loggingdebug statements instead unlike loggingdebug whichis a constant loggingdebug is a method of the logging modulewhen working with this method we can make use of the same stringpassed to print as shown belowpizzapyimport loggingloggingbasicconfiglevelloggingdebugclass pizza def __init__self name price selfname name selfprice price loggingdebugpizza created formatselfname selfprice def makeself quantity1 loggingdebugmade pizzasformatquantity selfname def eatself quantity1 loggingdebugate pizzasformatquantity selfnamepizza_01 pizzaartichoke 15pizza_01makepizza_01eatpizza_02 pizzamargherita 12pizza_02make2pizza_02eatat this point when we run the program with the python pizzapycommand well receive this outputoutputdebugrootpizza created artichoke 15debugrootmade 1 artichoke pizzasdebugrootate 1 pizzasdebugrootpizza created margherita 12debugrootmade 2 margherita pizzasdebugrootate 1 pizzasthe log messages have the severity level debug as well as the word root embedded in them which refers to the level of your pythonmodule the logging module can be used with a hierarchy of loggersthat have different names so that you can use a different logger for eachof your modulesfor example you can set loggers equal to different loggers that havedifferent names and different outputlogger1 logginggetloggermodule_1logger2 logginggetloggermodule_2logger1debugmodule 1 debuggerlogger2debugmodule 2 debuggeroutputdebugmodule_1module 1 debuggerdebugmodule_2module 2 debuggernow that we have an understanding of how to use the loggingmodule to print messages to the console lets move on to using the logging module to print messages out to a ﬁlelogging messages to a filethe primary purpose of the logging module is to log messages to a ﬁlerather than to a console keeping a ﬁle of messages provides you withdata over time that you can consult and quantify so that you can seewhat changes need to be made to your codeto start logging to a ﬁle we can modify the loggingbasicconfig method to include a filename parameterin this case lets call the ﬁlename testlogpizzapyimport loggingloggingbasicconfigfilenametestlog levelloggingdebugclass pizza def __init__self name price selfname name selfprice price loggingdebugpizza created formatselfname selfprice def makeself quantity1 loggingdebugmade pizzasformatquantity selfname def eatself quantity1 loggingdebugate pizzasformatquantity selfnamepizza_01 pizzaartichoke 15pizza_01makepizza_01eatpizza_02 pizzamargherita 12pizza_02make2pizza_02eatthe code above is the same as it was in the previous section exceptthat now we added the ﬁlename for the log to print to once we run thecode with the python pizzapy command we should have a new ﬁlein our directory called testloglets open the testlog ﬁle with nano or the text editor of yourchoicenano testlogwhen the ﬁle opens well see the followingtestlogdebugrootpizza created artichoke 15debugrootmade 1 artichoke pizzasdebugrootate 1 pizzasdebugrootpizza created margherita 12debugrootmade 2 margherita pizzasdebugrootate 1 pizzasthis is similar to the console output that we encountered in theprevious section except now it is in the testlog ﬁlelets close the ﬁle with ctrl x and move back into the pizzapyﬁle so that we can modify the codewell keep much of the code the same but modify the parameters inthe two pizza instances pizza_01 and pizza_02pizzapyimport loggingloggingbasicconfigfilenametestlog levelloggingdebugclass pizza def __init__self name price selfname name selfprice price loggingdebugpizza created formatselfname selfprice def makeself quantity1 loggingdebugmade pizzasformatquantity selfname def eatself quantity1 loggingdebugate pizzasformatquantity selfname modify the parameters of the pizza_01 objectpizza_01 pizzasicilian 18pizza_01make5pizza_01eat4 modify the parameters of the pizza_02 objectpizza_02 pizzaquattro formaggi 16pizza_02make2pizza_02eat2with these changes lets run the program again with the python pizzapy commandonce the program has run we can open our testlog ﬁle again withnanonano testlogwhen we look at the ﬁle well see that several new lines were addedand that the previous lines from the last time that the program ran wereretainedtestlogdebugrootpizza created artichoke 15debugrootmade 1 artichoke pizzasdebugrootate 1 pizzasdebugrootpizza created margherita 12debugrootmade 2 margherita pizzasdebugrootate 1 pizzasdebugrootpizza created sicilian 18debugrootmade 5 sicilian pizzasdebugrootate 4 pizzasdebugrootpizza created quattro formaggi 16debugrootmade 2 quattro formaggi pizzasdebugrootate 2 pizzaswhile this information is certainly useful we can make the log moreinformative by adding additional logrecord attributes primarily wewould like to add a humanreadable time stamp that tells us when thelogrecord was createdwe can add that attribute to a parameter called format referencing itas shown in the table with the string asctimes additionally tokeep the debug level name well need to include the string levelnames and to keep the string message that we ask the logger toprint out well include messages each of these attributes will beseparated by a colon as shown in the code added belowpizzapyimport loggingloggingbasicconfig filenametestlog levelloggingdebug formatasctimeslevelnamesmessages class pizza def __init__self name price selfname name selfprice price loggingdebugpizza created formatselfname selfprice def makeself quantity1 loggingdebugmade pizzasformatquantity selfname def eatself quantity1 loggingdebugate pizzasformatquantity selfnamepizza_01 pizzasicilian 18pizza_01make5pizza_01eat4pizza_02 pizzaquattro formaggi 16pizza_02make2pizza_02eat2when we run the code above with the added attributes with the python pizzapy command well get new lines added to our testlog ﬁle that include the humanreadable time stamp in additionto the level name of debug and the associated messages that are passedinto the logger as stringsoutputdebugrootpizza created sicilian 18debugrootmade 5 sicilian pizzasdebugrootate 4 pizzasdebugrootpizza created quattro formaggi 16debugrootmade 2 quattro formaggi pizzasdebugrootate 2 pizzas20170501 162854593debugpizza created sicilian 1820170501 162854593debugmade 5 sicilian pizzas20170501 162854593debugate 4 pizzas20170501 162854593debugpizza created quattro formaggi 1620170501 162854593debugmade 2 quattro formaggi pizzas20170501 162854593debugate 2 pizzasdepending on your needs you may want to make use of additionallogrecord attributes in your code in order to make your program ﬁleslogs relevant to youlogging debugging and other messages into separate ﬁles providesyou with a holistic understanding of your python program over timegiving you the opportunity to troubleshoot and modify your code in amanner that is informed by the historical work put into the program aswell as the events and transactions that occurtable of logging levelsas a developer you can ascribe a level of importance to the event that iscaptured in the logger by adding a severity level the severity levels areshown in the table belowlogging levels are technically integers a constant and they are all inincrements of 10 starting with notset which initializes the logger at thenumeric value of 0you can also deﬁne your own levels relative to the predeﬁned levels ifyou deﬁne a level with the same numeric value you will overwrite thename associated with that valuethe table below shows the various level names their numeric valuewhat function you can use to call the level and what that level is usedforlevelnumeric valuefunctionused tocritical50loggingcriticalshow a serious errorthe program may beunable to continuerunningerror40loggingerrorshow a more seriousproblemwarning30loggingwarningindicate somethingunexpectedhappened or couldhappeninfo20logginginfoconﬁrm that thingsare working asexpecteddebug10loggingdebugdiagnose problemsshow detailedinformationthe logging module sets the default level at warning so warning error and critical will all be logged by default in the exampleabove we modiﬁed the conﬁguration to include the debug level with thefollowing codeloggingbasicconfiglevelloggingdebugyou can read more about the commands and working with thedebugger from the ofﬁcial logging documentationconclusiondebugging is an important step of any software development projectthe logging module is part of the standard python library providestracking for events that occur while software runs and can output theseevents to a separate log ﬁle to allow you to keep track of what occurswhile your code runs this provides you with the opportunity to debugyour code based on understanding the various events that occur fromrunning your program over timehow to port python 2 code to python 3python was developed in the late 1980s and ﬁrst published in 1991 witha name inspired by the british comedy group monty python python wasconceived as a successor to the imperative generalpurpose abcprogramming language in its ﬁrst iteration python already includedexception handling functions and classes with inheritancethis tutorial will guide you through best practices and considerationsto make when migrating code from python 2 to python 3 and whetheryou should maintain code that is compatible with both versionsbackgroundpython 2 was published in 2000 signalling a more transparent andinclusive language development process it included many moreprogrammatic features and added more features throughout itsdevelopmentpython 3 is regarded as the future of python and is the version of thelanguage that is currently in development released in late 2008 python3 addressed and amended intrinsic design ﬂaws however python 3adoption has been slow due to the language not being backwardscompatible with python 2python 27 was published in 2010 as the last of the 2x releases theintention behind python 27 was to make it easier for python 2x users toport features over to python 3 by providing some measure ofcompatibility between the twoyou can learn more about python versions and choosing which to useby reading our tutorial python 2 vs python 3 practical considerationsstart with python 27to move to python 3 or to support python 2 and python 3simultaneously you should ensure that your python 2 code is completelypython 27 compatiblemany developers have already been working exclusively with python27 code but it is important to conﬁrm that anything that is onlysupported by earlier versions is working properly with python 27 and isconsistent with python 27 stylemaking sure that your code is in python 27 is especially importantbecause it is the only version of python 2 that is still being maintainedand receiving bugﬁxes if you are working on an earlier version ofpython 2 you will have to work around issues you encounter with codethat is no longer supported and is no longer receiving buxﬁxesadditionally some tools that make it easier for you to port code suchas the pylint package that looks for programming errors is not supportedby versions of python that are earlier than 27it is important to keep in mind that though python 27 is currently stillbeing supported and maintained it will eventually meet its end of lifepep 373 details the python 27 release schedule and at the time ofwriting marks its sunset date as 2020test coveragecreating test cases can be an important part of the work done to migratepython 2 to python 3 code if you are maintaining more than one versionof python you should also ensure that your test suite has good coverageoverall to ensure that each version is still working as expectedas part of your testing you can add interactive python cases to thedocstrings of all of your functions methods classes and modules andthen use the builtin doctest module to verify that they work as shownalongside doctest you can use the coveragepy package to trackunit test coverages this tool will monitor your program and note whichparts of the code have been executed and which parts could have beenexecuted but were not coveragepy can print out reports to thecommand line or provide html output it is typically used to measurethe effectiveness of tests showing you what parts of the code are beingexercised by testing and which are notkeep in mind that you are not aiming for 100 test coverage youwant to make sure that you cover any code that is confusing or unusualfor best practices you should aim for 80 coveragelearn about differences between python 2 and python 3learning about the differences between python 2 and python 3 willensure that you are able to leverage the new features that are available orwill be available in python 3our guide on python 2 vs python 3 goes over some of the keydifferences between the two versions and you can review the ofﬁcialpython documentation for more detailwhen getting started with porting and migration there are severalsyntax changes that you can implement nowprintthe print statement of python 2 has changed to a print function inpython 3python 2python 3print hello worldprinthello worldexecthe exec statement of python 2 has changed to a function that allowsexplicit locals and globals in python 3python 2python 3exec codeexeccodeexec code in globalsexeccode globalsexec code in globals localsexeccode globals locals and python 2 does ﬂoor division with the operator python 3 introduced for ﬂoor divisionpython 2python 35 2 25 2 255 2 2to make use of these operators in python 2 import division fromthe __future__ modulefrom __future__ import divisionread more about division with integersraisein python 3 raising exceptions with arguments requires parentheses andstrings can not be used as exceptionspython 2python 3raise exception argsraise exceptionraise exceptionargsraise exception args tracebackraise exceptionargswith_tracebacktracebackraise errorraise exceptionerrorexceptin python 2 it was difﬁcult to list multiple exceptions but that haschanged in python 3note that as is used explicitly with except in python 3python 2python 3except exception variableexcept anexception as variableexcept oneexception twoexception as variabledefin python 2 functions can take in sequences like tuples or lists in python3 this unpacking has been removedpython 2python 3def functionarg1 x ydef functionarg1 x_y x y x_yexprthe backtick syntax of python 2 no longer exists use repr or strformat in python 3python 2python 3x 355113x repr355113string formattingstring formatting syntax has changed from python 2 to python 3python 2python 3d s i s formati sddf 355 113 355113ddfformat355 113 355113learn how to use string formatters in python 3classthere is no need to state object in python 3python 2class myclassobject passpython 3class myclass passin python 3 metaclasses are set with the metaclass keywordpython 2class myclass __metaclass__ mymetaclass myclassmybase __metaclass__ mymetapython 3class myclassmetaclasstype passclass myclassmybase metaclassmymeta passupdate codethere are two main tools you can use to automatically update your codeto python 3 while keeping it compatible with python 2 future andmodernize each of these tools behaves somewhat differently futureworks to make python 3 idioms and best practices exist in python 2while modernize aims for a python 23 subset of python that uses thepython six module to improve compatibilityusing these tools to handle the details of rewriting the code can helpyou identify and correct potential problems and ambiguitiesyou can run the tool over your unittest suite to visually inspect andverify the code and ensure that the automatic revisions made areaccurate once the tests pass you can transform your codefrom here you will likely need to do some manual revision especiallytargeting the changes between python 2 and 3 noted in the section aboveleveraging future you should consider adding this importstatement to each of your python 27 modulesfrom __future__ import print_function division absolute_imports unicode_literalswhile this will also lead to rewrites it will ensure that your python 2code aligns with python 3 syntaxfinally you can use the pylint package to identify any otherpotential issues in the code this package contains hundreds ofindividual rules that cover a broad spectrum of problems that may occurincluding pep 8 style guide rules as well as usage errorsyou may ﬁnd that there are some constructs in your code that couldpotentially confuse pylint and tools used for automatic migration ifyou cant simplify these constructs youll need to employ thoroughunittest casescontinuous integrationif youre going to maintain your code for multiple versions of pythonyoull need to remain vigilant about running and rerunning yourunittest suite through continuous integration rather than manually asoften as possible on the code as you develop itif you make use of the six package as part of your python 2 and 3compatibility maintenance youll need to use multiple environments foryour testingone environment management tool you may consider using is the toxpackage as it will check your package installs with different pythonversions run tests in each of your environments and act as a frontend tocontinuous integration serversconclusionit is important to keep in mind that as more developer and communityattention focuses on python 3 the language will become more reﬁnedand inline with the evolving needs of programmers and less supportwill be given to python 27 if you decide to maintain versions of yourcode base for both python 2 and python 3 you may have increasingdifﬁculty with the former as it will receive fewer bugﬁxes over timeit is worthwhile to look at projects that ported python 2 to python 3including case studies such as porting chardet to python 3